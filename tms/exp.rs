#![feature(prelude_import)]
//! `tms` module provides binary packing compression using SIMD instructions.
//!
//! `tms` supports 256-bit SIMD vectors with AVX2.
//!
//! `tms` is based on "SIMD Compression and the Intersection of Sorted Integers"
//! by Daniel Lemire, Leonid Boytsov, and Nathan Kurz.
//!
//! See the scholarly journal https://arxiv.org/abs/1401.6399.
//!
//! See the C++ implementation https://github.com/lemire/SIMDCompressionAndIntersection.
//!
//! See a blog on implmenting the algorithm https://fulmicoton.com/posts/bitpacking/.
//!
//! See a Rust implementation https://docs.rs/crate/bitpacking/0.8.4.
//!
//! See Intel SIMD documentaiton https://software.intel.com/sites/landingpage/IntrinsicsGuide/.
#![allow(dead_code, unused_imports, unused_variables)]
#![feature(portable_simd)]
#![feature(is_sorted)]
#[prelude_import]
use std::prelude::rust_2018::*;
#[macro_use]
extern crate std;
extern crate rand;
pub mod dat {
    use rand::prelude::*;
    use rand::distributions::Uniform;
    use std::u32;
    use std::cmp::max;
    use super::*;
    pub mod goog {
        /// `blk` returns N u32 google timestamps.
        pub fn blk(len: usize) -> Vec<u32> {
            let mut d = day();
            d.truncate(len);
            return d;
        }
        /// `blk127` returns 127 u32 google timestamps.
        pub fn blk127() -> Vec<u32> {
            return <[_]>::into_vec(box [
                509, 610, 711, 1096, 1147, 2019, 2069, 2124, 2445, 2495, 2635, 2686, 2789, 3570,
                3621, 4616, 4668, 5120, 5171, 5221, 5531, 6025, 9047, 9265, 9496, 9547, 9905,
                10203, 11091, 11379, 12156, 12257, 12372, 12487, 12596, 12646, 12697, 13094, 13580,
                13630, 13781, 14458, 14508, 14713, 14763, 14831, 15270, 15381, 15527, 15683, 15784,
                15934, 17160, 17211, 17261, 17392, 17584, 17690, 17791, 17900, 18094, 18685, 20052,
                20324, 20375, 25580, 26979, 27286, 28619, 28669, 30662, 31585, 31635, 32337, 33434,
                34933, 35051, 35176, 35277, 35423, 35577, 35728, 35871, 36055, 36105, 36960, 37074,
                37200, 37347, 37475, 37593, 37724, 37873, 37923, 37974, 38024, 38075, 38211, 39060,
                43483, 43533, 45739, 47901, 48028, 48226, 48361, 50448, 50651, 50786, 50936, 51054,
                51238, 51486, 51656, 51839, 51941, 51991, 52042, 52144, 52247, 52349, 52453, 53551,
                53601, 55059, 55110, 55196,
            ]);
        }
        /// `blk128` returns 128 u32 google timestamps.
        pub fn blk128() -> Vec<u32> {
            return <[_]>::into_vec(box [
                509, 610, 711, 1096, 1147, 2019, 2069, 2124, 2445, 2495, 2635, 2686, 2789, 3570,
                3621, 4616, 4668, 5120, 5171, 5221, 5531, 6025, 9047, 9265, 9496, 9547, 9905,
                10203, 11091, 11379, 12156, 12257, 12372, 12487, 12596, 12646, 12697, 13094, 13580,
                13630, 13781, 14458, 14508, 14713, 14763, 14831, 15270, 15381, 15527, 15683, 15784,
                15934, 17160, 17211, 17261, 17392, 17584, 17690, 17791, 17900, 18094, 18685, 20052,
                20324, 20375, 25580, 26979, 27286, 28619, 28669, 30662, 31585, 31635, 32337, 33434,
                34933, 35051, 35176, 35277, 35423, 35577, 35728, 35871, 36055, 36105, 36960, 37074,
                37200, 37347, 37475, 37593, 37724, 37873, 37923, 37974, 38024, 38075, 38211, 39060,
                43483, 43533, 45739, 47901, 48028, 48226, 48361, 50448, 50651, 50786, 50936, 51054,
                51238, 51486, 51656, 51839, 51941, 51991, 52042, 52144, 52247, 52349, 52453, 53551,
                53601, 55059, 55110, 55196, 55720,
            ]);
        }
        /// `blk129` returns 129 u32 google timestamps.
        pub fn blk129() -> Vec<u32> {
            return <[_]>::into_vec(box [
                509, 610, 711, 1096, 1147, 2019, 2069, 2124, 2445, 2495, 2635, 2686, 2789, 3570,
                3621, 4616, 4668, 5120, 5171, 5221, 5531, 6025, 9047, 9265, 9496, 9547, 9905,
                10203, 11091, 11379, 12156, 12257, 12372, 12487, 12596, 12646, 12697, 13094, 13580,
                13630, 13781, 14458, 14508, 14713, 14763, 14831, 15270, 15381, 15527, 15683, 15784,
                15934, 17160, 17211, 17261, 17392, 17584, 17690, 17791, 17900, 18094, 18685, 20052,
                20324, 20375, 25580, 26979, 27286, 28619, 28669, 30662, 31585, 31635, 32337, 33434,
                34933, 35051, 35176, 35277, 35423, 35577, 35728, 35871, 36055, 36105, 36960, 37074,
                37200, 37347, 37475, 37593, 37724, 37873, 37923, 37974, 38024, 38075, 38211, 39060,
                43483, 43533, 45739, 47901, 48028, 48226, 48361, 50448, 50651, 50786, 50936, 51054,
                51238, 51486, 51656, 51839, 51941, 51991, 52042, 52144, 52247, 52349, 52453, 53551,
                53601, 55059, 55110, 55196, 55720, 57773,
            ]);
        }
        /// `blk255` returns 255 u32 google timestamps.
        pub fn blk255() -> Vec<u32> {
            return <[_]>::into_vec(box [
                509, 610, 711, 1096, 1147, 2019, 2069, 2124, 2445, 2495, 2635, 2686, 2789, 3570,
                3621, 4616, 4668, 5120, 5171, 5221, 5531, 6025, 9047, 9265, 9496, 9547, 9905,
                10203, 11091, 11379, 12156, 12257, 12372, 12487, 12596, 12646, 12697, 13094, 13580,
                13630, 13781, 14458, 14508, 14713, 14763, 14831, 15270, 15381, 15527, 15683, 15784,
                15934, 17160, 17211, 17261, 17392, 17584, 17690, 17791, 17900, 18094, 18685, 20052,
                20324, 20375, 25580, 26979, 27286, 28619, 28669, 30662, 31585, 31635, 32337, 33434,
                34933, 35051, 35176, 35277, 35423, 35577, 35728, 35871, 36055, 36105, 36960, 37074,
                37200, 37347, 37475, 37593, 37724, 37873, 37923, 37974, 38024, 38075, 38211, 39060,
                43483, 43533, 45739, 47901, 48028, 48226, 48361, 50448, 50651, 50786, 50936, 51054,
                51238, 51486, 51656, 51839, 51941, 51991, 52042, 52144, 52247, 52349, 52453, 53551,
                53601, 55059, 55110, 55196, 55720, 57773, 58271, 58383, 58487, 58588, 58727, 58777,
                59093, 59143, 60587, 60834, 61239, 61971, 63395, 63445, 63546, 63687, 65027, 65491,
                66139, 66610, 71431, 71541, 71654, 71758, 71859, 71963, 72013, 72063, 72164, 72536,
                72657, 72847, 72948, 73422, 73954, 74124, 74225, 74325, 74535, 74635, 74723, 74830,
                74880, 74930, 74981, 75031, 75178, 75329, 75458, 75559, 75641, 75821, 76116, 76166,
                76927, 77133, 77184, 77700, 77838, 77944, 78095, 78205, 78306, 78488, 78589, 78700,
                78801, 78913, 79044, 79094, 79206, 79307, 79408, 79522, 79658, 79794, 79944, 80047,
                80201, 80302, 80410, 80511, 80703, 80804, 80937, 81850, 81900, 82120, 82221, 82736,
                82787, 82837, 82887, 82950, 83051, 83153, 83203, 83263, 85183, 85284, 85412, 85584,
                85634, 85700, 86615, 86720, 86866, 86966, 87017, 87214, 87334, 87511, 87615, 88706,
                88807, 89535, 89585, 89703, 90132, 90538, 90639, 90747, 90942, 91093, 91194, 91338,
            ]);
        }
        /// `blk256` returns 256 u32 google timestamps.
        pub fn blk256() -> Vec<u32> {
            return <[_]>::into_vec(box [
                509, 610, 711, 1096, 1147, 2019, 2069, 2124, 2445, 2495, 2635, 2686, 2789, 3570,
                3621, 4616, 4668, 5120, 5171, 5221, 5531, 6025, 9047, 9265, 9496, 9547, 9905,
                10203, 11091, 11379, 12156, 12257, 12372, 12487, 12596, 12646, 12697, 13094, 13580,
                13630, 13781, 14458, 14508, 14713, 14763, 14831, 15270, 15381, 15527, 15683, 15784,
                15934, 17160, 17211, 17261, 17392, 17584, 17690, 17791, 17900, 18094, 18685, 20052,
                20324, 20375, 25580, 26979, 27286, 28619, 28669, 30662, 31585, 31635, 32337, 33434,
                34933, 35051, 35176, 35277, 35423, 35577, 35728, 35871, 36055, 36105, 36960, 37074,
                37200, 37347, 37475, 37593, 37724, 37873, 37923, 37974, 38024, 38075, 38211, 39060,
                43483, 43533, 45739, 47901, 48028, 48226, 48361, 50448, 50651, 50786, 50936, 51054,
                51238, 51486, 51656, 51839, 51941, 51991, 52042, 52144, 52247, 52349, 52453, 53551,
                53601, 55059, 55110, 55196, 55720, 57773, 58271, 58383, 58487, 58588, 58727, 58777,
                59093, 59143, 60587, 60834, 61239, 61971, 63395, 63445, 63546, 63687, 65027, 65491,
                66139, 66610, 71431, 71541, 71654, 71758, 71859, 71963, 72013, 72063, 72164, 72536,
                72657, 72847, 72948, 73422, 73954, 74124, 74225, 74325, 74535, 74635, 74723, 74830,
                74880, 74930, 74981, 75031, 75178, 75329, 75458, 75559, 75641, 75821, 76116, 76166,
                76927, 77133, 77184, 77700, 77838, 77944, 78095, 78205, 78306, 78488, 78589, 78700,
                78801, 78913, 79044, 79094, 79206, 79307, 79408, 79522, 79658, 79794, 79944, 80047,
                80201, 80302, 80410, 80511, 80703, 80804, 80937, 81850, 81900, 82120, 82221, 82736,
                82787, 82837, 82887, 82950, 83051, 83153, 83203, 83263, 85183, 85284, 85412, 85584,
                85634, 85700, 86615, 86720, 86866, 86966, 87017, 87214, 87334, 87511, 87615, 88706,
                88807, 89535, 89585, 89703, 90132, 90538, 90639, 90747, 90942, 91093, 91194, 91338,
                91448,
            ]);
        }
        /// `blk257` returns 257 u32 google timestamps.
        pub fn blk257() -> Vec<u32> {
            return <[_]>::into_vec(box [
                509, 610, 711, 1096, 1147, 2019, 2069, 2124, 2445, 2495, 2635, 2686, 2789, 3570,
                3621, 4616, 4668, 5120, 5171, 5221, 5531, 6025, 9047, 9265, 9496, 9547, 9905,
                10203, 11091, 11379, 12156, 12257, 12372, 12487, 12596, 12646, 12697, 13094, 13580,
                13630, 13781, 14458, 14508, 14713, 14763, 14831, 15270, 15381, 15527, 15683, 15784,
                15934, 17160, 17211, 17261, 17392, 17584, 17690, 17791, 17900, 18094, 18685, 20052,
                20324, 20375, 25580, 26979, 27286, 28619, 28669, 30662, 31585, 31635, 32337, 33434,
                34933, 35051, 35176, 35277, 35423, 35577, 35728, 35871, 36055, 36105, 36960, 37074,
                37200, 37347, 37475, 37593, 37724, 37873, 37923, 37974, 38024, 38075, 38211, 39060,
                43483, 43533, 45739, 47901, 48028, 48226, 48361, 50448, 50651, 50786, 50936, 51054,
                51238, 51486, 51656, 51839, 51941, 51991, 52042, 52144, 52247, 52349, 52453, 53551,
                53601, 55059, 55110, 55196, 55720, 57773, 58271, 58383, 58487, 58588, 58727, 58777,
                59093, 59143, 60587, 60834, 61239, 61971, 63395, 63445, 63546, 63687, 65027, 65491,
                66139, 66610, 71431, 71541, 71654, 71758, 71859, 71963, 72013, 72063, 72164, 72536,
                72657, 72847, 72948, 73422, 73954, 74124, 74225, 74325, 74535, 74635, 74723, 74830,
                74880, 74930, 74981, 75031, 75178, 75329, 75458, 75559, 75641, 75821, 76116, 76166,
                76927, 77133, 77184, 77700, 77838, 77944, 78095, 78205, 78306, 78488, 78589, 78700,
                78801, 78913, 79044, 79094, 79206, 79307, 79408, 79522, 79658, 79794, 79944, 80047,
                80201, 80302, 80410, 80511, 80703, 80804, 80937, 81850, 81900, 82120, 82221, 82736,
                82787, 82837, 82887, 82950, 83051, 83153, 83203, 83263, 85183, 85284, 85412, 85584,
                85634, 85700, 86615, 86720, 86866, 86966, 87017, 87214, 87334, 87511, 87615, 88706,
                88807, 89535, 89585, 89703, 90132, 90538, 90639, 90747, 90942, 91093, 91194, 91338,
                91448, 91565,
            ]);
        }
        /// `blk511` returns 511 u32 google timestamps.
        pub fn blk511() -> Vec<u32> {
            return <[_]>::into_vec(box [
                509, 610, 711, 1096, 1147, 2019, 2069, 2124, 2445, 2495, 2635, 2686, 2789, 3570,
                3621, 4616, 4668, 5120, 5171, 5221, 5531, 6025, 9047, 9265, 9496, 9547, 9905,
                10203, 11091, 11379, 12156, 12257, 12372, 12487, 12596, 12646, 12697, 13094, 13580,
                13630, 13781, 14458, 14508, 14713, 14763, 14831, 15270, 15381, 15527, 15683, 15784,
                15934, 17160, 17211, 17261, 17392, 17584, 17690, 17791, 17900, 18094, 18685, 20052,
                20324, 20375, 25580, 26979, 27286, 28619, 28669, 30662, 31585, 31635, 32337, 33434,
                34933, 35051, 35176, 35277, 35423, 35577, 35728, 35871, 36055, 36105, 36960, 37074,
                37200, 37347, 37475, 37593, 37724, 37873, 37923, 37974, 38024, 38075, 38211, 39060,
                43483, 43533, 45739, 47901, 48028, 48226, 48361, 50448, 50651, 50786, 50936, 51054,
                51238, 51486, 51656, 51839, 51941, 51991, 52042, 52144, 52247, 52349, 52453, 53551,
                53601, 55059, 55110, 55196, 55720, 57773, 58271, 58383, 58487, 58588, 58727, 58777,
                59093, 59143, 60587, 60834, 61239, 61971, 63395, 63445, 63546, 63687, 65027, 65491,
                66139, 66610, 71431, 71541, 71654, 71758, 71859, 71963, 72013, 72063, 72164, 72536,
                72657, 72847, 72948, 73422, 73954, 74124, 74225, 74325, 74535, 74635, 74723, 74830,
                74880, 74930, 74981, 75031, 75178, 75329, 75458, 75559, 75641, 75821, 76116, 76166,
                76927, 77133, 77184, 77700, 77838, 77944, 78095, 78205, 78306, 78488, 78589, 78700,
                78801, 78913, 79044, 79094, 79206, 79307, 79408, 79522, 79658, 79794, 79944, 80047,
                80201, 80302, 80410, 80511, 80703, 80804, 80937, 81850, 81900, 82120, 82221, 82736,
                82787, 82837, 82887, 82950, 83051, 83153, 83203, 83263, 85183, 85284, 85412, 85584,
                85634, 85700, 86615, 86720, 86866, 86966, 87017, 87214, 87334, 87511, 87615, 88706,
                88807, 89535, 89585, 89703, 90132, 90538, 90639, 90747, 90942, 91093, 91194, 91338,
                91448, 91565, 91666, 92048, 92149, 92199, 92258, 92308, 92742, 92793, 92913, 93300,
                93628, 94447, 95479, 95530, 95630, 95731, 95782, 95962, 96116, 96220, 96480, 96531,
                96767, 96818, 96868, 97488, 97600, 97750, 97801, 97944, 98048, 98098, 98206, 98407,
                98536, 99297, 100064, 100114, 100920, 101022, 101791, 101954, 102004, 102055,
                102473, 102523, 102787, 103200, 103250, 103488, 103908, 103958, 104008, 104820,
                104929, 104980, 107597, 109597, 111198, 112410, 112619, 113871, 113922, 114021,
                119272, 119322, 119944, 119995, 120101, 120205, 120534, 120704, 122174, 122224,
                122279, 123282, 123492, 123597, 123698, 123906, 123956, 124006, 124382, 124432,
                124532, 124676, 124726, 125020, 125120, 126293, 126393, 126626, 126676, 126727,
                127206, 130458, 130508, 131799, 132207, 132258, 132388, 132491, 132592, 132741,
                136252, 136302, 136609, 136660, 136789, 137017, 137067, 137415, 137465, 137972,
                138541, 138692, 138796, 138901, 138951, 140937, 144304, 146038, 146089, 146390,
                146730, 146819, 147001, 147206, 147257, 148325, 148375, 148860, 148910, 149031,
                149181, 149394, 151140, 151282, 151332, 151383, 151433, 151483, 152020, 152849,
                153596, 154281, 155851, 156149, 156575, 158671, 160410, 161210, 161405, 162914,
                163030, 163130, 163181, 163636, 164089, 164139, 164586, 164736, 164871, 164922,
                164972, 165210, 165260, 165586, 166073, 166124, 166332, 166476, 166831, 167930,
                167983, 168034, 168773, 169441, 169863, 169963, 171054, 173050, 173628, 173992,
                174459, 175106, 175925, 175975, 176026, 176381, 176482, 177154, 177912, 177963,
                178055, 179177, 179799, 179849, 180587, 180638, 182944, 183912, 184573, 185652,
                185753, 188009, 188059, 188307, 188358, 188563, 189280, 189694, 189829, 189934,
                190193, 190419, 192423, 192474, 192771, 194558, 194679, 196734, 196840, 198544,
                198645, 198914, 199545, 201039, 201089, 201494, 201668, 201718, 202306, 202551,
                202602, 203009, 203059, 205799, 205916, 206123, 206230, 206429, 206530, 206715,
                206825, 207124, 207175, 207252, 207355, 207502, 207645, 207795, 209329, 209823,
            ]);
        }
        /// `blk512` returns 512 u32 google timestamps.
        pub fn blk512() -> Vec<u32> {
            return <[_]>::into_vec(box [
                509, 610, 711, 1096, 1147, 2019, 2069, 2124, 2445, 2495, 2635, 2686, 2789, 3570,
                3621, 4616, 4668, 5120, 5171, 5221, 5531, 6025, 9047, 9265, 9496, 9547, 9905,
                10203, 11091, 11379, 12156, 12257, 12372, 12487, 12596, 12646, 12697, 13094, 13580,
                13630, 13781, 14458, 14508, 14713, 14763, 14831, 15270, 15381, 15527, 15683, 15784,
                15934, 17160, 17211, 17261, 17392, 17584, 17690, 17791, 17900, 18094, 18685, 20052,
                20324, 20375, 25580, 26979, 27286, 28619, 28669, 30662, 31585, 31635, 32337, 33434,
                34933, 35051, 35176, 35277, 35423, 35577, 35728, 35871, 36055, 36105, 36960, 37074,
                37200, 37347, 37475, 37593, 37724, 37873, 37923, 37974, 38024, 38075, 38211, 39060,
                43483, 43533, 45739, 47901, 48028, 48226, 48361, 50448, 50651, 50786, 50936, 51054,
                51238, 51486, 51656, 51839, 51941, 51991, 52042, 52144, 52247, 52349, 52453, 53551,
                53601, 55059, 55110, 55196, 55720, 57773, 58271, 58383, 58487, 58588, 58727, 58777,
                59093, 59143, 60587, 60834, 61239, 61971, 63395, 63445, 63546, 63687, 65027, 65491,
                66139, 66610, 71431, 71541, 71654, 71758, 71859, 71963, 72013, 72063, 72164, 72536,
                72657, 72847, 72948, 73422, 73954, 74124, 74225, 74325, 74535, 74635, 74723, 74830,
                74880, 74930, 74981, 75031, 75178, 75329, 75458, 75559, 75641, 75821, 76116, 76166,
                76927, 77133, 77184, 77700, 77838, 77944, 78095, 78205, 78306, 78488, 78589, 78700,
                78801, 78913, 79044, 79094, 79206, 79307, 79408, 79522, 79658, 79794, 79944, 80047,
                80201, 80302, 80410, 80511, 80703, 80804, 80937, 81850, 81900, 82120, 82221, 82736,
                82787, 82837, 82887, 82950, 83051, 83153, 83203, 83263, 85183, 85284, 85412, 85584,
                85634, 85700, 86615, 86720, 86866, 86966, 87017, 87214, 87334, 87511, 87615, 88706,
                88807, 89535, 89585, 89703, 90132, 90538, 90639, 90747, 90942, 91093, 91194, 91338,
                91448, 91565, 91666, 92048, 92149, 92199, 92258, 92308, 92742, 92793, 92913, 93300,
                93628, 94447, 95479, 95530, 95630, 95731, 95782, 95962, 96116, 96220, 96480, 96531,
                96767, 96818, 96868, 97488, 97600, 97750, 97801, 97944, 98048, 98098, 98206, 98407,
                98536, 99297, 100064, 100114, 100920, 101022, 101791, 101954, 102004, 102055,
                102473, 102523, 102787, 103200, 103250, 103488, 103908, 103958, 104008, 104820,
                104929, 104980, 107597, 109597, 111198, 112410, 112619, 113871, 113922, 114021,
                119272, 119322, 119944, 119995, 120101, 120205, 120534, 120704, 122174, 122224,
                122279, 123282, 123492, 123597, 123698, 123906, 123956, 124006, 124382, 124432,
                124532, 124676, 124726, 125020, 125120, 126293, 126393, 126626, 126676, 126727,
                127206, 130458, 130508, 131799, 132207, 132258, 132388, 132491, 132592, 132741,
                136252, 136302, 136609, 136660, 136789, 137017, 137067, 137415, 137465, 137972,
                138541, 138692, 138796, 138901, 138951, 140937, 144304, 146038, 146089, 146390,
                146730, 146819, 147001, 147206, 147257, 148325, 148375, 148860, 148910, 149031,
                149181, 149394, 151140, 151282, 151332, 151383, 151433, 151483, 152020, 152849,
                153596, 154281, 155851, 156149, 156575, 158671, 160410, 161210, 161405, 162914,
                163030, 163130, 163181, 163636, 164089, 164139, 164586, 164736, 164871, 164922,
                164972, 165210, 165260, 165586, 166073, 166124, 166332, 166476, 166831, 167930,
                167983, 168034, 168773, 169441, 169863, 169963, 171054, 173050, 173628, 173992,
                174459, 175106, 175925, 175975, 176026, 176381, 176482, 177154, 177912, 177963,
                178055, 179177, 179799, 179849, 180587, 180638, 182944, 183912, 184573, 185652,
                185753, 188009, 188059, 188307, 188358, 188563, 189280, 189694, 189829, 189934,
                190193, 190419, 192423, 192474, 192771, 194558, 194679, 196734, 196840, 198544,
                198645, 198914, 199545, 201039, 201089, 201494, 201668, 201718, 202306, 202551,
                202602, 203009, 203059, 205799, 205916, 206123, 206230, 206429, 206530, 206715,
                206825, 207124, 207175, 207252, 207355, 207502, 207645, 207795, 209329, 209823,
                209873,
            ]);
        }
        /// `blk513` returns 513 u32 google timestamps.
        pub fn blk513() -> Vec<u32> {
            return <[_]>::into_vec(box [
                509, 610, 711, 1096, 1147, 2019, 2069, 2124, 2445, 2495, 2635, 2686, 2789, 3570,
                3621, 4616, 4668, 5120, 5171, 5221, 5531, 6025, 9047, 9265, 9496, 9547, 9905,
                10203, 11091, 11379, 12156, 12257, 12372, 12487, 12596, 12646, 12697, 13094, 13580,
                13630, 13781, 14458, 14508, 14713, 14763, 14831, 15270, 15381, 15527, 15683, 15784,
                15934, 17160, 17211, 17261, 17392, 17584, 17690, 17791, 17900, 18094, 18685, 20052,
                20324, 20375, 25580, 26979, 27286, 28619, 28669, 30662, 31585, 31635, 32337, 33434,
                34933, 35051, 35176, 35277, 35423, 35577, 35728, 35871, 36055, 36105, 36960, 37074,
                37200, 37347, 37475, 37593, 37724, 37873, 37923, 37974, 38024, 38075, 38211, 39060,
                43483, 43533, 45739, 47901, 48028, 48226, 48361, 50448, 50651, 50786, 50936, 51054,
                51238, 51486, 51656, 51839, 51941, 51991, 52042, 52144, 52247, 52349, 52453, 53551,
                53601, 55059, 55110, 55196, 55720, 57773, 58271, 58383, 58487, 58588, 58727, 58777,
                59093, 59143, 60587, 60834, 61239, 61971, 63395, 63445, 63546, 63687, 65027, 65491,
                66139, 66610, 71431, 71541, 71654, 71758, 71859, 71963, 72013, 72063, 72164, 72536,
                72657, 72847, 72948, 73422, 73954, 74124, 74225, 74325, 74535, 74635, 74723, 74830,
                74880, 74930, 74981, 75031, 75178, 75329, 75458, 75559, 75641, 75821, 76116, 76166,
                76927, 77133, 77184, 77700, 77838, 77944, 78095, 78205, 78306, 78488, 78589, 78700,
                78801, 78913, 79044, 79094, 79206, 79307, 79408, 79522, 79658, 79794, 79944, 80047,
                80201, 80302, 80410, 80511, 80703, 80804, 80937, 81850, 81900, 82120, 82221, 82736,
                82787, 82837, 82887, 82950, 83051, 83153, 83203, 83263, 85183, 85284, 85412, 85584,
                85634, 85700, 86615, 86720, 86866, 86966, 87017, 87214, 87334, 87511, 87615, 88706,
                88807, 89535, 89585, 89703, 90132, 90538, 90639, 90747, 90942, 91093, 91194, 91338,
                91448, 91565, 91666, 92048, 92149, 92199, 92258, 92308, 92742, 92793, 92913, 93300,
                93628, 94447, 95479, 95530, 95630, 95731, 95782, 95962, 96116, 96220, 96480, 96531,
                96767, 96818, 96868, 97488, 97600, 97750, 97801, 97944, 98048, 98098, 98206, 98407,
                98536, 99297, 100064, 100114, 100920, 101022, 101791, 101954, 102004, 102055,
                102473, 102523, 102787, 103200, 103250, 103488, 103908, 103958, 104008, 104820,
                104929, 104980, 107597, 109597, 111198, 112410, 112619, 113871, 113922, 114021,
                119272, 119322, 119944, 119995, 120101, 120205, 120534, 120704, 122174, 122224,
                122279, 123282, 123492, 123597, 123698, 123906, 123956, 124006, 124382, 124432,
                124532, 124676, 124726, 125020, 125120, 126293, 126393, 126626, 126676, 126727,
                127206, 130458, 130508, 131799, 132207, 132258, 132388, 132491, 132592, 132741,
                136252, 136302, 136609, 136660, 136789, 137017, 137067, 137415, 137465, 137972,
                138541, 138692, 138796, 138901, 138951, 140937, 144304, 146038, 146089, 146390,
                146730, 146819, 147001, 147206, 147257, 148325, 148375, 148860, 148910, 149031,
                149181, 149394, 151140, 151282, 151332, 151383, 151433, 151483, 152020, 152849,
                153596, 154281, 155851, 156149, 156575, 158671, 160410, 161210, 161405, 162914,
                163030, 163130, 163181, 163636, 164089, 164139, 164586, 164736, 164871, 164922,
                164972, 165210, 165260, 165586, 166073, 166124, 166332, 166476, 166831, 167930,
                167983, 168034, 168773, 169441, 169863, 169963, 171054, 173050, 173628, 173992,
                174459, 175106, 175925, 175975, 176026, 176381, 176482, 177154, 177912, 177963,
                178055, 179177, 179799, 179849, 180587, 180638, 182944, 183912, 184573, 185652,
                185753, 188009, 188059, 188307, 188358, 188563, 189280, 189694, 189829, 189934,
                190193, 190419, 192423, 192474, 192771, 194558, 194679, 196734, 196840, 198544,
                198645, 198914, 199545, 201039, 201089, 201494, 201668, 201718, 202306, 202551,
                202602, 203009, 203059, 205799, 205916, 206123, 206230, 206429, 206530, 206715,
                206825, 207124, 207175, 207252, 207355, 207502, 207645, 207795, 209329, 209823,
                209873, 211651,
            ]);
        }
        /// `day` returns a day of u32 google timestamps.
        pub fn day() -> Vec<u32> {
            return <[_]>::into_vec(box [
                509, 610, 711, 1096, 1147, 2019, 2069, 2124, 2445, 2495, 2635, 2686, 2789, 3570,
                3621, 4616, 4668, 5120, 5171, 5221, 5531, 6025, 9047, 9265, 9496, 9547, 9905,
                10203, 11091, 11379, 12156, 12257, 12372, 12487, 12596, 12646, 12697, 13094, 13580,
                13630, 13781, 14458, 14508, 14713, 14763, 14831, 15270, 15381, 15527, 15683, 15784,
                15934, 17160, 17211, 17261, 17392, 17584, 17690, 17791, 17900, 18094, 18685, 20052,
                20324, 20375, 25580, 26979, 27286, 28619, 28669, 30662, 31585, 31635, 32337, 33434,
                34933, 35051, 35176, 35277, 35423, 35577, 35728, 35871, 36055, 36105, 36960, 37074,
                37200, 37347, 37475, 37593, 37724, 37873, 37923, 37974, 38024, 38075, 38211, 39060,
                43483, 43533, 45739, 47901, 48028, 48226, 48361, 50448, 50651, 50786, 50936, 51054,
                51238, 51486, 51656, 51839, 51941, 51991, 52042, 52144, 52247, 52349, 52453, 53551,
                53601, 55059, 55110, 55196, 55720, 57773, 58271, 58383, 58487, 58588, 58727, 58777,
                59093, 59143, 60587, 60834, 61239, 61971, 63395, 63445, 63546, 63687, 65027, 65491,
                66139, 66610, 71431, 71541, 71654, 71758, 71859, 71963, 72013, 72063, 72164, 72536,
                72657, 72847, 72948, 73422, 73954, 74124, 74225, 74325, 74535, 74635, 74723, 74830,
                74880, 74930, 74981, 75031, 75178, 75329, 75458, 75559, 75641, 75821, 76116, 76166,
                76927, 77133, 77184, 77700, 77838, 77944, 78095, 78205, 78306, 78488, 78589, 78700,
                78801, 78913, 79044, 79094, 79206, 79307, 79408, 79522, 79658, 79794, 79944, 80047,
                80201, 80302, 80410, 80511, 80703, 80804, 80937, 81850, 81900, 82120, 82221, 82736,
                82787, 82837, 82887, 82950, 83051, 83153, 83203, 83263, 85183, 85284, 85412, 85584,
                85634, 85700, 86615, 86720, 86866, 86966, 87017, 87214, 87334, 87511, 87615, 88706,
                88807, 89535, 89585, 89703, 90132, 90538, 90639, 90747, 90942, 91093, 91194, 91338,
                91448, 91565, 91666, 92048, 92149, 92199, 92258, 92308, 92742, 92793, 92913, 93300,
                93628, 94447, 95479, 95530, 95630, 95731, 95782, 95962, 96116, 96220, 96480, 96531,
                96767, 96818, 96868, 97488, 97600, 97750, 97801, 97944, 98048, 98098, 98206, 98407,
                98536, 99297, 100064, 100114, 100920, 101022, 101791, 101954, 102004, 102055,
                102473, 102523, 102787, 103200, 103250, 103488, 103908, 103958, 104008, 104820,
                104929, 104980, 107597, 109597, 111198, 112410, 112619, 113871, 113922, 114021,
                119272, 119322, 119944, 119995, 120101, 120205, 120534, 120704, 122174, 122224,
                122279, 123282, 123492, 123597, 123698, 123906, 123956, 124006, 124382, 124432,
                124532, 124676, 124726, 125020, 125120, 126293, 126393, 126626, 126676, 126727,
                127206, 130458, 130508, 131799, 132207, 132258, 132388, 132491, 132592, 132741,
                136252, 136302, 136609, 136660, 136789, 137017, 137067, 137415, 137465, 137972,
                138541, 138692, 138796, 138901, 138951, 140937, 144304, 146038, 146089, 146390,
                146730, 146819, 147001, 147206, 147257, 148325, 148375, 148860, 148910, 149031,
                149181, 149394, 151140, 151282, 151332, 151383, 151433, 151483, 152020, 152849,
                153596, 154281, 155851, 156149, 156575, 158671, 160410, 161210, 161405, 162914,
                163030, 163130, 163181, 163636, 164089, 164139, 164586, 164736, 164871, 164922,
                164972, 165210, 165260, 165586, 166073, 166124, 166332, 166476, 166831, 167930,
                167983, 168034, 168773, 169441, 169863, 169963, 171054, 173050, 173628, 173992,
                174459, 175106, 175925, 175975, 176026, 176381, 176482, 177154, 177912, 177963,
                178055, 179177, 179799, 179849, 180587, 180638, 182944, 183912, 184573, 185652,
                185753, 188009, 188059, 188307, 188358, 188563, 189280, 189694, 189829, 189934,
                190193, 190419, 192423, 192474, 192771, 194558, 194679, 196734, 196840, 198544,
                198645, 198914, 199545, 201039, 201089, 201494, 201668, 201718, 202306, 202551,
                202602, 203009, 203059, 205799, 205916, 206123, 206230, 206429, 206530, 206715,
                206825, 207124, 207175, 207252, 207355, 207502, 207645, 207795, 209329, 209823,
                209873, 211651, 212386, 212436, 212513, 212757, 212959, 215033, 215084, 215921,
                216049, 216659, 217821, 217872, 217948, 217998, 218049, 218537, 218588, 219980,
                220108, 222419, 222546, 222647, 222864, 223360, 223461, 223692, 224833, 224984,
                225123, 225241, 225342, 225464, 225600, 225701, 225978, 226574, 226679, 226827,
                227411, 227461, 227511, 227562, 227627, 228012, 228157, 228299, 228350, 229973,
                230482, 230842, 231817, 232574, 232675, 234659, 234760, 236363, 236463, 238218,
                238268, 238319, 238369, 238932, 239094, 239145, 240584, 240634, 242485, 242702,
                242752, 242802, 243647, 244378, 244428, 248646, 248915, 251358, 251416, 251559,
                252880, 254674, 254803, 254923, 255076, 255180, 256609, 256713, 256820, 257008,
                257258, 257309, 260153, 260472, 261047, 261210, 262725, 262775, 262918, 262968,
                263191, 263688, 264367, 264417, 264468, 264894, 269938, 270081, 270131, 272980,
                274472, 274760, 274810, 275545, 275595, 275955, 277919, 280069, 280475, 281099,
                281150, 282075, 285489, 285539, 287734, 287834, 287885, 290345, 290452, 290553,
                290663, 290764, 290946, 291047, 291188, 291580, 292642, 293486, 293536, 293703,
                294195, 296136, 296690, 298018, 298068, 298127, 298247, 298837, 299026, 300145,
                300693, 300970, 301591, 301909, 301959, 302210, 302261, 302709, 303022, 303224,
                304904, 304954, 305005, 305207, 305348, 305454, 305607, 305657, 306774, 306970,
                307177, 307311, 307362, 307412, 308447, 311733, 312843, 312943, 313092, 313143,
                313204, 313345, 313468, 313519, 316606, 316709, 316759, 317710, 318204, 320240,
                323906, 323956, 324311, 325765, 325897, 326043, 327461, 329927, 330253, 330850,
                331840, 332255, 332306, 332782, 333512, 333688, 334011, 335826, 335927, 336034,
                336135, 336323, 336373, 338111, 338424, 339600, 341123, 341174, 341549, 341599,
                341813, 342739, 343028, 344274, 345149, 345953, 346004, 346056, 346791, 347347,
                348089, 348139, 349082, 349425, 349476, 349526, 350494, 350544, 351805, 352100,
                353216, 353267, 358709, 358759, 359766, 361127, 361178, 362217, 362267, 362371,
                362421, 365219, 365375, 365447, 365634, 365814, 366020, 366260, 367019, 367214,
                368248, 369118, 369421, 369472, 369813, 369864, 370874, 371142, 371345, 371684,
                371820, 371870, 371925, 372562, 372612, 372720, 372770, 372904, 373174, 373224,
                373275, 373985, 375736, 375837, 375887, 376300, 376351, 376812, 376924, 377050,
                377232, 378455, 379075, 379125, 379335, 379386, 380515, 380769, 380870, 381262,
                381312, 381467, 382362, 382535, 383194, 383517, 383755, 383806, 384106, 384156,
                384234, 384476, 384577, 387166, 387216, 387687, 387737, 388089, 388140, 388248,
                389471, 389884, 389985, 390106, 390254, 390362, 390413, 392526, 393452, 393662,
                393846, 393959, 394094, 394144, 394194, 394245, 394326, 397038, 397089, 398545,
                398596, 399192, 399910, 400022, 400072, 400123, 400213, 400263, 400314, 400364,
                400842, 400893, 401967, 402017, 402376, 404570, 405321, 405421, 405472, 405528,
                405578, 405962, 406012, 406360, 407306, 408195, 408245, 408296, 408445, 408985,
                409035, 409151, 409340, 409390, 409541, 410276, 410326, 410550, 410805, 411060,
                411593, 411644, 412084, 412134, 412342, 412392, 412443, 412599, 412649, 412749,
                413196, 413464, 413515, 413662, 413712, 414065, 415584, 416835, 417453, 417646,
                418615, 420255, 420646, 421855, 421905, 422006, 422056, 422178, 423191, 423591,
                424730, 424783, 425436, 425486, 425537, 425641, 426384, 426516, 426766, 426816,
                427134, 429138, 429188, 430351, 430401, 430483, 430584, 432091, 432410, 432460,
                432979, 434900, 434974, 437066, 437116, 437196, 438022, 438305, 438355, 444714,
                444764, 445642, 447835, 449205, 449255, 450002, 450053, 462327, 462377, 462428,
                466600, 471317, 471367, 471906, 472205, 474384, 474503, 474604, 476202, 477677,
                477727, 478094, 478145, 480761, 480811, 481607, 481657, 482286, 482336, 483134,
                484037, 484184, 484900, 484950, 485457, 486189, 486295, 487118, 487320, 487432,
                487591, 487692, 487929, 489173, 489426, 489643, 489693, 491623, 491674, 492808,
                497163, 497496, 497650, 497701, 497996, 498047, 499231, 499583, 499634, 499800,
                500312, 500591, 502510, 503861, 503982, 504752, 505136, 505186, 506456, 508034,
                508226, 508711, 510364, 514577, 514688, 519699, 520610, 520911, 520961, 522992,
                523780, 525598, 531091, 531913, 540600, 540651, 541236, 541286, 541508, 542637,
                542687, 543580, 543631, 543728, 543886, 543937, 544044, 544301, 544351, 544560,
                544754, 544805, 544913, 544964, 545285, 545555, 545605, 545656, 545806, 545951,
                546055, 546799, 547289, 547339, 547649, 547875, 548800, 548850, 549311, 550724,
                551149, 551405, 552049, 552100, 552526, 552577, 555581, 556231, 556329, 556874,
                557198, 557249, 558277, 558327, 558751, 559923, 561418, 561469, 565463, 571182,
                575837, 576295, 576346, 577865, 578128, 578179, 582079, 583124, 583175, 583589,
                584143, 584917, 585738, 585788, 585955, 586006, 586476, 587506, 587557, 588495,
                589631, 589891, 590300, 591068, 591119, 591431, 591482, 591833, 593532, 594136,
                594458, 598439, 598490, 599043, 599686, 599954, 600005, 600173, 600223, 600899,
                601164, 601581, 601632, 601919, 602070, 602871, 602921, 602972, 603022, 603183,
                603875, 603925, 604119, 604719, 604831, 605045, 605152, 605253, 605370, 605471,
                605564, 606163, 606213, 606419, 606470, 607867, 608895, 608945, 609794, 609986,
                610125, 611991, 612042, 612096, 612700, 612750, 613316, 613367, 614666, 614969,
                615019, 615552, 616591, 618056, 619044, 619094, 619169, 621012, 621120, 621170,
                621221, 621271, 621321, 621906, 622006, 622451, 623159, 623210, 623424, 624573,
                624623, 625076, 625302, 625542, 627057, 627108, 627161, 627271, 627846, 627896,
                628307, 628358, 629229, 632013, 632974, 633076, 633193, 633243, 633293, 633428,
                633781, 634001, 634173, 634297, 634347, 634398, 634548, 634653, 634754, 635328,
                637301, 637352, 637402, 638310, 638423, 638524, 639293, 639344, 640324, 640991,
                641041, 642527, 642685, 643465, 644740, 646648, 646699, 652527, 653249, 653300,
                654104, 654154, 656153, 657845, 658336, 659175, 660306, 661295, 661345, 661576,
                661676, 662808, 664290, 665499, 665550, 666068, 666118, 668290, 669302, 670204,
                670305, 671029, 671079, 671331, 673557, 674054, 674105, 674326, 674757, 675545,
                676003, 676568, 677243, 678719, 679599, 680851, 681363, 681413, 681729, 682336,
                682670, 682784, 682990, 683183, 683286, 683336, 683387, 683528, 683578, 683994,
                684099, 684490, 684867, 686835, 686885, 687024, 687210, 687261, 689315, 689365,
                690018, 690972, 691756, 691807, 692170, 692336, 693204, 693570, 693706, 693756,
                693815, 693916, 694745, 695252, 695552, 695705, 695828, 695977, 696440, 696490,
                697009, 697230, 697725, 697839, 699766, 699817, 699867, 699917, 699967, 700088,
                700282, 700332, 700391, 701570, 701621, 701721, 701859, 701955, 702357, 702870,
                702921, 702971, 703358, 704165, 704216, 704294, 705206, 705256, 705900, 706001,
                707299, 707535, 707585, 707891, 710999, 711225, 711275, 712250, 712300, 714513,
                716000, 718654, 718804, 721422, 721473, 723193, 723243, 723671, 723914, 725065,
                725930, 726575, 726730, 727814, 728014, 728065, 729074, 729124, 729227, 729738,
                730145, 730248, 730622, 730672, 731072, 734449, 734500, 735320, 736264, 736314,
                736365, 736423, 736683, 736733, 736783, 739402, 746380, 746431, 752420, 753984,
                754592, 754771, 754822, 757296, 757347, 757828, 758432, 759164, 759417, 759610,
                759660, 759873, 760614, 761156, 761207, 761315, 761365, 761415, 762060, 762111,
                763845, 763987, 764037, 764730, 765889, 765939, 765990, 766231, 766332, 766596,
                766894, 766945, 767546, 767951, 768071, 768409, 768460, 768991, 769092, 770063,
                770327, 771173, 771223, 771321, 772351, 772401, 772594, 772644, 772695, 772745,
                773081, 773225, 773374, 774061, 775181, 777473, 779976, 780852, 782076, 782127,
                783113, 783163, 783527, 783826, 786012, 786062, 786343, 787837, 788386, 788695,
                788796, 789087, 789137, 789929, 791278, 792343, 793787, 793838, 794044, 794145,
                794235, 794286, 794447, 794557, 794660, 794711, 795704, 795754, 795867, 796227,
                796377, 796507, 796608, 796721, 796860, 796911, 797010, 797136, 797277, 797389,
                797520, 798077, 798359, 798460, 798590, 798793, 798908, 799009, 799129, 799232,
                799379, 799482, 799583, 799731, 800167, 800217, 801586, 801636, 805969, 810979,
                811029, 811146, 811214, 811765, 811977, 812027, 812078, 812203, 818032, 818881,
                820341, 820856, 820907, 821207, 821379, 822700, 822966, 823609, 824130, 824180,
                825006, 827120, 827170, 827609, 828704, 828755, 828806, 828962, 829062, 829113,
                829416, 830562, 831784, 831896, 831997, 832248, 832381, 832566, 832695, 832812,
                832913, 833105, 835930, 836691, 836741, 837330, 837381, 837600, 838152, 839495,
                839545, 839631, 839689, 840056, 840106, 840302, 841329, 842270, 843801, 845664,
                848602, 849501, 849551, 853464, 853514, 854016, 855613, 855663, 855920, 856021,
                856144, 856245, 856422, 858721, 859946, 860222, 860272, 860335, 860437, 860546,
                865024, 865531, 868156, 868535, 868733, 868959, 870101, 870152, 871106, 871157,
                872442, 872493, 872543, 872647, 872750, 873211, 873362, 875469, 876817, 879453,
                879503, 879636, 879775, 880930, 880982, 883541, 884195, 888909, 888959, 889009,
                889751, 890509, 891756, 891806, 895685, 895735, 897957, 898247, 900064, 900422,
                900523, 901641, 902482, 902532, 903736, 903954, 904428, 904478, 904567, 904876,
                904926, 910105, 910454, 910505, 910555, 910775, 911111, 911533, 913242, 913373,
                913474, 913594, 913698, 913863, 914021, 914071, 915156, 915263, 915474, 915525,
                915713, 916944, 917366, 919502, 922328, 925586, 925637, 925886, 935472, 935523,
                935620, 936994, 938007, 938828, 938878, 941624, 941959, 942792, 942846, 942896,
                942947, 943875, 944600, 945654, 945705, 945755, 945805, 946611, 947534, 947907,
                948010, 949358, 949409, 952789, 952839, 954205, 954504, 954554, 957587, 958190,
                958241, 959978, 960029, 960362, 960413, 960463, 961675, 962847, 962898, 966217,
                966267, 967505, 967633, 968148, 968198, 969448, 969499, 970378, 971091, 973037,
                973087, 973548, 973650, 973755, 973856, 973984, 974037, 974165, 974215, 976347,
                978717, 978767, 979458, 979767, 980060, 980110, 980161, 981134, 984126, 984251,
                984301, 984352, 984496, 984546, 984596, 984647, 984712, 986030, 986301, 986352,
                987019, 987419, 987470, 988869, 988920, 989128, 989254, 990837, 990887, 991024,
                991165, 991215, 991677, 992377, 992428, 995504, 995748, 995798, 996264, 996376,
                996792, 997150, 997397, 1003766, 1003876, 1003927, 1003977, 1004777, 1008380,
                1008430, 1008481, 1008531, 1010555, 1010606, 1010715, 1011478, 1011529, 1011712,
                1012336, 1012745, 1013859, 1013909, 1014010, 1015270, 1015450, 1016703, 1016862,
                1018213, 1018264, 1020909, 1020960, 1021284, 1021365, 1021416, 1021777, 1021828,
                1021893, 1022753, 1022967, 1023133, 1023590, 1023693, 1025726, 1025776, 1026375,
                1027397, 1030236, 1030337, 1030905, 1033668, 1033718, 1033998, 1034048, 1034099,
                1035069, 1035120, 1035284, 1036304, 1036405, 1036455, 1037255, 1037561, 1037612,
                1037956, 1038006, 1039155, 1039205, 1039327, 1039378, 1039513, 1039564, 1039614,
                1040140, 1040247, 1040351, 1040559, 1040763, 1040902, 1041007, 1041351, 1042249,
                1042867, 1045624, 1045674, 1045774, 1045875, 1045925, 1046228, 1046279, 1046886,
                1047063, 1048532, 1048583, 1049380, 1049536, 1050333, 1050384, 1051355, 1051928,
                1053241, 1053292, 1056894, 1056945, 1057018, 1057068, 1059202, 1061149, 1061199,
                1061302, 1061685, 1061899, 1062089, 1062570, 1062734, 1063447, 1063919, 1064020,
                1064907, 1065258, 1066196, 1067069, 1067119, 1067262, 1068410, 1068503, 1068856,
                1068906, 1068957, 1070044, 1070915, 1070966, 1071096, 1071146, 1071511, 1071561,
                1072561, 1072942, 1073042, 1075568, 1075731, 1076074, 1078539, 1079924, 1079974,
                1080126, 1080735, 1081358, 1081943, 1082044, 1082281, 1082400, 1083625, 1083675,
                1083748, 1083978, 1084028, 1084093, 1084797, 1088208, 1088259, 1090326, 1090376,
                1092623, 1094114, 1094214, 1094265, 1094387, 1094521, 1094725, 1095052, 1097504,
                1099001, 1099517, 1099567, 1102697, 1102747, 1102797, 1104088, 1110635, 1110736,
                1112527, 1112582, 1116513, 1116777, 1118681, 1118874, 1119340, 1120876, 1121076,
                1121127, 1122279, 1124104, 1124154, 1124386, 1124436, 1124683, 1124894, 1124944,
                1125144, 1127535, 1128527, 1128994, 1129045, 1129253, 1129936, 1130921, 1130971,
                1134095, 1137334, 1137675, 1140725, 1141472, 1141522, 1144252, 1144407, 1144457,
                1144700, 1144851, 1144983, 1145034, 1145300, 1145431, 1145481, 1145914, 1149946,
                1150080, 1150340, 1150391, 1150563, 1150614, 1150664, 1150765, 1150995, 1151045,
                1151146, 1151353, 1151403, 1152329, 1152379, 1153253, 1153390, 1153491, 1153920,
                1153971, 1154021, 1154497, 1154598, 1154702, 1155113, 1155164, 1155288, 1155338,
                1157880, 1158851, 1158902, 1158957, 1159466, 1159656, 1159771, 1160143, 1160375,
                1160960, 1161011, 1161174, 1161472, 1161669, 1161818, 1163233, 1163283, 1163747,
                1163848, 1164093, 1164212, 1164685, 1165607, 1166214, 1166505, 1167113, 1167693,
                1168185, 1168311, 1168677, 1168901, 1169014, 1169199, 1170462, 1170586, 1170775,
                1171809, 1171937, 1171988, 1172038, 1172323, 1172476, 1172527, 1172583, 1173166,
                1175157, 1175292, 1175342, 1175495, 1175546, 1175996, 1176047, 1176416, 1176733,
                1176785, 1176835, 1177019, 1177069, 1177211, 1177312, 1177413, 1177530, 1181928,
                1182734, 1182835, 1182945, 1183096, 1183208, 1185762, 1185813, 1185863, 1185913,
                1185975, 1187112, 1187233, 1187334, 1190650, 1190750, 1190968, 1191069, 1191171,
                1191279, 1191379, 1191430, 1192556, 1195812, 1195903, 1195953, 1196003, 1196471,
                1196613, 1196775, 1196825, 1196914, 1198180, 1198405, 1198456, 1199032, 1199232,
                1199449, 1199908, 1201807, 1201858, 1202652, 1202702, 1204088, 1204228, 1204493,
                1204544, 1204594, 1204750, 1204801, 1204851, 1204901, 1205100, 1205201, 1205346,
                1205450, 1205556, 1205853, 1209341, 1209391, 1209442, 1209560, 1209829, 1210028,
                1210148, 1210249, 1210513, 1210564, 1211200, 1211509, 1211916, 1211975, 1212025,
                1212606, 1213760, 1214293, 1215261, 1215311, 1215720, 1215771, 1217401, 1218426,
                1218691, 1219028, 1223955, 1224831, 1226633, 1226733, 1236628, 1236744, 1236795,
                1237575, 1239976, 1240477, 1240527, 1241481, 1242782, 1242832, 1251794, 1253503,
                1254512, 1254563, 1255784, 1255835, 1257122, 1257172, 1258095, 1258197, 1258298,
                1258348, 1258812, 1259770, 1261692, 1261743, 1262018, 1262708, 1262901, 1262951,
                1263485, 1265432, 1267756, 1268360, 1269672, 1270051, 1270183, 1270431, 1271508,
                1272017, 1272164, 1272214, 1273625, 1274268, 1274320, 1274383, 1274484, 1276400,
                1276451, 1277943, 1278310, 1282343, 1284932, 1285289, 1287484, 1287535, 1292422,
                1292472, 1292536, 1292637, 1292785, 1296676, 1297162, 1297279, 1297462, 1297642,
                1300243, 1300293, 1300638, 1300696, 1300803, 1301471, 1301521, 1301571, 1301689,
                1301790, 1301890, 1302784, 1303192, 1303694, 1303840, 1303941, 1305334, 1305385,
                1305928, 1307641, 1308650, 1308701, 1308857, 1308926, 1312288, 1313396, 1314126,
                1314573, 1315307, 1320148, 1320198, 1321933, 1322573, 1322683, 1323560, 1323611,
                1324410, 1324460, 1325110, 1326666, 1327952, 1328250, 1332065, 1336958, 1340072,
                1344031, 1344082, 1344851, 1350911, 1351111, 1351162, 1351397, 1351447, 1353181,
                1353231, 1353715, 1353765, 1354309, 1355027, 1355128, 1355458, 1355558, 1355609,
                1355659, 1356048, 1356234, 1356898, 1357354, 1358243, 1358293, 1358471, 1358765,
                1358815, 1358929, 1359030, 1359173, 1359276, 1359755, 1359808, 1360132, 1360182,
                1360785, 1360885, 1362342, 1362442, 1362553, 1363359, 1363892, 1363942, 1365564,
                1365730, 1365894, 1365944, 1368881, 1370875, 1371305, 1371355, 1371677, 1371976,
                1372205, 1372284, 1374647, 1374747, 1377008, 1377058, 1377109, 1377480, 1377530,
                1379112, 1379819, 1380180, 1382698, 1383785, 1385910, 1386818, 1386868, 1387638,
                1387812, 1387862, 1387979, 1389307, 1390312, 1390363, 1393285, 1394010, 1394263,
                1394314, 1398381, 1400360, 1401224, 1401568, 1401618, 1403103, 1403257, 1403307,
                1403389, 1403439, 1404010, 1404185, 1404631, 1404732, 1406150, 1406201, 1406251,
                1406391, 1408192, 1408243, 1409098, 1409149, 1409199, 1411201, 1411330, 1411738,
                1412681, 1412731, 1412782, 1413240, 1413341, 1417264, 1417366, 1418458, 1418508,
                1423576, 1423990, 1426852, 1427839, 1428602, 1428719, 1430492, 1430542, 1431607,
                1435000, 1435050, 1436203, 1436254, 1436774, 1438004, 1438054, 1439506, 1439558,
                1439659, 1439798, 1439849, 1440635, 1441880, 1441930, 1442990, 1443040, 1443992,
                1444043, 1444289, 1444713, 1444926, 1444977, 1445106, 1445424, 1445987, 1446037,
                1447043, 1449427, 1449810, 1449860, 1450294, 1451426, 1451476, 1452222, 1455943,
                1456855, 1457501, 1458090, 1458140, 1458234, 1465108, 1465159, 1465234, 1465503,
                1465708, 1466498, 1466549, 1466663, 1469122, 1469715, 1469832, 1469933, 1470062,
                1470327, 1471845, 1471896, 1472146, 1472265, 1472381, 1472563, 1472910, 1473656,
                1473791, 1473841, 1474568, 1474864, 1475595, 1476058, 1476109, 1476159, 1477666,
                1483643, 1484492, 1484543, 1485827, 1486864, 1490365, 1490710, 1490811, 1490981,
                1491191, 1492801, 1492910, 1493080, 1493404, 1493455, 1493684, 1494849, 1495080,
                1498322, 1501809, 1506660, 1507754, 1507804, 1507855, 1509323, 1509740, 1509793,
                1509843, 1512478, 1512698, 1516093, 1516143, 1519118, 1519168, 1519557, 1519818,
                1519869, 1521577, 1524941, 1526635, 1527356, 1527407, 1527946, 1532079, 1532527,
                1533038, 1534142, 1534636, 1534686, 1535943, 1537469, 1538222, 1538308, 1539896,
                1541554, 1543042, 1543092, 1545839, 1545972, 1548460, 1549386, 1549436, 1550634,
                1550684, 1551136, 1551187, 1551343, 1551479, 1553757, 1555311, 1555361, 1555416,
                1557637, 1560150, 1560200, 1560269, 1560369, 1560439, 1563314, 1564132, 1564585,
                1564636, 1566080, 1568318, 1568368, 1569304, 1569691, 1571590, 1572089, 1572139,
                1572251, 1573396, 1573447, 1576986, 1577087, 1578165, 1578426, 1580340, 1580390,
                1580443, 1582591, 1582641, 1589387, 1589438, 1589564, 1589615, 1590399, 1590924,
                1594648, 1594698, 1594871, 1597449, 1597499, 1599082, 1600025, 1600076, 1601598,
                1601649, 1601812, 1602965, 1605415, 1605466, 1606164, 1606950, 1607001, 1608900,
                1609159, 1611258, 1611693, 1611744, 1611865, 1611916, 1612126, 1615226, 1615401,
                1615930, 1615981, 1616483, 1617710, 1617902, 1618319, 1618370, 1618817, 1618868,
                1622115, 1622165, 1622216, 1622266, 1622508, 1622558, 1624583, 1625186, 1628538,
                1629568, 1634064, 1634114, 1634165, 1636522, 1636572, 1637334, 1637385, 1637647,
                1638388, 1638438, 1638841, 1638897, 1639422, 1640655, 1641448, 1642309, 1642701,
                1643858, 1644430, 1644480, 1646352, 1648633, 1648733, 1649909, 1652472, 1652974,
                1654425, 1654574, 1655768, 1655818, 1655869, 1657864, 1658142, 1658192, 1659314,
                1660869, 1663064, 1665730, 1668902, 1670164, 1671964, 1673850, 1673900, 1674403,
                1678291, 1678341, 1679081, 1680998, 1681049, 1681181, 1682665, 1682715, 1686419,
                1686834, 1686943, 1692052, 1692102, 1692320, 1697942, 1702561, 1703603, 1703653,
                1707858, 1721152, 1721202, 1721753, 1721854, 1724668, 1725225, 1725276, 1725983,
                1728054, 1729851, 1731184, 1731234, 1732678, 1733259, 1734030, 1734725, 1735647,
                1735698, 1735985, 1736036, 1736340, 1738641, 1738691, 1738749, 1738800, 1739670,
                1739720, 1745881, 1746912, 1747121, 1747171, 1747613, 1748699, 1749518, 1750151,
                1750201, 1755683, 1755733, 1760698, 1761344, 1761395, 1766763, 1768052, 1768159,
                1769311, 1769361, 1770490, 1771680, 1771730, 1771817, 1771868, 1772572, 1772673,
                1772992, 1774475, 1774526, 1774699, 1775584, 1777589, 1779027, 1779077, 1780419,
                1781317, 1782106, 1784587, 1784811, 1784861, 1784918, 1785022, 1785130, 1785180,
                1785231, 1785421, 1785526, 1785576, 1785908, 1786620, 1788224, 1788479, 1788647,
                1788821, 1789965, 1790042, 1791079, 1791256, 1791469, 1791520, 1792610, 1794198,
                1795678, 1795728, 1795779, 1795874, 1797241, 1797291, 1797341, 1797392, 1797442,
                1797637, 1797687, 1797777, 1797828, 1797910, 1797961, 1798908, 1799058, 1799436,
                1799560, 1799715, 1799843, 1800213, 1800263, 1802040, 1802091, 1802761, 1802811,
                1804994, 1805741, 1805792, 1807305, 1808118, 1808646, 1808696, 1808841, 1808891,
                1809111, 1809161, 1810301, 1810352, 1810402, 1810685, 1810735, 1810940, 1810990,
                1811105, 1811155, 1811285, 1811335, 1812217, 1812267, 1812821, 1813119, 1813906,
                1814013, 1814063, 1814368, 1814468, 1818975, 1819105, 1819155, 1819206, 1819362,
                1819462, 1819512, 1819763, 1819813, 1819863, 1822168, 1822219, 1824624, 1825499,
                1825550, 1827224, 1829252, 1829678, 1830874, 1830924, 1831499, 1832154, 1832204,
                1832254, 1832981, 1833211, 1833262, 1833908, 1839280, 1839950, 1840001, 1840052,
                1842399, 1843418, 1843477, 1843647, 1844064, 1844164, 1844224, 1844637, 1844688,
                1845237, 1847644, 1849892, 1852343, 1854570, 1856176, 1857228, 1859375, 1859425,
                1860761, 1864036, 1867176, 1867226, 1869969, 1872038, 1872088, 1873140, 1875066,
                1877110, 1877160, 1878926, 1879302, 1879403, 1879936, 1880119, 1880169, 1880431,
                1880627, 1880678, 1881000, 1881084, 1883903, 1884822, 1884872, 1886691, 1889482,
                1889959, 1890072, 1890254, 1890356, 1890830, 1890881, 1893477, 1893528, 1895215,
                1895265, 1895316, 1896646, 1897104, 1899190, 1899459, 1900229, 1903835, 1903885,
                1904642, 1905193, 1906075, 1906176, 1906317, 1906383, 1909200, 1909250, 1915821,
                1915871, 1916420, 1916471, 1917156, 1918208, 1918258, 1919373, 1919981, 1920140,
                1920643, 1920764, 1920910, 1921011, 1921225, 1921334, 1921743, 1922290, 1922645,
                1922695, 1922796, 1924152, 1924300, 1924350, 1924599, 1924704, 1925147, 1925386,
                1925856, 1925957, 1926067, 1926168, 1926302, 1926977, 1927303, 1927353, 1928031,
                1930195, 1931708, 1931758, 1933228, 1937077, 1937128, 1937368, 1937489, 1938229,
                1938280, 1938330, 1938522, 1938703, 1938753, 1939112, 1939498, 1939548, 1939798,
                1940513, 1941415, 1941465, 1942022, 1942819, 1942870, 1944604, 1945002, 1945052,
                1945459, 1947450, 1947501, 1947759, 1947811, 1947922, 1948427, 1948477, 1949115,
                1949166, 1949569, 1949675, 1949854, 1949904, 1952008, 1952881, 1952981, 1953254,
                1953635, 1955504, 1957258, 1958414, 1958596, 1958697, 1958886, 1959302, 1966577,
                1966787, 1966838, 1967007, 1967057, 1967294, 1967344, 1967395, 1967528, 1967629,
                1967730, 1967780, 1967831, 1968316, 1969375, 1969476, 1969600, 1971607, 1972625,
                1978689, 1979292, 1979342, 1980909, 1982129, 1983188, 1990726, 1990827, 1991610,
                1991660, 1991908, 1992860, 1993705, 1996911, 1997073, 1997533, 1998023, 1998125,
                1998226, 1998913, 2000542, 2001865, 2001915, 2002935, 2004297, 2004349, 2004471,
                2004668, 2005134, 2005235, 2005381, 2005968, 2006018, 2006068, 2006264, 2008003,
                2008546, 2008647, 2008758, 2008859, 2008986, 2009830, 2009881, 2009931, 2009981,
                2010508, 2010805, 2010913, 2011237, 2011288, 2011498, 2012347, 2013127, 2013480,
                2013530, 2013751, 2014843, 2015017, 2015068, 2015206, 2015580, 2015781, 2016211,
                2016262, 2016327, 2016428, 2016765, 2016986, 2017788, 2018199, 2018838, 2018965,
                2019015, 2019752, 2021126, 2021251, 2021313, 2021699, 2021749, 2022267, 2022417,
                2023894, 2023944, 2024101, 2024151, 2026318, 2026371, 2026421, 2026471, 2026581,
                2026731, 2026842, 2026952, 2028510, 2028561, 2028864, 2029137, 2029187, 2029330,
                2030054, 2031235, 2031286, 2031850, 2033065, 2033173, 2034401, 2034451, 2035422,
                2036332, 2036383, 2037755, 2038771, 2038821, 2039126, 2039926, 2041269, 2041319,
                2041587, 2041717, 2041767, 2042490, 2042591, 2042729, 2042830, 2042977, 2043086,
                2043941, 2044942, 2045294, 2045988, 2047223, 2048472, 2049639, 2050692, 2051414,
                2051851, 2051901, 2052944, 2053978, 2054079, 2054202, 2054386, 2055635, 2057845,
                2059921, 2060697, 2060800, 2060850, 2061412, 2061463, 2061944, 2062496, 2062633,
                2062734, 2063526, 2063576, 2063992, 2064092, 2064447, 2064577, 2064747, 2064869,
                2064970, 2065208, 2066191, 2066242, 2066602, 2066652, 2070305, 2071130, 2071180,
                2071965, 2073385, 2073591, 2074577, 2076625, 2076676, 2076733, 2077324, 2077374,
                2078946, 2080089, 2080140, 2080190, 2080291, 2080634, 2080685, 2080799, 2080900,
                2081454, 2082232, 2083277, 2086303, 2086354, 2087664, 2089531, 2089668, 2089777,
                2089920, 2090027, 2092259, 2092310, 2094239, 2094879, 2094929, 2095586, 2096215,
                2097291, 2099587, 2100009, 2100247, 2100399, 2100449, 2101278, 2101952, 2104670,
                2107059, 2107948, 2108214, 2109185, 2109540, 2109590, 2109910, 2109970, 2110022,
                2110165, 2110718, 2110818, 2115794, 2116093, 2116143, 2118126, 2118519, 2118638,
                2118950, 2119001, 2119147, 2120200, 2120250, 2122204, 2122311, 2122536, 2122586,
                2122637, 2124576, 2124677, 2125396, 2125446, 2126206, 2126257, 2126310, 2126567,
                2126617, 2126763, 2126887, 2126938, 2127363, 2128165, 2129963, 2130013, 2131457,
                2132703, 2132803, 2135352, 2135402, 2136849, 2138868, 2138918, 2140372, 2141246,
                2141297, 2141347, 2141398, 2142052, 2142103, 2145391, 2146858, 2147160, 2147545,
                2147663, 2147713, 2148362, 2148462, 2148551, 2148602, 2149607, 2149853, 2150064,
                2150114, 2151022, 2151312, 2152263, 2152314, 2152666, 2152886, 2153302, 2153464,
                2154263, 2154408, 2155423, 2156386, 2157681, 2157731, 2158347, 2158403, 2159925,
                2160255, 2162138, 2162189, 2163383, 2163434, 2165792, 2165869, 2166710, 2167136,
                2167353, 2169483, 2169922, 2170162, 2170933, 2171453, 2171637, 2172301, 2172352,
                2172972, 2173022, 2173149, 2173460, 2173932, 2173982, 2174842, 2174892, 2175008,
                2175148, 2175198, 2175249, 2176021, 2176072, 2176383, 2177908, 2178100, 2179105,
                2180137, 2181280, 2181330, 2183243, 2184788, 2185658, 2185708, 2185903, 2187076,
                2187759, 2189578, 2189847, 2189897, 2189985, 2190325, 2190431, 2196839, 2196889,
                2197179, 2197229, 2197279, 2201807, 2203765, 2203815, 2204124, 2204366, 2204536,
                2207932, 2207983, 2209524, 2210190, 2210240, 2215774, 2215824, 2219829, 2219880,
                2220663, 2222074, 2222312, 2222362, 2224536, 2225840, 2227534, 2228436, 2228486,
                2228771, 2229081, 2229132, 2232916, 2232967, 2233305, 2234014, 2234065, 2236331,
                2236890, 2238720, 2241360, 2241773, 2241823, 2241874, 2242563, 2243963, 2244013,
                2244119, 2244169, 2245126, 2245176, 2245324, 2245375, 2245578, 2246784, 2247511,
                2250292, 2256206, 2257569, 2258188, 2259806, 2261826, 2262369, 2262419, 2265000,
                2266448, 2268409, 2269243, 2270096, 2270146, 2271864, 2274975, 2275484, 2276407,
                2277912, 2278830, 2278880, 2280362, 2280851, 2280902, 2281579, 2281928, 2281978,
                2287415, 2287465, 2287531, 2288009, 2288059, 2288110, 2288268, 2288727, 2288778,
                2288828, 2290250, 2290548, 2291002, 2291740, 2292202, 2303666, 2308308, 2308511,
                2308700, 2312344, 2312563, 2312614, 2313297, 2313555, 2313606, 2317793, 2318144,
                2321123, 2321173, 2321520, 2321629, 2321925, 2325161, 2325287, 2325776, 2326890,
                2333384, 2334076, 2335070, 2337345, 2337395, 2338274, 2340929, 2341033, 2341083,
                2341637, 2342082, 2342586, 2342817, 2342867, 2343833, 2343883, 2344928, 2345057,
                2345346, 2345396, 2345728, 2346223, 2346476, 2346839, 2346971, 2347021, 2347182,
                2347333, 2347451, 2347900, 2348001, 2348090, 2348503, 2348604, 2349255, 2350268,
                2350318, 2350797, 2351124, 2351174, 2351636, 2352241, 2354253, 2356584, 2360006,
                2360703, 2360753, 2360835, 2362225, 2365615, 2366396, 2366447, 2366704, 2366754,
                2367001, 2369908, 2369958, 2370556, 2370892, 2371431, 2371482, 2371852, 2371902,
                2372280, 2372402, 2372452, 2376127, 2376418, 2376468, 2376610, 2377152, 2377252,
                2379562, 2379729, 2379978, 2380079, 2380546, 2381009, 2381060, 2381128, 2381178,
                2382456, 2385973, 2386397, 2386447, 2386498, 2386613, 2391361, 2392875, 2392925,
                2392976, 2393047, 2395105, 2395206, 2395667, 2395777, 2395878, 2396368, 2397679,
                2397729, 2398310, 2398834, 2403851, 2404492, 2404543, 2405223, 2406323, 2407030,
                2408041, 2408180, 2410621, 2411684, 2411734, 2411790, 2412002, 2412307, 2412357,
                2413124, 2416197, 2416703, 2416754, 2418516, 2418566, 2418707, 2418758, 2418968,
                2421063, 2421361, 2421411, 2424258, 2425265, 2426227, 2426723, 2427112, 2427533,
                2429116, 2429785, 2429886, 2430683, 2430733, 2430834, 2431294, 2431345, 2431973,
                2433451, 2435352, 2436890, 2436992, 2439762, 2445993, 2446118, 2450110, 2455348,
                2460885, 2463270, 2463833, 2464173, 2464616, 2465063, 2466634, 2467661, 2468139,
                2468228, 2468894, 2469174, 2469224, 2473027, 2473181, 2473232, 2473687, 2474720,
                2474770, 2474899, 2477191, 2477753, 2477805, 2478872, 2478923, 2479209, 2479957,
                2480008, 2480645, 2480870, 2480977, 2481573, 2481624, 2482187, 2482242, 2482344,
                2482688, 2482789, 2482839, 2482913, 2483420, 2483470, 2483763, 2483918, 2484036,
                2484472, 2484522, 2485018, 2485203, 2485308, 2485566, 2489382, 2489433, 2489599,
                2490213, 2490263, 2491206, 2491668, 2491718, 2491914, 2492552, 2493587, 2495127,
                2495177, 2495227, 2495277, 2495328, 2495841, 2495891, 2498480, 2498530, 2498633,
                2499091, 2499595, 2501472, 2501523, 2502603, 2503638, 2503688, 2504048, 2506405,
                2507507, 2507557, 2508321, 2508595, 2508767, 2508817, 2509188, 2509289, 2509398,
                2513909, 2520433, 2521247, 2522469, 2522519, 2522570, 2522679, 2522805, 2522939,
                2523279, 2523330, 2523392, 2523498, 2524067, 2524673, 2525225, 2525275, 2526852,
                2526902, 2527792, 2528002, 2531651, 2531701, 2531899, 2531949, 2533431, 2534248,
                2535911, 2537699, 2537894, 2537944, 2537995, 2538046, 2538229, 2538500, 2538616,
                2538666, 2538717, 2538838, 2538939, 2539424, 2539474, 2539939, 2540040, 2540172,
                2540320, 2540445, 2540495, 2540546, 2540684, 2540798, 2540849, 2540984, 2541034,
                2542142, 2542243, 2544160, 2544831, 2544881, 2545396, 2545447, 2545519, 2545961,
                2546955, 2547006, 2547849, 2547907, 2548459, 2548602, 2549442, 2550293, 2550393,
                2552490, 2552541, 2552592, 2552701, 2552754, 2562949, 2563973, 2564074, 2564625,
                2564913, 2564964, 2566036, 2568519, 2568569, 2570103, 2570153, 2572306, 2572468,
                2572518, 2573537, 2573956, 2574341, 2576032, 2576238, 2577500, 2577550, 2577795,
                2580165, 2580528, 2580579, 2581953, 2583301, 2586688, 2587126, 2588396, 2588678,
                2593111, 2595936, 2596246, 2596297, 2596374, 2597292, 2603894, 2604661, 2604912,
                2604962, 2605025, 2605076, 2605938, 2605989, 2606039, 2606089, 2606140, 2606943,
                2610044, 2610094, 2610570, 2611419, 2612930, 2612980, 2613031, 2613173, 2613299,
                2613436, 2613545, 2615325, 2615375, 2615888, 2616324, 2616464, 2616583, 2616633,
                2616724, 2616830, 2616966, 2617228, 2619757, 2619866, 2623103, 2623153, 2624110,
                2624160, 2631864, 2632533, 2632584, 2632634, 2632769, 2632819, 2633990, 2634041,
                2634446, 2634496, 2634637, 2634797, 2634906, 2635020, 2635161, 2637433, 2638023,
                2638073, 2638781, 2638994, 2639638, 2639739, 2640614, 2640760, 2640887, 2640988,
                2641089, 2641139, 2642087, 2642190, 2642297, 2642407, 2642514, 2642615, 2642756,
                2642923, 2642973, 2643196, 2643247, 2643932, 2644033, 2644177, 2644282, 2644818,
                2644869, 2645354, 2645462, 2645563, 2645698, 2646169, 2646219, 2646814, 2652559,
                2652749, 2652799, 2652899, 2653491, 2653775, 2654938, 2654989, 2656094, 2656144,
                2660219, 2660269, 2667589, 2667640, 2667690, 2667811, 2667861, 2668530, 2668580,
                2671790, 2671890, 2674938, 2674988, 2677071, 2677253, 2678840, 2680490, 2681945,
                2681995, 2682897, 2685542, 2685593, 2689089, 2689139, 2690806, 2690856, 2690906,
                2692118, 2692168, 2692736, 2695288, 2695338, 2695456, 2695568, 2695767, 2696861,
                2698030, 2698080, 2698905, 2699347, 2699397, 2700742, 2700792, 2702175, 2702300,
                2702351, 2702417, 2702468, 2703402, 2703558, 2703674, 2703775, 2705788, 2705838,
                2710195, 2711748, 2714548, 2714599, 2715794, 2715964, 2716065, 2717791, 2718079,
                2719460, 2720657, 2722199, 2722406, 2722456, 2722634, 2722685, 2723380, 2723480,
                2734239, 2750236, 2750286, 2751496, 2752713, 2752763, 2753436, 2754603, 2755459,
                2755509, 2755647, 2755697, 2755967, 2756097, 2757526, 2758733, 2759920, 2759970,
                2760043, 2760093, 2760146, 2763359, 2764230, 2765631, 2765829, 2765880, 2767558,
                2767609, 2767845, 2767950, 2768082, 2768242, 2768462, 2768512, 2768955, 2769006,
                2769152, 2769254, 2769985, 2770035, 2770085, 2770683, 2771917, 2772050, 2773112,
                2773551, 2774130, 2775676, 2776593, 2776644, 2776744, 2776872, 2776922, 2779638,
                2780123, 2781668, 2781719, 2785200, 2786002, 2786472, 2786578, 2786682, 2787515,
                2791904, 2791954, 2792209, 2792385, 2792436, 2792493, 2792688, 2792789, 2792919,
                2793970, 2794020, 2794581, 2794784, 2794901, 2796026, 2796145, 2796503, 2796680,
                2796782, 2796888, 2797913, 2800660, 2800710, 2800822, 2801160, 2801240, 2802931,
                2803032, 2803211, 2803262, 2804017, 2804067, 2804144, 2804246, 2804347, 2804470,
                2804578, 2805028, 2805078, 2805564, 2805713, 2805764, 2808661, 2808711, 2808981,
                2809082, 2809240, 2809383, 2809541, 2809591, 2810037, 2810259, 2810360, 2810436,
                2810537, 2812421, 2813493, 2813608, 2813660, 2813712, 2813842, 2813892, 2814504,
                2814590, 2814884, 2817096, 2817147, 2818773, 2818824, 2819465, 2822087, 2824094,
                2824144, 2825042, 2826639, 2827463, 2828774, 2830170, 2831132, 2831306, 2831623,
                2831674, 2832315, 2832711, 2832842, 2833315, 2833365, 2834721, 2835028, 2835399,
                2835449, 2836038, 2836089, 2837713, 2837763, 2837930, 2840204, 2840254, 2840327,
                2841482, 2841533, 2841844, 2842647, 2842698, 2842776, 2844601, 2844810, 2844911,
                2845072, 2845501, 2845812, 2845913, 2846296, 2847962, 2848870, 2849284, 2849335,
                2849636, 2851120, 2851221, 2851633, 2852275, 2852326, 2852918, 2854972, 2856258,
                2856859, 2856999, 2857111, 2857666, 2859792, 2866295, 2866346, 2866554, 2866604,
                2867178, 2867229, 2867907, 2867958, 2871437, 2871488, 2872318, 2872372, 2872483,
                2872533, 2874940, 2874990, 2875276, 2875625, 2875675, 2876109, 2876593, 2877278,
                2877329, 2877433, 2878891, 2879408, 2879459, 2879732, 2879940, 2880125, 2880283,
                2880478, 2880528, 2880579, 2881542, 2881961, 2882244, 2882912, 2884340, 2884391,
                2885297, 2885347, 2887344, 2888265, 2888316, 2889068, 2889119, 2890058, 2890108,
                2890312, 2890362, 2890510, 2891748, 2891799, 2892819, 2892926, 2893909, 2893959,
                2894441, 2896763, 2896815, 2896869, 2896924, 2896975, 2898990, 2899040, 2899100,
                2899201, 2899345, 2899454, 2899558, 2901145, 2902110, 2905168, 2905372, 2905472,
                2905571, 2905679, 2905977, 2906553, 2907111, 2907333, 2908500, 2909046, 2909259,
                2909360, 2909462, 2909563, 2909694, 2909816, 2912341, 2912391, 2913133, 2914690,
                2914740, 2916201, 2916252, 2916370, 2917085, 2917284, 2918285, 2918628, 2919342,
                2921987, 2922037, 2922421, 2924310, 2924917, 2925700, 2925800, 2931091, 2931217,
                2931318, 2931457, 2931681, 2933851, 2933902, 2934417, 2934521, 2934716, 2934847,
                2934948, 2935371, 2935421, 2935625, 2936387, 2936535, 2936636, 2936787, 2938462,
                2938512, 2938563, 2938613, 2939490, 2939968, 2940019, 2942478, 2942529, 2942888,
                2943134, 2943410, 2943461, 2943982, 2944318, 2944699, 2945170, 2945220, 2945700,
                2945751, 2945996, 2946304, 2948026, 2948079, 2948131, 2948181, 2948367, 2948418,
                2948865, 2948994, 2950270, 2950371, 2950800, 2951911, 2951962, 2952561, 2952727,
                2952779, 2954746, 2954797, 2955247, 2955458, 2958876, 2959057, 2959529, 2959579,
                2961505, 2961556, 2961606, 2961728, 2965241, 2969324, 2969548, 2970674, 2970724,
                2971085, 2971135, 2971186, 2973119, 2973892, 2973943, 2974891, 2974942, 2981138,
                2981189, 2981418, 2981468, 2981602, 2985113, 2985907, 2985957, 2987011, 2988981,
                2990243, 2990332, 2990433, 2990719, 2991088, 2991275, 2992133, 2992283, 2993426,
                2993697, 2993747, 2995647, 2995697, 2997026, 2998236, 2998287, 2999930, 3001560,
                3001610, 3001728, 3001779, 3004174, 3008814, 3012086, 3012940, 3022988, 3023038,
                3023405, 3023455, 3023803, 3023854, 3026572, 3028468, 3028587, 3028691, 3028817,
                3028917, 3028982, 3029102, 3029268, 3029318, 3029860, 3031659, 3034916, 3034967,
                3035190, 3035310, 3035957, 3036083, 3036134, 3042843, 3044651, 3045313, 3045399,
                3045449, 3048520, 3048571, 3049577, 3049628, 3050735, 3050836, 3052403, 3055190,
                3055240, 3056598, 3057041, 3057553, 3059371, 3059422, 3059557, 3059932, 3060996,
                3061496, 3061916, 3063101, 3063151, 3063922, 3063972, 3064831, 3064882, 3065426,
                3065766, 3065817, 3066935, 3066986, 3067586, 3067636, 3067687, 3068041, 3069171,
                3069618, 3071179, 3071864, 3073952, 3074003, 3074107, 3074376, 3074426, 3074477,
                3074621, 3075930, 3076327, 3076727, 3076899, 3076949, 3077000, 3077108, 3077831,
                3079009, 3080083, 3080183, 3083263, 3083788, 3085334, 3085485, 3085535, 3085585,
                3085954, 3086175, 3086276, 3086404, 3086505, 3086658, 3086766, 3086866, 3086917,
                3087081, 3087862, 3087985, 3088135, 3088254, 3088428, 3088478, 3088529, 3088727,
                3088777, 3088953, 3089064, 3089165, 3089279, 3089404, 3089538, 3089643, 3089693,
                3090160, 3090267, 3090368, 3090470, 3090577, 3090769, 3091668, 3091718, 3092144,
                3092299, 3092400, 3092523, 3092667, 3093345, 3093672, 3093723, 3093847, 3093898,
                3094262, 3095337, 3095668, 3095718, 3096065, 3096116, 3096196, 3097326, 3098776,
                3098826, 3099775, 3099865, 3099992, 3100093, 3100216, 3100328, 3101819, 3101919,
                3102051, 3102431, 3102627, 3102743, 3102844, 3102960, 3103066, 3103542, 3103643,
                3103744, 3104546, 3104596, 3105051, 3107269, 3107545, 3107596, 3107994, 3109790,
                3111318, 3111419, 3113936, 3125025, 3125075, 3127732, 3127820, 3128143, 3128822,
                3129091, 3129214, 3129421, 3129550, 3130757, 3130808, 3130874, 3130925, 3131037,
                3131195, 3131245, 3131296, 3131914, 3132935, 3132985, 3133106, 3134908, 3134959,
                3136445, 3136495, 3137015, 3137935, 3138696, 3139582, 3139683, 3139801, 3139905,
                3139955, 3140131, 3140442, 3140602, 3140706, 3141012, 3141315, 3141365, 3141891,
                3142411, 3143936, 3145524, 3145635, 3145686, 3145751, 3145852, 3145902, 3146441,
                3148707, 3150172, 3150461, 3150864, 3151018, 3153153, 3154220, 3155568, 3155924,
                3156153, 3156683, 3157771, 3158363, 3159291, 3159392, 3161057, 3161108, 3161158,
                3162081, 3162644, 3162694, 3162772, 3163052, 3163102, 3163158, 3163246, 3163296,
                3163419, 3163641, 3164937, 3164988, 3165110, 3165664, 3165765, 3165949, 3166050,
                3166371, 3166542, 3166662, 3166763, 3167269, 3167660, 3167711, 3167908, 3169527,
                3172392, 3173493, 3177483, 3177533, 3177773, 3177933, 3177984, 3178089, 3178140,
                3178307, 3178918, 3178969, 3181368, 3182679, 3182729, 3184651, 3184702, 3185335,
                3186199, 3186249, 3186751, 3187794, 3188087, 3188187, 3190596, 3190696, 3190824,
                3191445, 3191546, 3192143, 3193821, 3193922, 3194071, 3194176, 3195128, 3195178,
                3196133, 3196184, 3196392, 3196443, 3197468, 3197967, 3198018, 3198647, 3199049,
                3199099, 3201311, 3201837, 3201887, 3202315, 3202463, 3202609, 3202710, 3203697,
                3203826, 3204057, 3204108, 3204281, 3204480, 3204602, 3204683, 3204733, 3205595,
                3205646, 3206002, 3206096, 3206308, 3206413, 3206602, 3206703, 3207211, 3207261,
                3207312, 3207465, 3207584, 3207685, 3207789, 3208300, 3208350, 3208400, 3209704,
                3209815, 3209923, 3210106, 3210207, 3210312, 3210439, 3211017, 3212220, 3212393,
                3213326, 3214825, 3217005, 3217258, 3218256, 3218442, 3218492, 3218614, 3219482,
                3219618, 3219719, 3219865, 3220050, 3220158, 3220288, 3220438, 3220638, 3220828,
                3220940, 3220990, 3221040, 3221535, 3221639, 3221740, 3221841, 3221965, 3222086,
                3222964, 3223015, 3223065, 3223537, 3223653, 3223754, 3223898, 3224029, 3224937,
                3225067, 3225644, 3226088, 3226192, 3226243, 3227108, 3227158, 3227689, 3227739,
                3227824, 3227925, 3228239, 3228374, 3228424, 3228703, 3228804, 3228938, 3229103,
                3229204, 3229367, 3236585, 3236636, 3236686, 3237524, 3237820, 3237921, 3242755,
                3243290, 3243895, 3244182, 3244233, 3244691, 3244813, 3244914, 3245043, 3245145,
                3245267, 3245403, 3245539, 3245641, 3245791, 3246416, 3247428, 3247921, 3248032,
                3248084, 3248184, 3248246, 3248375, 3248476, 3248594, 3248686, 3248787, 3248888,
                3249113, 3249445, 3249552, 3249694, 3249814, 3249949, 3250774, 3251111, 3251161,
                3251451, 3251661, 3251844, 3252881, 3252932, 3253457, 3253574, 3253692, 3253794,
                3253898, 3253999, 3254201, 3254328, 3254478, 3254600, 3254773, 3254958, 3255059,
                3255196, 3255373, 3255526, 3255626, 3256234, 3256285, 3256618, 3256816, 3257017,
                3257118, 3257222, 3257402, 3257509, 3257703, 3257895, 3258993, 3259094, 3259241,
                3259690, 3259804, 3260054, 3260205, 3260307, 3260440, 3260735, 3261408, 3261520,
                3261621, 3261765, 3261917, 3262057, 3262198, 3262306, 3262410, 3262511, 3262561,
                3262612, 3263558, 3263664, 3263768, 3263878, 3263979, 3264092, 3264193, 3264367,
                3264715, 3264823, 3265433, 3265484, 3265549, 3266242, 3266826, 3266943, 3266994,
                3267550, 3267651, 3267762, 3267863, 3267933, 3268076, 3268342, 3268453, 3268567,
                3269181, 3269232, 3269688, 3269813, 3269928, 3270068, 3270519, 3270636, 3270740,
                3272037, 3272088, 3272538, 3272675, 3272778, 3272878, 3272929, 3273183, 3274120,
                3274693, 3274743, 3275993, 3276106, 3276207, 3276348, 3277042, 3277196, 3277246,
                3277687, 3277976, 3278268, 3278369, 3278526, 3278628, 3278773, 3280406, 3280456,
                3281409, 3281510, 3281620, 3281721, 3281856, 3281958, 3282087, 3282203, 3282430,
                3282908, 3283054, 3283183, 3283305, 3283505, 3283683, 3284190, 3284298, 3284400,
                3284544, 3284648, 3284789, 3284900, 3285091, 3285149, 3286233, 3286283, 3286333,
                3286445, 3286595, 3286948, 3287049, 3287198, 3287328, 3287461, 3287562, 3288336,
                3288436, 3288856, 3288907, 3289011, 3289176, 3289277, 3289424, 3289563, 3290436,
                3290964, 3291151, 3291301, 3291447, 3291556, 3292404, 3292663, 3292865, 3293011,
                3293062, 3293809, 3297157, 3297258, 3297957, 3298008, 3298087, 3298137, 3298188,
                3298271, 3298380, 3298566, 3298678, 3298819, 3299266, 3299375, 3299504, 3299605,
                3299744, 3299907, 3302236, 3302287, 3302337, 3302526, 3302577, 3302632, 3302822,
                3303237, 3304043, 3304150, 3304301, 3304435, 3304536, 3304614, 3304741, 3304842,
                3306521, 3307902, 3308025, 3308218, 3308354, 3308460, 3308757, 3309407, 3310425,
                3310476, 3311215, 3311906, 3312364, 3312464, 3312837, 3313011, 3313118, 3313264,
                3313422, 3313523, 3313673, 3313774, 3314127, 3314178, 3315255, 3315305, 3315682,
                3315733, 3315834, 3316123, 3316834, 3316884, 3317855, 3317906, 3318386, 3318813,
                3318920, 3319903, 3320018, 3320068, 3320137, 3320187, 3320238, 3320800, 3320850,
                3321078, 3321179, 3321277, 3321381, 3321432, 3322008, 3322289, 3322340, 3322712,
                3323478, 3324626, 3324678, 3325020, 3325386, 3325487, 3325631, 3325782, 3325882,
                3325933, 3325983, 3326062, 3326309, 3326410, 3326575, 3326625, 3329479, 3329630,
                3330626, 3331244, 3331727, 3331778, 3333826, 3336317, 3337695, 3338701, 3338796,
                3339891, 3341013, 3341064, 3341667, 3341717, 3346154, 3346205, 3346727, 3346777,
                3348594, 3348644, 3348702, 3348911, 3349020, 3349215, 3349321, 3349501, 3349602,
                3349653, 3350111, 3350259, 3350424, 3350525, 3350714, 3351659, 3352118, 3352222,
                3352272, 3352333, 3352902, 3353044, 3353247, 3353398, 3353551, 3354159, 3354260,
                3354443, 3354643, 3355155, 3357065, 3357115, 3357166, 3357216, 3357266, 3357374,
                3362084, 3362135, 3362351, 3363682, 3364230, 3364669, 3364719, 3365270, 3365719,
                3368726, 3369074, 3369175, 3369225, 3369552, 3369673, 3369957, 3370008, 3370432,
                3370616, 3371664, 3372128, 3372179, 3372597, 3372647, 3372762, 3372866, 3372916,
                3372966, 3373017, 3373110, 3373217, 3373360, 3373537, 3373659, 3373764, 3374147,
                3374197, 3374283, 3374747, 3374848, 3374969, 3375349, 3375692, 3376576, 3376646,
                3377650, 3378062, 3378471, 3378522, 3379607, 3379909, 3380142, 3380192, 3382327,
                3382378, 3382861, 3384727, 3385316, 3385367, 3386123, 3386672, 3386878, 3388777,
                3390802, 3391813, 3394883, 3395271, 3395417, 3395520, 3395672, 3395722, 3395889,
                3396278, 3396514, 3397694, 3398072, 3398123, 3398272, 3398373, 3399265, 3399315,
                3399431, 3399532, 3399647, 3399748, 3399870, 3399922, 3400452, 3401079, 3401356,
                3401811, 3402080, 3402457, 3402743, 3402857, 3403045, 3403325, 3403818, 3403919,
                3404023, 3404124, 3404174, 3404233, 3404334, 3404456, 3404867, 3405015, 3405116,
                3405275, 3405380, 3405515, 3405633, 3405767, 3405869, 3405920, 3406380, 3406526,
                3406667, 3406768, 3406906, 3407027, 3407148, 3407270, 3407863, 3407913, 3408371,
                3408501, 3408602, 3408716, 3408767, 3408817, 3408967, 3409090, 3409240, 3409485,
                3409535, 3409586, 3409693, 3409898, 3410002, 3410133, 3410265, 3410387, 3410544,
                3410677, 3411112, 3411313, 3412394, 3412590, 3413105, 3413206, 3413345, 3413472,
                3413878, 3413929, 3414297, 3414398, 3414525, 3414632, 3414739, 3414847, 3415878,
                3415928, 3416394, 3416479, 3416584, 3416688, 3416793, 3416920, 3416970, 3417904,
                3417954, 3418143, 3418194, 3418244, 3418384, 3418502, 3418638, 3419899, 3419950,
                3420387, 3420490, 3420632, 3420782, 3421018, 3421069, 3424685, 3429385, 3429436,
                3430003, 3430053, 3430437, 3430638, 3431934, 3431985, 3432473, 3432625, 3432762,
                3432863, 3432993, 3433140, 3433286, 3433430, 3433531, 3433675, 3433725, 3434096,
                3434523, 3434625, 3434675, 3436631, 3436682, 3436821, 3438492, 3440554, 3440820,
                3441349, 3442282, 3443985, 3444371, 3444604, 3444654, 3446910, 3448049, 3449633,
                3450176, 3451512, 3451563, 3451615, 3451764, 3452263, 3452369, 3452504, 3452605,
                3452734, 3453580, 3453795, 3453896, 3454032, 3454188, 3454238, 3454294, 3454411,
                3454512, 3454808, 3454908, 3454959, 3455117, 3455232, 3455357, 3455467, 3455572,
                3456875, 3465357, 3465407, 3470098, 3470149, 3470597, 3471496, 3471546, 3471665,
                3471725, 3471974, 3472496, 3475614, 3476069, 3477001, 3477407, 3477458, 3477508,
                3477558, 3477663, 3477714, 3478717, 3478767, 3478962, 3479135, 3481745, 3483152,
                3486269, 3487187, 3487292, 3487342, 3488515, 3488565, 3489835, 3489885, 3491251,
                3491302, 3494489, 3496136, 3500543, 3501577, 3505760, 3506476, 3506526, 3506877,
                3512049, 3512100, 3512218, 3512318, 3514280, 3515462, 3518238, 3518947, 3518998,
                3522683, 3522734, 3522785, 3522835, 3523449, 3523550, 3523651, 3523701, 3523767,
                3527309, 3527406, 3527869, 3527919, 3528068, 3528540, 3528954, 3529004, 3536220,
                3536727, 3537136, 3537186, 3540489, 3540540, 3542079, 3544474, 3544525, 3544627,
                3544999, 3545127, 3545256, 3545382, 3545531, 3545581, 3545686, 3545917, 3550127,
                3551627, 3554217, 3554268, 3554318, 3554717, 3558517, 3558568, 3558669, 3558770,
                3559148, 3559285, 3560053, 3560103, 3560531, 3560703, 3560753, 3562278, 3562328,
                3563328, 3563378, 3566942, 3567143, 3572332, 3575420, 3575520, 3575667, 3576147,
                3576198, 3577561, 3578961, 3579011, 3581137, 3581187, 3581476, 3584090, 3584140,
                3584220, 3584333, 3587875, 3588197, 3588248, 3588298, 3589179, 3589929, 3589979,
                3590030, 3590141, 3592382, 3592433, 3592545, 3592596, 3592650, 3593650, 3593700,
                3594158, 3594915, 3595383, 3595656, 3595706, 3595769, 3595819, 3596558, 3596608,
                3597661, 3597712, 3598662, 3599664, 3599714, 3599765, 3600423, 3601728, 3602244,
                3602409, 3602459, 3602872, 3602922, 3603527, 3603741, 3606513, 3606564, 3606952,
                3607127, 3607177, 3607228, 3607342, 3607392, 3607536, 3607675, 3607726, 3607948,
                3608070, 3608121, 3608276, 3608326, 3608834, 3610579, 3610866, 3610917, 3611742,
                3613025, 3613269, 3613580, 3613630, 3614550, 3614600, 3617239, 3618660, 3618711,
                3618851, 3618902, 3618952, 3619002, 3620417, 3620468, 3622131, 3622968, 3623018,
                3623356, 3623407, 3623457, 3623981, 3624032, 3624082, 3624197, 3624382, 3624483,
                3624872, 3625295, 3625345, 3625503, 3625646, 3625751, 3625875, 3626026, 3626447,
                3626960, 3627063, 3627208, 3627701, 3627751, 3628207, 3628311, 3628412, 3628741,
                3628792, 3628873, 3628999, 3629383, 3629433, 3629753, 3630108, 3630158, 3630209,
                3630259, 3630359, 3630831, 3630988, 3631101, 3631249, 3631965, 3632015, 3632066,
                3632365, 3632418, 3632468, 3632518, 3632570, 3632673, 3632784, 3632834, 3632977,
                3633400, 3633554, 3633605, 3633690, 3634352, 3634518, 3635762, 3635812, 3636159,
                3636263, 3636696, 3637165, 3637623, 3637673, 3637723, 3637935, 3638036, 3638238,
                3638288, 3638338, 3638461, 3638668, 3639010, 3639616, 3639718, 3639841, 3639942,
                3640029, 3640130, 3640261, 3640363, 3640845, 3640895, 3641858, 3641966, 3642077,
                3643530, 3643580, 3643660, 3644057, 3644176, 3644660, 3644863, 3645793, 3646701,
                3646802, 3646852, 3647027, 3647624, 3647674, 3648030, 3648080, 3648256, 3648438,
                3648488, 3648941, 3649042, 3649148, 3649685, 3650084, 3650134, 3651317, 3651368,
                3651418, 3651559, 3651886, 3653540, 3658127, 3658450, 3658500, 3659071, 3659403,
                3660727, 3660827, 3661425, 3661700, 3662784, 3662834, 3663392, 3664103, 3664229,
                3664334, 3664464, 3664565, 3664703, 3664753, 3664892, 3665756, 3665806, 3666663,
                3668230, 3668643, 3668693, 3669483, 3669705, 3669755, 3669806, 3669856, 3670501,
                3670551, 3670931, 3671045, 3671157, 3671258, 3671380, 3671512, 3672505, 3673599,
                3673702, 3673841, 3673956, 3674092, 3674214, 3674342, 3674550, 3675068, 3675169,
                3675219, 3675270, 3675425, 3675476, 3678278, 3678409, 3678560, 3678678, 3680389,
                3680556, 3680902, 3680997, 3681283, 3681383, 3681841, 3682018, 3682131, 3682266,
                3682400, 3683036, 3683561, 3685545, 3685839, 3686055, 3686785, 3688071, 3688121,
                3688241, 3688486, 3688587, 3688695, 3688796, 3688942, 3689074, 3689238, 3689714,
                3689933, 3690084, 3690193, 3691240, 3691690, 3691792, 3691893, 3692034, 3692150,
                3693189, 3693239, 3693718, 3693825, 3693993, 3694204, 3694709, 3694759, 3695318,
                3695911, 3696143, 3696194, 3697302, 3697876, 3699581, 3700650, 3700700, 3700908,
                3700959, 3702800, 3702900, 3703968, 3704019, 3704200, 3704389, 3704439, 3707330,
                3707380, 3708171, 3709893, 3710356, 3712812, 3714409, 3714469, 3715359, 3715410,
                3715472, 3715599, 3716456, 3716557, 3716986, 3717114, 3717272, 3717374, 3717475,
                3718877, 3718927, 3719022, 3719123, 3719249, 3719299, 3719523, 3719574, 3720109,
                3720503, 3720554, 3721320, 3721370, 3721429, 3721614, 3721664, 3721719, 3721910,
                3722087, 3722137, 3725267, 3725777, 3726090, 3726661, 3726784, 3726861, 3726913,
                3726985, 3727035, 3727086, 3727136, 3727237, 3727359, 3727410, 3728322, 3728373,
                3729031, 3729081, 3729260, 3729311, 3729412, 3738058, 3738587, 3738638, 3740115,
                3740243, 3740293, 3741355, 3743955, 3744338, 3744388, 3744447, 3744551, 3747040,
                3747546, 3748143, 3748193, 3748367, 3748728, 3749403, 3749504, 3750375, 3752137,
                3752285, 3752341, 3753418, 3753563, 3755526, 3755626, 3755826, 3756717, 3756767,
                3757469, 3757519, 3757872, 3757993, 3758044, 3758168, 3758346, 3758570, 3758621,
                3758737, 3761608, 3763344, 3763503, 3764476, 3764526, 3765141, 3765258, 3765358,
                3766001, 3766451, 3766776, 3768913, 3769014, 3769915, 3770016, 3770650, 3770930,
                3772637, 3773211, 3773383, 3773539, 3773589, 3774126, 3774227, 3774327, 3774377,
                3774560, 3775180, 3775425, 3776019, 3776167, 3779213, 3780219, 3780269, 3781905,
                3781955, 3782433, 3782539, 3782987, 3783087, 3783427, 3783477, 3784299, 3784425,
                3784475, 3784998, 3786269, 3786320, 3786512, 3786562, 3786912, 3787281, 3787331,
                3787382, 3787590, 3787640, 3789356, 3791188, 3791239, 3794948, 3795281, 3795331,
                3795475, 3795907, 3795957, 3806663, 3806763, 3809208, 3810688, 3812882, 3817125,
                3821624, 3821674, 3822201, 3824542, 3824592, 3827285, 3827335, 3827386, 3834142,
                3837825, 3838001, 3838200, 3842198, 3843046, 3843096, 3843545, 3843652, 3844380,
                3844430, 3844971, 3845644, 3847689, 3847740, 3848553, 3848604, 3853117, 3853168,
                3853690, 3853741, 3855281, 3855331, 3856646, 3857278, 3860260, 3860311, 3860665,
                3866729, 3868302, 3868353, 3869512, 3869920, 3870496, 3870546, 3872829, 3872961,
                3873015, 3873961, 3874038, 3876232, 3876913, 3877103, 3877950, 3881199, 3886662,
                3887065, 3887115, 3887166, 3887894, 3888107, 3888385, 3889798, 3890397, 3890719,
                3892526, 3894257, 3896955, 3898346, 3902222, 3902272, 3902479, 3902529, 3902630,
                3904913, 3905574, 3905800, 3906268, 3906610, 3906693, 3909638, 3909688, 3910799,
                3910900, 3911023, 3911169, 3911661, 3911711, 3914826, 3915342, 3915778, 3916634,
                3916735, 3916877, 3917424, 3917474, 3918209, 3925387, 3925879, 3928486, 3928536,
                3930940, 3931395, 3931642, 3933363, 3933497, 3933598, 3933740, 3933848, 3933986,
                3935129, 3935525, 3935632, 3936198, 3936248, 3936370, 3936682, 3936732, 3937219,
                3941087, 3941137, 3941610, 3943332, 3944414, 3944465, 3945721, 3945859, 3945959,
                3946143, 3946193, 3946254, 3946415, 3946904, 3947155, 3947206, 3947573, 3947851,
                3947901, 3948277, 3948328, 3949745, 3949795, 3950089, 3951025, 3951428, 3952103,
                3952153, 3954965, 3955066, 3958497, 3959471, 3959750, 3960114, 3960617, 3960812,
                3960955, 3961314, 3961509, 3961610, 3961720, 3961821, 3964248, 3964298, 3964425,
                3965901, 3968023, 3968222, 3968272, 3968322, 3968794, 3968958, 3969130, 3969231,
                3969352, 3970579, 3970656, 3970935, 3971698, 3971748, 3971864, 3972216, 3975324,
                3978688, 3982400, 3983416, 3983933, 3986299, 3986349, 3989092, 3989330, 3989521,
                3990128, 3994050, 3994835, 3994885, 3995313, 3996398, 3996448, 3997337, 3998176,
                3998226, 3998492, 3998543, 3998653, 3998753, 3998982, 4000383, 4000434, 4002719,
                4003607, 4003657, 4007070, 4011033, 4011083, 4011133, 4012153, 4012719, 4013020,
                4013159, 4013767, 4014263, 4014519, 4015103, 4015912, 4016324, 4016477, 4016693,
                4017421, 4019782, 4019832, 4020286, 4021780, 4021831, 4022267, 4022368, 4023757,
                4026371, 4026421, 4026471, 4027756, 4027972, 4028073, 4028325, 4028375, 4028450,
                4029005, 4030774, 4030824, 4031234, 4031602, 4032607, 4033612, 4038652, 4038702,
                4039152, 4040404, 4041568, 4041962, 4042012, 4046141, 4046632, 4049317, 4049369,
                4050297, 4058068, 4058169, 4058325, 4058376, 4062702, 4062752, 4063525, 4063575,
                4064047, 4065909, 4066063, 4066114, 4073457, 4073649, 4075940, 4076552, 4077101,
                4077189, 4079310, 4080141, 4080721, 4082247, 4082297, 4083008, 4083108, 4084538,
                4084783, 4086906, 4089205, 4089574, 4091223, 4093025, 4093075, 4093125, 4097087,
                4099406, 4102339, 4106636, 4106686, 4106998, 4107463, 4107766, 4107817, 4108738,
                4109060, 4109269, 4112649, 4112789, 4112839, 4114011, 4114061, 4115391, 4115492,
                4117019, 4117070, 4120469, 4121029, 4121080, 4122207, 4122658, 4122709, 4122917,
                4125356, 4125406, 4126175, 4126225, 4127023, 4127280, 4127331, 4135201, 4135252,
                4135857, 4135907, 4136796, 4147356, 4147406, 4147554, 4147659, 4147709, 4149502,
                4149831, 4150550, 4150959, 4151458, 4151508, 4151653, 4151705, 4152099, 4153284,
                4153334, 4154025, 4154126, 4154562, 4154699, 4154750, 4157921, 4159451, 4159939,
                4161625, 4165280, 4165330, 4166442, 4166495, 4171244, 4171295, 4172636, 4174997,
                4175047, 4188919, 4189575, 4189846, 4191845, 4198712, 4201304, 4202013, 4203383,
                4207775, 4207827, 4207878, 4208028, 4208198, 4208249, 4208301, 4208351, 4208401,
                4208502, 4208603, 4209029, 4209910, 4209965, 4210516, 4211020, 4211308, 4211572,
                4211673, 4211966, 4212105, 4212756, 4212806, 4212917, 4215518, 4218337, 4218387,
                4220752, 4221207, 4221257, 4222140, 4222190, 4222413, 4225138, 4227693, 4230087,
                4235124, 4235569, 4235619, 4236130, 4236657, 4236708, 4236828, 4236911, 4237319,
                4241459, 4241509, 4241560, 4242313, 4242732, 4245089, 4245139, 4245240, 4245723,
                4245823, 4246038, 4246142, 4246427, 4246477, 4246580, 4246722, 4248018, 4248068,
                4248652, 4248982, 4249033, 4249234, 4250330, 4250380, 4252940, 4253555, 4255189,
                4255360, 4257266, 4257654, 4257708, 4258237, 4258288, 4259405, 4259630, 4260630,
                4260859, 4262791, 4262842, 4263116, 4265003, 4265053, 4269038, 4269304, 4269426,
                4269605, 4269714, 4269821, 4269922, 4269988, 4270942, 4271003, 4276844, 4276894,
                4278910, 4278960, 4279010, 4279299, 4279349, 4279399, 4279595, 4279833, 4279883,
                4281144, 4281511, 4281561, 4281824, 4283006, 4285439, 4286401, 4286452, 4286666,
                4288865, 4290826, 4290935, 4293616, 4293666, 4295184, 4296040, 4296090, 4297067,
                4297118, 4297767, 4299485, 4300255, 4301427, 4301477, 4301790, 4301890, 4305925,
                4306624, 4306924, 4306975, 4311811, 4319328, 4320338, 4320389, 4321351, 4321401,
                4321502, 4321553, 4321643, 4322218, 4322319, 4322453, 4322584, 4322918, 4322969,
                4323223, 4323962, 4324114, 4324308, 4324409, 4324690, 4326017, 4326431, 4326481,
                4328411, 4330176, 4330226, 4331588, 4333972, 4334023, 4339222, 4341618, 4343869,
                4343919, 4344039, 4345687, 4345737, 4345895, 4346524, 4347707, 4348103, 4348444,
                4348494, 4348617, 4352298, 4352349, 4352399, 4352594, 4352644, 4352694, 4354413,
                4354927, 4357078, 4357128, 4357179, 4357378, 4357429, 4358772, 4358905, 4360680,
                4360898, 4361264, 4361315, 4362230, 4363288, 4364121, 4364639, 4366510, 4367459,
                4368494, 4368544, 4368771, 4368908, 4369129, 4369958, 4370839, 4371052, 4371910,
                4372152, 4372273, 4373223, 4373273, 4374295, 4376098, 4376199, 4377008, 4377058,
                4379163, 4379264, 4379970, 4380082, 4380670, 4385245, 4385295, 4385390, 4385567,
                4385618, 4385740, 4385790, 4385840, 4386760, 4386811, 4386932, 4391688, 4391830,
                4393855, 4394338, 4396497, 4397370, 4397420, 4399549, 4399599, 4400878, 4400929,
                4401157, 4401916, 4402067, 4402876, 4402926, 4402977, 4404019, 4405037, 4407391,
                4407441, 4408268, 4408318, 4408519, 4413880, 4413930, 4413980, 4414350, 4415511,
                4415562, 4416499, 4418974, 4419074, 4421954, 4422492, 4424261, 4424748, 4426010,
                4426743, 4427323, 4427374, 4433219, 4433269, 4436521, 4436571, 4437622, 4437673,
                4438765, 4438866, 4439469, 4439520, 4440808, 4441174, 4443617, 4443668, 4444019,
                4444547, 4444598, 4448934, 4449456, 4449507, 4450992, 4451044, 4451263, 4451810,
                4452270, 4455574, 4455675, 4460190, 4460240, 4461347, 4461398, 4465999, 4466631,
                4466681, 4468423, 4468798, 4468964, 4469065, 4469178, 4469761, 4470660, 4471820,
                4471870, 4472001, 4472051, 4472226, 4472408, 4472459, 4472560, 4472689, 4473265,
                4484514, 4484568, 4485244, 4485496, 4485602, 4489357, 4489407, 4489637, 4489688,
                4490380, 4500017, 4500154, 4500204, 4502863, 4503434, 4505082, 4507420, 4507470,
                4507521, 4508837, 4509574, 4511761, 4516190, 4517259, 4517699, 4517803, 4517904,
                4518017, 4518118, 4521784, 4521834, 4522905, 4523008, 4524091, 4524224, 4525978,
                4527168, 4527715, 4530039, 4530175, 4530226, 4532755, 4533839, 4533889, 4533939,
                4533990, 4534040, 4534090, 4534205, 4534913, 4536198, 4536249, 4536300, 4536350,
                4537823, 4537874, 4545937, 4545987, 4547662, 4549908, 4551221, 4551272, 4552759,
                4553698, 4553748, 4554336, 4554920, 4555763, 4556426, 4557076, 4557127, 4558438,
                4559534, 4562801, 4562852, 4562929, 4563182, 4563232, 4563977, 4569280, 4569330,
                4570437, 4573303, 4573354, 4578243, 4578343, 4578457, 4579069, 4579120, 4579297,
                4584930, 4584980, 4585168, 4585297, 4586231, 4586281, 4589527, 4591125, 4591266,
                4591438, 4592890, 4592991, 4601476, 4601599, 4602100, 4602356, 4602407, 4602627,
                4603308, 4604418, 4605932, 4606066, 4606117, 4607995, 4608347, 4609977, 4610027,
                4611312, 4612340, 4612502, 4612603, 4612768, 4612869, 4612998, 4613142, 4622675,
                4622725, 4623188, 4623239, 4623525, 4624863, 4624974, 4625940, 4627954, 4631573,
                4632610, 4633777, 4641208, 4642787, 4645746, 4646996, 4647046, 4647292, 4647343,
                4650626, 4650677, 4651323, 4651374, 4657909, 4658160, 4658261, 4658610, 4658661,
                4659202, 4660041, 4660357, 4660779, 4660880, 4662591, 4664208, 4665061, 4665329,
                4669059, 4675413, 4675463, 4677587, 4678618, 4679118, 4679690, 4679740, 4680837,
                4681165, 4681216, 4682893, 4684954, 4685004, 4687828, 4689817, 4691488, 4691639,
                4691690, 4691902, 4693065, 4694122, 4694738, 4697927, 4699746, 4699797, 4700046,
                4701997, 4702048, 4703259, 4703309, 4703360, 4703461, 4703591, 4704337, 4704438,
                4704510, 4704561, 4704982, 4707137, 4707285, 4707336, 4708128, 4708752, 4708802,
                4709127, 4709386, 4709437, 4710234, 4710285, 4710747, 4710797, 4711370, 4712327,
                4714251, 4715620, 4716922, 4717054, 4718072, 4718122, 4718547, 4718598, 4721608,
                4721713, 4721764, 4721814, 4721936, 4722221, 4722322, 4722721, 4722772, 4723426,
                4724728, 4727064, 4727114, 4728105, 4731021, 4731454, 4731775, 4732631, 4732681,
                4734303, 4736087, 4738530, 4738581, 4738632, 4739094, 4740011, 4740327, 4746404,
                4746455, 4746505, 4747431, 4747481, 4747616, 4750425, 4750743, 4751022, 4751555,
                4752079, 4753027, 4754186, 4754337, 4754503, 4754553, 4755291, 4755426, 4755476,
                4755526, 4755934, 4756428, 4756621, 4756672, 4756752, 4756802, 4756929, 4757363,
                4758457, 4758508, 4758632, 4759128, 4760167, 4760384, 4760435, 4760919, 4761651,
                4761917, 4761967, 4765389, 4765439, 4765891, 4765992, 4766042, 4768166, 4768217,
                4769970, 4770021, 4772305, 4772406, 4773291, 4774075, 4774890, 4779709, 4779759,
                4783067, 4785071, 4785123, 4788848, 4788898, 4788949, 4789007, 4789057, 4789343,
                4789444, 4793019, 4797558, 4797609, 4797659, 4798844, 4800735, 4801880, 4804345,
                4804395, 4805644, 4808464, 4810238, 4810339, 4810684, 4812865, 4814496, 4814547,
                4815863, 4816073, 4816123, 4817802, 4818380, 4818431, 4821660, 4821847, 4822642,
                4822693, 4823639, 4824269, 4826015, 4826116, 4830114, 4830165, 4832938, 4833224,
                4835532, 4835639, 4837177, 4837228, 4841014, 4841131, 4841926, 4841976, 4842987,
                4845768, 4849403, 4849522, 4849886, 4850924, 4852242, 4852475, 4852955, 4853005,
                4853114, 4856752, 4859893, 4860352, 4860693, 4862636, 4862787, 4862839, 4863575,
                4864967, 4865151, 4865201, 4867672, 4868632, 4869873, 4870218, 4870559, 4870610,
                4871093, 4872081, 4872131, 4872510, 4872561, 4872983, 4873038, 4873463, 4873687,
                4873959, 4874010, 4874201, 4874255, 4874307, 4874358, 4874459, 4874714, 4875071,
                4875839, 4876408, 4876459, 4877244, 4878910, 4879017, 4880386, 4882833, 4882883,
                4883137, 4883238, 4883493, 4883543, 4885829, 4885879, 4901078, 4901129, 4901274,
                4902774, 4903064, 4903468, 4903712, 4906418, 4906469, 4906923, 4907023, 4907165,
                4907875, 4908483, 4908533, 4909254, 4911714, 4914911, 4915493, 4915543, 4916667,
                4917567, 4925108, 4926819, 4930442, 4935406, 4937347, 4940351, 4943297, 4943348,
                4947563, 4947613, 4947664, 4950296, 4950909, 4951059, 4951109, 4953261, 4953611,
                4953662, 4953795, 4954677, 4954728, 4957360, 4962741, 4963941, 4964169, 4964319,
                4970178, 4976614, 4976921, 4978775, 4978876, 4980822, 4980872, 4980991, 4981912,
                4981962, 4982655, 4982847, 4984836, 4988649, 4988699, 4988749, 4990367, 4991978,
                4994573, 4994674, 4994724, 4997035, 4997085, 4997349, 4999560, 4999687, 5000613,
                5006670, 5007148, 5007418, 5007468, 5012040, 5012878, 5012928, 5012978, 5015733,
                5015783, 5016685, 5016736, 5019443, 5019494, 5019544, 5020327, 5020377, 5033064,
                5033115, 5033860, 5034059, 5035999, 5036160, 5037488, 5037539, 5037589, 5038757,
                5039887, 5045697, 5046211, 5046405, 5047837, 5047887, 5048157, 5048284, 5048385,
                5049524, 5050205, 5050596, 5050739, 5050847, 5050949, 5051081, 5053234, 5054091,
                5054524, 5054575, 5055164, 5055215, 5055440, 5057877, 5057927, 5058150, 5059429,
                5060142, 5060255, 5060308, 5060493, 5061420, 5061471, 5067698, 5067748, 5068779,
                5068914, 5071521, 5072160, 5076106, 5076157, 5076207, 5077992, 5078133, 5078184,
                5078942, 5078992, 5080102, 5080152, 5080701, 5080752, 5080802, 5081414, 5081465,
                5081515, 5082758, 5082808, 5083583, 5083782, 5083833, 5083947, 5084423, 5084524,
                5085555, 5085640, 5085928, 5086033, 5086250, 5086351, 5086491, 5086728, 5090656,
                5090706, 5091281, 5091332, 5092168, 5093914, 5093964, 5094165, 5101755, 5102323,
                5102375, 5102511, 5103937, 5105200, 5105550, 5107435, 5107487, 5110922, 5111344,
                5111395, 5112918, 5114252, 5114916, 5116421, 5116472, 5117014, 5124383, 5124434,
                5127086, 5133285, 5133336, 5134385, 5137536, 5137586, 5140049, 5140220, 5140271,
                5141810, 5141860, 5141911, 5142572, 5142622, 5142694, 5143921, 5146414, 5150621,
                5150964, 5151160, 5151211, 5152070, 5152510, 5152922, 5154488, 5155157, 5155514,
                5157372, 5157422, 5159668, 5159967, 5161136, 5161187, 5164076, 5164719, 5164769,
                5166343, 5166393, 5167496, 5167685, 5168145, 5168195, 5173144, 5174367, 5178232,
                5188224, 5188274, 5188325, 5188507, 5190227, 5190278, 5190538, 5191087, 5191548,
                5193113, 5193163, 5194069, 5194186, 5196392, 5196443, 5197072, 5197213, 5197264,
                5197480, 5197553, 5199207, 5202584, 5202685, 5202937, 5203406, 5205036, 5205278,
                5205599, 5205649, 5205810, 5207301, 5207789, 5210517, 5210567, 5211824, 5214447,
                5215003, 5215103, 5215455, 5215560, 5219380, 5219430, 5219988, 5220898, 5220949,
                5220999, 5222068, 5222118, 5224646, 5224826, 5224976, 5225511, 5226275, 5226409,
                5226945, 5226995, 5228155, 5229362, 5230571, 5230622, 5231471, 5231571, 5231967,
                5232018, 5233055, 5233755, 5234942, 5235402, 5236032, 5236282, 5236466, 5237670,
                5237721, 5239846, 5240565, 5241740, 5241791, 5244357, 5244407, 5244458, 5244558,
                5246786, 5246836, 5248125, 5248175, 5249951, 5251188, 5251572, 5252090, 5252190,
                5253131, 5253376, 5253426, 5253677, 5254399, 5255582, 5255739, 5255789, 5255920,
                5256559, 5256610, 5256896, 5257869, 5257919, 5258134, 5258346, 5258397, 5258447,
                5258497, 5258548, 5259688, 5259739, 5260899, 5261000, 5263670, 5263794, 5263844,
                5264672, 5264784, 5265815, 5269612, 5271636, 5278461, 5278511, 5278782, 5279393,
                5280723, 5280774, 5281549, 5282051, 5282152, 5286798, 5286867, 5286918, 5287225,
                5288343, 5294951, 5295194, 5300599, 5302343, 5302444, 5302558, 5302867, 5302917,
                5303616, 5303875, 5304870, 5304978, 5305647, 5306728, 5306867, 5308253, 5308304,
                5308505, 5308556, 5308606, 5309045, 5309145, 5309209, 5309546, 5309680, 5309731,
                5310552, 5310605, 5310709, 5310830, 5311572, 5311737, 5311819, 5311871, 5311986,
                5312162, 5313500, 5313550, 5313661, 5313712, 5314070, 5314458, 5321954, 5323928,
                5324029, 5326591, 5327972, 5328432, 5328483, 5329365, 5331003, 5331053, 5331296,
                5331657, 5331982, 5332534, 5337629, 5339947, 5339997, 5340995, 5342362, 5343331,
                5343381, 5343498, 5343574, 5343730, 5343781, 5343873, 5344002, 5344322, 5344411,
                5344787, 5344837, 5345100, 5346304, 5346354, 5348778, 5348829, 5351658, 5351709,
                5351861, 5352202, 5353388, 5353441, 5353492, 5353593, 5354555, 5355428, 5356637,
                5357802, 5357853, 5359414, 5360249, 5360299, 5360979, 5361080, 5364377, 5364478,
                5366287, 5366337, 5368128, 5369587, 5370244, 5370870, 5370920, 5370971, 5371466,
                5371516, 5372476, 5372527, 5372918, 5373115, 5373251, 5373302, 5373436, 5375030,
                5375137, 5376772, 5378104, 5378810, 5378910, 5379915, 5379965, 5384084, 5384987,
                5385131, 5385314, 5393562, 5396678, 5398536, 5399859, 5401470, 5401520, 5401823,
                5402435, 5404513, 5405401, 5405451, 5405502, 5405611, 5408745, 5409454, 5409504,
                5410706, 5411333, 5413480, 5413530, 5413616, 5413908, 5414923, 5414974, 5415696,
                5415746, 5415796, 5415847, 5415988, 5416427, 5418861, 5419356, 5419407, 5420628,
                5421368, 5422449, 5423701, 5424051, 5424528, 5424633, 5424825, 5424948, 5424999,
                5426362, 5426610, 5426671, 5426781, 5426832, 5431850, 5431900, 5432052, 5432206,
                5432256, 5432471, 5432571, 5432864, 5436373, 5437074, 5437365, 5439914, 5439964,
                5444438, 5449950, 5450322, 5453459, 5462053, 5462674, 5462850, 5469683, 5474102,
                5475157, 5475208, 5476569, 5477910, 5478113, 5478163, 5478225, 5478276, 5478606,
                5483777, 5483827, 5483878, 5484022, 5488800, 5488900, 5493685, 5494524, 5494574,
                5494625, 5494752, 5494917, 5497893, 5497943, 5498314, 5500895, 5501010, 5501353,
                5501617, 5501667, 5502196, 5502246, 5502814, 5503513, 5504365, 5505456, 5505507,
                5506711, 5506934, 5507447, 5508938, 5509065, 5510480, 5512345, 5515583, 5515633,
                5515944, 5516055, 5516106, 5516161, 5516211, 5516450, 5516956, 5517006, 5517925,
                5518325, 5518376, 5519130, 5519702, 5520273, 5520323, 5520373, 5520518, 5520912,
                5520962, 5521170, 5521420, 5521470, 5521526, 5521789, 5525596, 5525647, 5531910,
                5533345, 5533395, 5534403, 5534453, 5534585, 5535128, 5538036, 5539969, 5540141,
                5540247, 5540298, 5540348, 5540456, 5542557, 5542886, 5543114, 5543915, 5545029,
                5553982, 5554032, 5554162, 5554221, 5554322, 5554657, 5558972, 5560356, 5560407,
                5561559, 5565464, 5569852, 5569902, 5572009, 5574630, 5574680, 5574731, 5576205,
                5576306, 5576464, 5576552, 5576603, 5576782, 5577712, 5577762, 5577950, 5578728,
                5580308, 5580359, 5580409, 5580459, 5581285, 5582034, 5582397, 5582447, 5582601,
                5582817, 5582940, 5583292, 5583343, 5583879, 5584477, 5584527, 5585158, 5585938,
                5586626, 5587028, 5587789, 5587839, 5587901, 5590197, 5591245, 5591622, 5591694,
                5591795, 5591916, 5592151, 5596465, 5596625, 5596675, 5597514, 5597614, 5598513,
                5598563, 5602683, 5602855, 5603945, 5604196, 5605460, 5605531, 5608464, 5608515,
                5609446, 5611855, 5617407, 5617859, 5617909, 5619259, 5619309, 5620332, 5620614,
                5621133, 5624005, 5624062, 5624972, 5626874, 5626924, 5627392, 5627443, 5630622,
                5630723, 5631116, 5631658, 5633128, 5635654, 5636871, 5636983, 5637718, 5637981,
                5638356, 5638569, 5639671, 5640905, 5641006, 5642693, 5642834, 5643349, 5643656,
                5643931, 5643982, 5644562, 5645438, 5645488, 5645538, 5646621, 5646673, 5648094,
                5649969, 5650020, 5652505, 5655588, 5655639, 5655689, 5655941, 5655991, 5657869,
                5657919, 5659218, 5659553, 5660169, 5661230, 5661331, 5661732, 5662037, 5664006,
                5664322, 5664788, 5665275, 5665325, 5665817, 5665867, 5666107, 5667138, 5667188,
                5668056, 5668767, 5669185, 5669235, 5670669, 5671460, 5675036, 5675086, 5675642,
                5676956, 5680075, 5680126, 5680177, 5680444, 5684303, 5684811, 5685799, 5685899,
                5686148, 5686254, 5686305, 5686355, 5686818, 5687806, 5688309, 5688359, 5690088,
                5692945, 5693536, 5695199, 5695326, 5695844, 5696671, 5698561, 5698614, 5698931,
                5699573, 5699996, 5700463, 5700514, 5700564, 5701621, 5705997, 5706357, 5706862,
                5707004, 5707950, 5708002, 5708314, 5708638, 5708688, 5709340, 5709865, 5709916,
                5710355, 5712953, 5713996, 5714254, 5714305, 5725024, 5726439, 5726490, 5731472,
                5731522, 5731881, 5731931, 5731982, 5732234, 5732916, 5737490, 5737541, 5738091,
                5739919, 5739970, 5740110, 5740742, 5741014, 5741065, 5741116, 5741403, 5741454,
                5741626, 5741676, 5741853, 5741904, 5742442, 5742543, 5743022, 5743739, 5743869,
                5743920, 5745007, 5745108, 5745402, 5751615, 5752050, 5752101, 5752619, 5752993,
                5754031, 5754081, 5754193, 5754372, 5754604, 5754654, 5754758, 5754808, 5754975,
                5755364, 5755414, 5756759, 5756810, 5756927, 5756977, 5757464, 5760513, 5760563,
                5760853, 5761003, 5761953, 5762552, 5762772, 5762862, 5763021, 5763124, 5766835,
                5766885, 5767418, 5767469, 5767790, 5767840, 5769851, 5770879, 5770980, 5771886,
                5772194, 5774808, 5775112, 5775163, 5776668, 5780000, 5781128, 5788690, 5788740,
                5792760, 5793014, 5793064, 5793133, 5793643, 5794582, 5794632, 5794901, 5795122,
                5795173, 5795617, 5801179, 5803889, 5804663, 5805915, 5806326, 5806376, 5806514,
                5806564, 5808037, 5808160, 5808579, 5808871, 5809919, 5810806, 5810857, 5812291,
                5814725, 5814775, 5816229, 5817166, 5817216, 5817498, 5818242, 5818398, 5818588,
                5818639, 5818689, 5820063, 5822342, 5825559, 5825610, 5826950, 5828471, 5829349,
                5829400, 5832422, 5832473, 5832681, 5832813, 5833243, 5833376, 5833427, 5834960,
                5836236, 5839611, 5840668, 5840788, 5840958, 5841073, 5841123, 5841946, 5842923,
                5844993, 5845044, 5847408, 5847458, 5847709, 5847759, 5848042, 5848952, 5849177,
                5849304, 5849405, 5849628, 5849678, 5849729, 5849779, 5849937, 5849988, 5853542,
                5853593, 5854064, 5854165, 5854306, 5856261, 5856361, 5856462, 5856790, 5856928,
                5860574, 5864849, 5864900, 5865352, 5865469, 5865572, 5865720, 5865770, 5866389,
                5866439, 5867072, 5867443, 5867493, 5867544, 5868202, 5868950, 5869051, 5870543,
                5870649, 5871829, 5872028, 5873216, 5873267, 5873390, 5873441, 5873839, 5873889,
                5873950, 5874001, 5874179, 5874612, 5875038, 5875088, 5876663, 5876763, 5877230,
                5877280, 5878445, 5878699, 5879690, 5879741, 5879791, 5879896, 5881710, 5881760,
                5882022, 5882617, 5884262, 5884585, 5884641, 5884742, 5885874, 5885924, 5887747,
                5888558, 5894779, 5894829, 5894963, 5901887, 5901937, 5902500, 5903896, 5903946,
                5904028, 5904377, 5904427, 5904511, 5904612, 5904890, 5905784, 5905834, 5905972,
                5906081, 5906182, 5906315, 5906454, 5906556, 5906673, 5908043, 5908094, 5908451,
                5908552, 5910125, 5910320, 5910420, 5910471, 5915578, 5916254, 5916821, 5917102,
                5917152, 5917202, 5917426, 5917476, 5917527, 5917677, 5918828, 5919415, 5920513,
                5920563, 5920970, 5921103, 5922832, 5923064, 5923114, 5923225, 5923340, 5924031,
                5928314, 5928365, 5929423, 5929525, 5931790, 5931912, 5932341, 5933217, 5933679,
                5935368, 5935419, 5935952, 5944154, 5948692, 5948742, 5948989, 5950065, 5952041,
                5953294, 5953683, 5953784, 5954092, 5954394, 5954893, 5957727, 5957777, 5957833,
                5958094, 5958645, 5958746, 5960133, 5960430, 5960862, 5961339, 5961406, 5961904,
                5962920, 5964400, 5964515, 5964566, 5966152, 5966209, 5966312, 5966413, 5966557,
                5968198, 5968249, 5968879, 5968982, 5969926, 5970998, 5972519, 5973085, 5973136,
                5974982, 5975106, 5975160, 5975303, 5976515, 5979512, 5979613, 5980870, 5981567,
                5981999, 5982248, 5982298, 5983243, 5985502, 5985778, 5985933, 5988553, 5988752,
                5989079, 5991681, 5992088, 5992582, 5992633, 5993838, 5994708, 5994758, 5996537,
                5996587, 5996665, 5996850, 5996901, 5997445, 6000410, 6000514, 6001838, 6001939,
                6002072, 6002173, 6006198, 6006249, 6007112, 6007163, 6008138, 6010007, 6010302,
                6010402, 6010839, 6011658, 6012756, 6012807, 6013276, 6016512, 6019074, 6019685,
                6019786, 6020134, 6020184, 6020908, 6021573, 6021916, 6022977, 6023967, 6024018,
                6024912, 6025785, 6026792, 6026843, 6028534, 6030572, 6031533, 6031583, 6031634,
                6031684, 6032092, 6032142, 6032866, 6032916, 6036045, 6036114, 6036215, 6037876,
                6052021, 6053778, 6055472, 6055873, 6055923, 6058995, 6059266, 6065314, 6069467,
                6071306, 6071357, 6073469, 6073519, 6077478, 6079776, 6079826, 6080587, 6080824,
                6082463, 6083746, 6083850, 6084085, 6085596, 6085646, 6085941, 6087531, 6087632,
                6087906, 6088074, 6088124, 6088174, 6088943, 6090677, 6093615, 6093665, 6093911,
                6094606, 6094657, 6094732, 6094924, 6095917, 6095967, 6097740, 6098205, 6098917,
                6102079, 6102129, 6102356, 6102499, 6104095, 6104382, 6104966, 6105099, 6106214,
                6110994, 6111407, 6111640, 6112947, 6113402, 6116167, 6116217, 6116408, 6116747,
                6116797, 6119417, 6120878, 6120928, 6126027, 6126498, 6135318, 6138891, 6141565,
                6141615, 6143593, 6144151, 6144405, 6146944, 6148231, 6150504, 6150988, 6151039,
                6154127, 6154260, 6154420, 6154470, 6154725, 6154830, 6154961, 6155194, 6157346,
                6162123, 6162224, 6166182, 6167427, 6173459, 6176913, 6179210, 6179260, 6179916,
                6179967, 6184033, 6184086, 6184136, 6184247, 6184560, 6184611, 6187201, 6187252,
                6187804, 6187854, 6188373, 6188424, 6188668, 6189678, 6190608, 6192770, 6193021,
                6193072, 6193423, 6196819, 6197535, 6197966, 6198017, 6198676, 6200011, 6203471,
                6203737, 6203788, 6204867, 6205730, 6208220, 6208958, 6210145, 6210886, 6210987,
                6211207, 6212892, 6220948, 6223626, 6224727, 6224777, 6226527, 6228054, 6228104,
                6229188, 6230194, 6231016, 6233078, 6233129, 6233264, 6233336, 6233594, 6233644,
                6234634, 6241199, 6241249, 6241870, 6241920, 6242307, 6242359, 6252375, 6254844,
                6257788, 6258405, 6261020, 6264365, 6264415, 6264498, 6268101, 6268152, 6268202,
                6268631, 6269908, 6270076, 6270488, 6270755, 6271116, 6271167, 6273391, 6275347,
                6275479, 6277386, 6277436, 6284322, 6286489, 6286539, 6288594, 6289912, 6290014,
                6291205, 6291472, 6294385, 6294605, 6300542, 6301576, 6313586, 6314624, 6314725,
                6320240, 6320290, 6322111, 6322162, 6322631, 6323562, 6323612, 6324554, 6325936,
                6325986, 6327609, 6328345, 6329982, 6332887, 6333361, 6340447, 6340576, 6342165,
                6342965, 6344755, 6344806, 6345341, 6348058, 6348108, 6348158, 6348276, 6348327,
                6348567, 6349615, 6350806, 6350856, 6351402, 6351743, 6354084, 6355102, 6355152,
                6357180, 6358081, 6358132, 6358519, 6358993, 6360453, 6360503, 6360613, 6361418,
                6361719, 6362020, 6362598, 6365419, 6366521, 6366919, 6369684, 6375360, 6375876,
                6379987, 6381195, 6383085, 6383625, 6384502, 6384553, 6385266, 6385317, 6385768,
                6385818, 6389647, 6392039, 6392139, 6392190, 6392657, 6395924, 6395975, 6401559,
                6401610, 6401660, 6402252, 6403585, 6403715, 6409084, 6411795, 6411846, 6412376,
                6415205, 6416655, 6420199, 6420249, 6421012, 6421063, 6422039, 6422434, 6422484,
                6423172, 6423522, 6424170, 6424438, 6427185, 6427235, 6428958, 6431330, 6431381,
                6432926, 6432976, 6433687, 6436911, 6436961, 6437035, 6437417, 6438087, 6440981,
                6453761, 6454089, 6454808, 6456719, 6456769, 6461177, 6462293, 6462404, 6462505,
                6463737, 6463787, 6464464, 6464565, 6464666, 6468011, 6468688, 6469244, 6474146,
                6474196, 6476882, 6476932, 6477066, 6478231, 6479085, 6479363, 6479414, 6479873,
                6479976, 6480078, 6480179, 6480314, 6480415, 6486228, 6486278, 6486467, 6492170,
                6492327, 6492523, 6492573, 6502196, 6502246, 6502308, 6503653, 6506309, 6507825,
                6509180, 6509647, 6511792, 6513352, 6513404, 6519467, 6519600, 6525631, 6525732,
                6525858, 6525998, 6526100, 6526958, 6527008, 6527425, 6527729, 6529384, 6529434,
                6532386, 6532828, 6532878, 6533220, 6533270, 6533345, 6533534, 6533905, 6534154,
                6534842, 6535717, 6535768, 6536492, 6538850, 6541604, 6541906, 6542240, 6542356,
                6542457, 6542579, 6542677, 6542801, 6543130, 6543181, 6543894, 6545616, 6545667,
                6546249, 6546350, 6546422, 6546473, 6547287, 6547338, 6549969, 6552038, 6552414,
                6555657, 6556520, 6556570, 6556768, 6556868, 6559344, 6562723, 6564375, 6564785,
                6564836, 6564965, 6565015, 6568969, 6570472, 6580619, 6581249, 6581300, 6581350,
                6582580, 6585948, 6586459, 6586594, 6586694, 6587008, 6587697, 6588217, 6588267,
                6589792, 6590394, 6591551, 6591654, 6591799, 6593582, 6594385, 6594435, 6600504,
                6600555, 6601400, 6603889, 6604754, 6604805, 6605023, 6605124, 6606243, 6606812,
                6607600, 6607970, 6609923, 6609974, 6612483, 6612533, 6612826, 6619915, 6620016,
                6620145, 6620246, 6622474, 6622819, 6622903, 6623653, 6623753, 6623925, 6624932,
                6624982, 6628597, 6629019, 6629069, 6630926, 6631068, 6631118, 6635676, 6635726,
                6636209, 6636260, 6639643, 6639752, 6645086, 6648062, 6649470, 6649520, 6653310,
                6653736, 6655213, 6655916, 6656027, 6657562, 6657614, 6657665, 6658031, 6660001,
                6660924, 6660974, 6661060, 6661891, 6661941, 6663300, 6664032, 6665884, 6672168,
                6672219, 6673113, 6673163, 6674391, 6674442, 6677973, 6678074, 6679025, 6679076,
                6680166, 6680216, 6682226, 6682421, 6682531, 6682636, 6682736, 6682925, 6683715,
                6685524, 6685574, 6685691, 6685904, 6685954, 6686452, 6687168, 6687492, 6689447,
                6690213, 6690264, 6691112, 6691163, 6696976, 6698741, 6698818, 6698868, 6699212,
                6699271, 6700928, 6700978, 6701142, 6701287, 6703210, 6703260, 6704627, 6709671,
                6709721, 6717496, 6717597, 6718560, 6719615, 6720314, 6720365, 6720433, 6720483,
                6720534, 6720624, 6720725, 6721099, 6728692, 6728742, 6730751, 6730801, 6731965,
                6732016, 6732122, 6735066, 6735410, 6735511, 6735938, 6739418, 6739568, 6740921,
                6742908, 6742958, 6744776, 6744827, 6745444, 6747615, 6747666, 6749775, 6749876,
                6751126, 6751411, 6754959, 6755304, 6755422, 6755472, 6755574, 6756688, 6756739,
                6757425, 6758556, 6758607, 6759135, 6759571, 6759621, 6762742, 6762842, 6762959,
                6763894, 6763944, 6764213, 6764334, 6764525, 6764657, 6764796, 6765101, 6765152,
                6765210, 6765720, 6765863, 6766011, 6766118, 6766260, 6766371, 6767569, 6767623,
                6769893, 6769944, 6770063, 6770298, 6770348, 6770399, 6775068, 6775208, 6776904,
                6776954, 6777005, 6777493, 6778069, 6779968, 6780019, 6781488, 6782108, 6787326,
                6787376, 6790455, 6790505, 6792828, 6795744, 6795876, 6796664, 6797488, 6797668,
                6797718, 6798110, 6798160, 6798301, 6799013, 6799146, 6799401, 6799502, 6799552,
                6799974, 6800619, 6806205, 6806259, 6806367, 6806681, 6806731, 6806904, 6807180,
                6807231, 6807336, 6809454, 6809581, 6809707, 6811091, 6811285, 6812713, 6815706,
                6817202, 6817252, 6818284, 6818386, 6818835, 6818970, 6819377, 6822064, 6822114,
                6822286, 6822337, 6822590, 6822776, 6823871, 6825687, 6825737, 6828316, 6830024,
                6830743, 6830793, 6831545, 6832983, 6833035, 6833085, 6833138, 6833372, 6833545,
                6833595, 6833756, 6833807, 6833931, 6834081, 6834641, 6835156, 6835900, 6836048,
                6836099, 6838584, 6839769, 6839820, 6844109, 6844498, 6844688, 6848722, 6848772,
                6848823, 6848897, 6849156, 6849206, 6849257, 6849496, 6849659, 6849760, 6849810,
                6849943, 6850108, 6850159, 6850489, 6850540, 6850662, 6850762, 6852404, 6853790,
                6864360, 6864573, 6864624, 6864682, 6864732, 6864892, 6865556, 6867174, 6871269,
                6871319, 6871616, 6871666, 6871717, 6871914, 6872607, 6873568, 6876140, 6876191,
                6876887, 6877755, 6878341, 6879241, 6880247, 6880297, 6880609, 6880663, 6880722,
                6880772, 6881003, 6881053, 6882340, 6884287, 6884661, 6884712, 6885228, 6887777,
                6889152, 6889203, 6891654, 6891705, 6894928, 6894979, 6895608, 6895659, 6895709,
                6895952, 6900844, 6900895, 6901093, 6901143, 6905560, 6905617, 6912931, 6912982,
                6913480, 6925345, 6925932, 6925982, 6926084, 6926315, 6926910, 6926960, 6927574,
                6930043, 6930093, 6932749, 6934266, 6934316, 6946047, 6946098, 6946807, 6947008,
                6948257, 6948723, 6949990, 6954135, 6954186, 6954323, 6954528, 6955052, 6955201,
                6957351, 6957402, 6958666, 6959184, 6959926, 6960942, 6961599, 6972852, 6973133,
                6973912, 6974980, 6976879, 6976929, 6976980, 6977030, 6978858, 6978908, 6979878,
                6979928, 6982092, 6982192, 6982243, 6982293, 6982343, 6982393, 6982516, 6982566,
                6983379, 6984411, 6988162, 6988264, 6989179, 6989687, 6989738, 6990964, 6993982,
                6994032, 6996523, 6996573, 6996832, 6996883, 6996934, 6997090, 6997140, 6997658,
                7001487, 7002487, 7004324, 7004775, 7005229, 7006456, 7006506, 7008162, 7011854,
                7013425, 7013541, 7013592, 7014190, 7014241, 7014291, 7015314, 7015364, 7015822,
                7018589, 7018639, 7019971, 7020022, 7020289, 7020364, 7020958, 7021690, 7021740,
                7025105, 7026366, 7026416, 7030179, 7030229, 7031369, 7031419, 7031544, 7031594,
                7031645, 7039150, 7039202, 7039252, 7040504, 7054259, 7054309, 7054773, 7054824,
                7059837, 7060344, 7061174, 7061718, 7062012, 7062063, 7062337, 7068456, 7068506,
                7069065, 7069116, 7069875, 7069925, 7070255, 7071865, 7073625, 7073676, 7074516,
                7075117, 7075167, 7075751, 7076230, 7076280, 7078070, 7082251, 7087999, 7088979,
                7090485, 7093885, 7095915, 7097870, 7099054, 7099251, 7099301, 7106611, 7106982,
                7108736, 7108786, 7112886, 7116116, 7116167, 7117527, 7122580, 7125484, 7126072,
                7127519, 7127570, 7127685, 7132837, 7133456, 7135210, 7135261, 7139335, 7139385,
                7140152, 7140288, 7140859, 7144371, 7144422, 7145882, 7145932, 7146180, 7150061,
                7150111, 7150162, 7152070, 7152121, 7152172, 7156177, 7158950, 7159000, 7159879,
                7160865, 7165193, 7165720, 7178120, 7180649, 7180699, 7183975, 7184026, 7184316,
                7184366, 7184654, 7184837, 7184888, 7186269, 7187235, 7191008, 7191090, 7194966,
                7195495, 7195545, 7196838, 7197441, 7197700, 7197751, 7198445, 7198496, 7200095,
                7200278, 7203407, 7203458, 7206204, 7207170, 7207898, 7209308, 7209726, 7211069,
                7211119, 7211874, 7214289, 7216625, 7217641, 7220032, 7221115, 7221744, 7221794,
                7221910, 7223263, 7225883, 7225933, 7226852, 7227004, 7229085, 7229135, 7229332,
                7230520, 7231009, 7231518, 7232329, 7232452, 7233749, 7233928, 7242038, 7242089,
                7243561, 7246896, 7247592, 7252327, 7252434, 7252496, 7254988, 7256288, 7258060,
                7260119, 7260169, 7261742, 7262335, 7262386, 7263384, 7264536, 7264911, 7264961,
                7269171, 7272275, 7274849, 7275532, 7276071, 7276171, 7277062, 7277257, 7277837,
                7279828, 7280634, 7283815, 7287037, 7287377, 7290814, 7291754, 7292649, 7294064,
                7294468, 7294518, 7294709, 7295453, 7295503, 7295889, 7296823, 7299375, 7313987,
                7317091, 7319367, 7319417, 7319533, 7319924, 7320223, 7323136, 7323186, 7323245,
                7323295, 7323359, 7323409, 7325352, 7325955, 7326006, 7329233, 7330096, 7331688,
                7331738, 7334009, 7334059, 7334168, 7334670, 7336092, 7336330, 7336380, 7341811,
                7342408, 7346687, 7346737, 7351293, 7351344, 7354202, 7354403, 7356910, 7356961,
                7357766, 7357816, 7361544, 7364347, 7364397, 7365169, 7365219, 7369268, 7369318,
                7369940, 7369990, 7370334, 7376781, 7376832, 7377027, 7379245, 7379374, 7385051,
                7387727, 7400278, 7404805, 7410514, 7410565, 7410615, 7415462, 7421224, 7423287,
                7423338, 7423544, 7424532, 7424633, 7424690, 7429856, 7429906, 7432590, 7432640,
                7432703, 7442046, 7442925, 7442975, 7443030, 7443264, 7443985, 7444157, 7444271,
                7444321, 7444372, 7446786, 7449074, 7449241, 7452873, 7455429, 7460934, 7461035,
                7462953, 7463003, 7464620, 7464671, 7469197, 7470906, 7471135, 7472764, 7474899,
                7475005, 7475056, 7476813, 7481274, 7481631, 7481681, 7483904, 7484928, 7490913,
                7491789, 7491840, 7494908, 7498042, 7498092, 7498588, 7499066, 7499215, 7499605,
                7501493, 7501594, 7501645, 7501847, 7502373, 7503228, 7503633, 7504101, 7505568,
                7508878, 7508928, 7508979, 7509244, 7510142, 7514955, 7515006, 7515056, 7516741,
                7518483, 7518534, 7519563, 7519614, 7519665, 7520615, 7523686, 7523950, 7524251,
                7524725, 7524775, 7526159, 7527809, 7530976, 7531356, 7533736, 7533787, 7534810,
                7534861, 7535000, 7538597, 7541357, 7542849, 7543878, 7548137, 7548530, 7549768,
                7549923, 7553811, 7553862, 7563950, 7564050, 7565110, 7567239, 7574532, 7574735,
                7576876, 7577617, 7579079, 7582427, 7583969, 7584019, 7585192, 7586501, 7593762,
                7593812, 7594845, 7595192, 7595303, 7596269, 7596654, 7596953, 7597387, 7599443,
                7600486, 7612463, 7612513, 7613876, 7616970, 7617096, 7622866, 7623531, 7623711,
                7623761, 7625601, 7625828, 7625878, 7628293, 7628898, 7638420, 7638605, 7642731,
                7644289, 7644339, 7645800, 7646375, 7646425, 7646476, 7646719, 7647763, 7654416,
                7654466, 7658415, 7658465, 7659778, 7661233, 7668885, 7671213, 7674284, 7674634,
                7679825, 7679875, 7680845, 7685953, 7686003, 7686180, 7686230, 7686281, 7686331,
                7686517, 7687054, 7687892, 7687942, 7688605, 7688655, 7690207, 7690258, 7697076,
                7697126, 7705807, 7705857, 7705977, 7706348, 7707731, 7708500, 7711498, 7711549,
                7714877, 7718467, 7718595, 7721190, 7721402, 7721452, 7721937, 7731663, 7731713,
                7731764, 7731899, 7736913, 7736963, 7737013, 7739921, 7740206, 7740256, 7740307,
                7742775, 7742826, 7744190, 7752617, 7752668, 7760709, 7761241, 7761291, 7765275,
                7767945, 7767995, 7768916, 7772756, 7776311, 7776412, 7777569, 7777964, 7779927,
                7782493, 7782543, 7782929, 7788928, 7788979, 7792027, 7792370, 7792540, 7793765,
                7793816, 7794432, 7794574, 7801251, 7801301, 7801626, 7802051, 7802102, 7802322,
                7803104, 7803204, 7807291, 7807676, 7812055, 7814417, 7816879, 7816929, 7817044,
                7818126, 7819866, 7821075, 7822391, 7823045, 7823267, 7824564, 7826829, 7830913,
                7832569, 7833954, 7834026, 7834912, 7836095, 7838139, 7841501, 7841710, 7841760,
                7841811, 7841913, 7842372, 7842714, 7842958, 7843009, 7843914, 7844015, 7844148,
                7844198, 7844314, 7844773, 7845068, 7845119, 7845223, 7845275, 7845325, 7845536,
                7845586, 7845687, 7845832, 7846077, 7846128, 7846228, 7846334, 7846459, 7846509,
                7846630, 7846863, 7846999, 7847123, 7847206, 7849082, 7856225, 7856781, 7857221,
                7857271, 7857597, 7859720, 7863657, 7863905, 7863956, 7864188, 7865009, 7865264,
                7865314, 7874100, 7874151, 7876520, 7877526, 7883157, 7883480, 7883530, 7883911,
                7885878, 7886330, 7888220, 7891175, 7892541, 7894240, 7899189, 7899331, 7899382,
                7900700, 7900750, 7900856, 7900913, 7901084, 7901135, 7903481, 7903531, 7903582,
                7904440, 7921195, 7922984, 7923060, 7928326, 7928377, 7929076, 7930916, 7931049,
                7931205, 7931306, 7931416, 7931557, 7931658, 7931790, 7931915, 7932061, 7932162,
                7933204, 7936446, 7936496, 7937785, 7938282, 7938388, 7938494, 7938675, 7941290,
                7944410, 7944630, 7944746, 7944847, 7946357, 7946407, 7946873, 7946993, 7950596,
                7950647, 7954132, 7956137, 7956187, 7956238, 7956736, 7958862, 7959322, 7959469,
                7959520, 7959949, 7960277, 7960977, 7961028, 7961156, 7961999, 7962100, 7962242,
                7962384, 7962943, 7963077, 7963127, 7963328, 7965094, 7965145, 7965372, 7965702,
                7966338, 7974082, 7977147, 7978129, 7978665, 7979515, 7982302, 7985910, 7989070,
                7991879, 7992522, 7992973, 7995140, 7995491, 7996071, 7997702, 7997753, 7997876,
                7997978, 7998885, 7998988, 7999135, 7999271, 7999396, 7999497, 7999873, 8000102,
                8001167, 8001217, 8002175, 8002300, 8002350, 8003526, 8003576, 8007256, 8008917,
                8009029, 8009079, 8009147, 8010303, 8010353, 8013629, 8014926, 8015176, 8015226,
                8015531, 8015702, 8015803, 8015853, 8020048, 8020098, 8021475, 8021646, 8021769,
                8021900, 8022035, 8022173, 8022885, 8023208, 8023414, 8023515, 8023637, 8023739,
                8023886, 8023937, 8026546, 8026597, 8028440, 8028991, 8029451, 8029502, 8029950,
                8032734, 8034108, 8036889, 8037668, 8039928, 8041925, 8041975, 8042277, 8043078,
                8045629, 8049726, 8050046, 8050097, 8050389, 8050527, 8050643, 8052167, 8054365,
                8057539, 8057590, 8057954, 8060063, 8060114, 8060552, 8060602, 8060776, 8060886,
                8062235, 8064143, 8064193, 8064243, 8064293, 8064344, 8064629, 8064752, 8064853,
                8065701, 8066313, 8066364, 8066628, 8067552, 8068078, 8068179, 8071588, 8072293,
                8072700, 8073996, 8075448, 8075498, 8075629, 8075730, 8076119, 8079321, 8079539,
                8079640, 8079747, 8082015, 8082066, 8082232, 8082282, 8082333, 8082689, 8083105,
                8083156, 8084141, 8084340, 8084510, 8085124, 8085325, 8085459, 8085630, 8085762,
                8085870, 8086013, 8086063, 8086114, 8086234, 8086730, 8087522, 8088047, 8088148,
                8088271, 8090509, 8090559, 8091150, 8091251, 8091526, 8092084, 8092323, 8092374,
                8092424, 8093074, 8093368, 8093578, 8093908, 8094413, 8094867, 8094968, 8096909,
                8097230, 8097281, 8097970, 8098203, 8098612, 8099982, 8100229, 8100430, 8100540,
                8100649, 8100773, 8100874, 8100975, 8101190, 8101240, 8101405, 8101505, 8101555,
                8101606, 8101876, 8101977, 8102083, 8102234, 8102414, 8102465, 8102917, 8103420,
                8103512, 8103714, 8103842, 8104016, 8104132, 8104233, 8104349, 8104560, 8106352,
                8106660, 8107010, 8107061, 8107500, 8107813, 8107926, 8108035, 8108136, 8108273,
                8108431, 8108547, 8108720, 8108829, 8110184, 8110234, 8110554, 8110654, 8110705,
                8110833, 8111048, 8111253, 8111354, 8111455, 8111583, 8112557, 8113002, 8113273,
                8113323, 8115287, 8115650, 8115873, 8123006, 8123057, 8123289, 8123339, 8123683,
                8123794, 8123911, 8124012, 8124601, 8125289, 8125694, 8126347, 8126398, 8126964,
                8127891, 8131297, 8132044, 8132204, 8133834, 8136107, 8136618, 8136668, 8136798,
                8137749, 8139815, 8140514, 8140565, 8140615, 8142210, 8142261, 8142650, 8143517,
                8143991, 8144108, 8144209, 8144895, 8145334, 8145384, 8145575, 8146029, 8146080,
                8146175, 8148944, 8149667, 8150219, 8150320, 8150547, 8150598, 8151286, 8151763,
                8151813, 8153311, 8153362, 8153928, 8157340, 8157391, 8157582, 8157683, 8157851,
                8158027, 8158364, 8158464, 8158515, 8158838, 8159231, 8160570, 8161268, 8161318,
                8164093, 8165833, 8166218, 8166963, 8167066, 8167216, 8167331, 8167513, 8167625,
                8167767, 8169157, 8170382, 8170432, 8170483, 8171414, 8171537, 8171700, 8171840,
                8172004, 8172229, 8172347, 8177131, 8177841, 8177892, 8178375, 8178425, 8178476,
                8179384, 8179526, 8179684, 8179785, 8179931, 8180046, 8180097, 8180216, 8180317,
                8183914, 8183965, 8187485, 8188062, 8188557, 8190248, 8190299, 8190553, 8190654,
                8190778, 8197260, 8197361, 8200187, 8204004, 8204054, 8204176, 8204455, 8204670,
                8206405, 8206610, 8206833, 8207722, 8207772, 8208087, 8208190, 8208669, 8208770,
                8208890, 8209031, 8209222, 8209273, 8209323, 8209551, 8210126, 8210227, 8210535,
                8210586, 8212314, 8213937, 8217254, 8218198, 8218248, 8218298, 8218416, 8218540,
                8218670, 8218783, 8218990, 8219040, 8223511, 8223612, 8223734, 8228603, 8229090,
                8229140, 8229601, 8229755, 8229856, 8230057, 8230116, 8233954, 8234278, 8236067,
                8236117, 8238711, 8238761, 8238882, 8239155, 8239826, 8239876, 8241822, 8244221,
                8244331, 8244586, 8244823, 8245365, 8245466, 8250939, 8250989, 8255410, 8255698,
                8257912, 8258445, 8258495, 8258648, 8258798, 8259209, 8260185, 8260235, 8260443,
                8261321, 8261969, 8262140, 8262243, 8262511, 8262562, 8263827, 8267409, 8267517,
                8267674, 8267774, 8267939, 8270682, 8270732, 8270926, 8272006, 8272395, 8275063,
                8275113, 8277073, 8277184, 8279312, 8279363, 8279519, 8279916, 8280116, 8280694,
                8281319, 8281369, 8283721, 8285636, 8286680, 8289318, 8289621, 8289671, 8290060,
                8292168, 8292219, 8292628, 8292678, 8292821, 8297681, 8297933, 8297984, 8302551,
                8306632, 8307110, 8307161, 8314051, 8315195, 8315246, 8315398, 8315907, 8316923,
                8317821, 8322355, 8323047, 8323098, 8325745, 8328451, 8328502, 8329597, 8331037,
                8331088, 8341083, 8346669, 8349048, 8349099, 8353190, 8353240, 8353291, 8354308,
                8363362, 8363496, 8364973, 8365023, 8365133, 8366868, 8367373, 8367935, 8367985,
                8369304, 8369354, 8369404, 8372501, 8372591, 8372992, 8374564, 8377691, 8381262,
                8381371, 8381568, 8381670, 8381808, 8382438, 8382488, 8382717, 8382841, 8383421,
                8386589, 8387849, 8388366, 8390173, 8390324, 8391826, 8397785, 8399602, 8399779,
                8399906, 8400095, 8400797, 8400920, 8401157, 8401413, 8406174, 8407061, 8407335,
                8407912, 8407962, 8408141, 8408339, 8408390, 8408575, 8408625, 8410580, 8411440,
                8411491, 8411737, 8415045, 8416184, 8416234, 8416504, 8423861, 8423914, 8425065,
                8431102, 8431203, 8432913, 8433343, 8433599, 8433699, 8433770, 8433871, 8434180,
                8435908, 8436422, 8436877, 8436927, 8437032, 8437088, 8437952, 8438122, 8438814,
                8438950, 8439000, 8439854, 8441313, 8442334, 8443073, 8443123, 8444428, 8444478,
                8447051, 8447923, 8448049, 8448235, 8448391, 8448442, 8448805, 8451805, 8452928,
                8454754, 8456694, 8456744, 8456906, 8456957, 8457066, 8457837, 8460028, 8460079,
                8461140, 8461271, 8461617, 8465884, 8467681, 8467732, 8467991, 8469019, 8469165,
                8469266, 8472037, 8472087, 8474061, 8477032, 8479079, 8479330, 8480056, 8480107,
                8483291, 8483341, 8483833, 8486373, 8487909, 8488850, 8489078, 8489128, 8494431,
                8494481, 8494631, 8496737, 8498886, 8498936, 8499196, 8499350, 8499452, 8499563,
                8499676, 8499792, 8500626, 8503076, 8503177, 8504009, 8504059, 8506548, 8506599,
                8511302, 8512852, 8512902, 8514276, 8514328, 8514805, 8519399, 8521423, 8525551,
                8533659, 8534909, 8536409, 8536933, 8538045, 8540716, 8540767, 8543030, 8543165,
                8562331, 8562382, 8562533, 8562583, 8562998, 8568080, 8568181, 8576284, 8576855,
                8576906, 8577512, 8577655, 8577706, 8579931, 8579982, 8580906, 8581196, 8581246,
                8581737, 8581939, 8582886, 8582936, 8583037, 8583249, 8584008, 8584059, 8584110,
                8584478, 8585753, 8586040, 8586439, 8586532, 8586633, 8586762, 8586913, 8587111,
                8587752, 8592826, 8595934, 8597657, 8600065, 8601737, 8601787, 8601996, 8602131,
                8602181, 8602253, 8602304, 8602354, 8602888, 8606160, 8608445, 8608979, 8609029,
                8609080, 8611028, 8611078, 8614039, 8616423, 8616473, 8616613, 8616934, 8618731,
                8619379, 8619529, 8619580, 8619769, 8625377, 8625900, 8626063, 8626114, 8626320,
                8626525, 8629637, 8629687, 8632150, 8633426, 8633476, 8634386, 8634895, 8634945,
                8635334, 8635742, 8635793, 8637157, 8640079, 8640129, 8641407, 8641457, 8643904,
                8643954, 8644005, 8644189, 8644697, 8646937, 8647206, 8648860, 8649478, 8650786,
                8653812, 8655680, 8655730, 8659082, 8661687, 8661737, 8666928, 8667750, 8667800,
                8669823, 8669949, 8669999, 8670050, 8670648, 8673514, 8673564, 8674019, 8677016,
                8677125, 8677550, 8682195, 8682245, 8685612, 8685664, 8706120, 8706170, 8707504,
                8708813, 8708863, 8714241, 8714292, 8716104, 8716644, 8721274, 8730434, 8730485,
                8730708, 8730813, 8733551, 8734108, 8734217, 8734348, 8734521, 8735024, 8742461,
                8745561, 8745616, 8745666, 8745768, 8745871, 8746166, 8746216, 8746266, 8747289,
                8747339, 8748785, 8748836, 8752636, 8753917, 8758843, 8758894, 8759012, 8759475,
                8759525, 8759922, 8759973, 8760201, 8760252, 8760305, 8760356, 8760467, 8760517,
                8760618, 8760961, 8761011, 8762289, 8762339, 8762390, 8762440, 8765804, 8765855,
                8767296, 8767346, 8770714, 8780338, 8780389, 8780475, 8781260, 8783195, 8783246,
                8783681, 8784494, 8784545, 8787150, 8788154, 8790762, 8790812, 8791398, 8791449,
                8792443, 8797941, 8798515, 8798935, 8801941, 8801992, 8804432, 8805208, 8807974,
                8808941, 8808992, 8811041, 8811091, 8812469, 8812907, 8814318, 8814368, 8814526,
                8814577, 8815705, 8815756, 8815806, 8816318, 8816509, 8816628, 8816815, 8816963,
                8817113, 8817372, 8817874, 8818312, 8819728, 8820629, 8820976, 8821026, 8822303,
                8824040, 8824090, 8824375, 8824426, 8824492, 8824730, 8824780, 8825040, 8827620,
                8827670, 8828197, 8830860, 8831249, 8831641, 8833499, 8834452, 8834503, 8836121,
                8839945, 8839995, 8840753, 8844064, 8844916, 8845320, 8856038, 8863076, 8864809,
                8871043, 8871093, 8871409, 8872170, 8875096, 8875147, 8879364, 8880006, 8880258,
                8882446, 8886387, 8887074, 8888018, 8888396, 8888946, 8894520, 8894671, 8894820,
                8894952, 8895078, 8895203, 8895606, 8896918, 8896968, 8898005, 8898055, 8898658,
                8902426, 8907181, 8907334, 8907538, 8908025, 8908076, 8908285, 8909931, 8909982,
                8912689, 8916415, 8917591, 8919846, 8921178, 8921228, 8921283, 8921407, 8921508,
                8921628, 8921731, 8921838, 8921952, 8922184, 8922237, 8922287, 8923315, 8924797,
                8933552, 8934269, 8934320, 8935235, 8935285, 8937142, 8938023, 8938685, 8939326,
                8940211, 8940262, 8944003, 8944641, 8947631, 8949289, 8949340, 8950342, 8954292,
                8956893, 8957012, 8957063, 8957208, 8957693, 8958249, 8958844, 8958895, 8961472,
                8961925, 8964264, 8964314, 8965238, 8965288, 8967111, 8969459, 8969992, 8970072,
                8971925, 8973040, 8973743, 8974065, 8980222, 8980661, 8980954, 8981211, 8981961,
                8982011, 8985713, 8986274, 8987919, 8988216, 8990085, 8990135, 8991113, 8991163,
                8991924, 8993919, 8993969, 8994929, 8995011, 8995202, 8996277, 8998792, 8999188,
                9000500, 9003807, 9005045, 9005506, 9005557, 9012390, 9012440, 9013983, 9015426,
                9016754, 9017127, 9017178, 9019931, 9021207, 9023147, 9023248, 9029330, 9031059,
                9031109, 9034564, 9034920, 9035072, 9035124, 9035180, 9038227, 9038494, 9038622,
                9046001, 9046327, 9047318, 9048130, 9048753, 9049230, 9049280, 9050081, 9062462,
                9062512, 9065921, 9066409, 9073560, 9073611, 9076294, 9076345, 9076736, 9076837,
                9076976, 9077137, 9077257, 9077448, 9077647, 9077795, 9077974, 9078076, 9078942,
                9078992, 9079372, 9079549, 9081913, 9081963, 9084384, 9084484, 9084867, 9084918,
                9087180, 9087281, 9087405, 9087477, 9087611, 9091884, 9094892, 9095462, 9095512,
                9095562, 9095703, 9095816, 9095866, 9096050, 9096150, 9096201, 9096794, 9097157,
                9098877, 9098927, 9099906, 9100846, 9100896, 9101288, 9101633, 9101769, 9101877,
                9102194, 9102627, 9102839, 9103387, 9103437, 9104000, 9104599, 9105235, 9105286,
                9105336, 9105437, 9105915, 9106403, 9107345, 9111237, 9111288, 9111442, 9111802,
                9113484, 9114411, 9115361, 9115411, 9115462, 9115678, 9115728, 9115829, 9116029,
                9117232, 9117650, 9117833, 9118430, 9118684, 9118735, 9119051, 9119102, 9119163,
                9119213, 9119490, 9119989, 9120039, 9121471, 9123811, 9123861, 9123911, 9124440,
                9125055, 9125646, 9125871, 9126562, 9126712, 9127686, 9129264, 9129466, 9129567,
                9129813, 9129949, 9130931, 9130981, 9134076, 9134126, 9134273, 9134663, 9134953,
                9135864, 9136491, 9137082, 9137522, 9137739, 9138145, 9138246, 9138353, 9138622,
                9138802, 9138852, 9139713, 9140069, 9140740, 9141284, 9143539, 9143640, 9143750,
                9144302, 9144821, 9144872, 9144922, 9144972, 9145479, 9145529, 9146562, 9146749,
                9147347, 9148169, 9148527, 9149094, 9149195, 9149280, 9149330, 9150299, 9150608,
                9154401, 9155545, 9159431, 9159886, 9159947, 9165681, 9165781, 9165836, 9165946,
                9166594, 9166804, 9167288, 9167627, 9167678, 9167728, 9169647, 9170113, 9170214,
                9171073, 9171822, 9171872, 9172939, 9173412, 9176553, 9179314, 9179482, 9180204,
                9180255, 9180344, 9180603, 9180943, 9180994, 9181044, 9181257, 9181521, 9181572,
                9181829, 9182045, 9182095, 9182146, 9183193, 9183294, 9183612, 9184312, 9184416,
                9184713, 9184847, 9185355, 9185746, 9185797, 9186502, 9186608, 9186828, 9187281,
                9187751, 9187802, 9187852, 9188994, 9189095, 9189478, 9189604, 9189710, 9189810,
                9192623, 9192673, 9193575, 9193626, 9193676, 9193776, 9194650, 9195069, 9195120,
                9195170, 9195270, 9195321, 9195459, 9195598, 9195794, 9196314, 9197514, 9197564,
                9202532, 9204592, 9204642, 9205922, 9207276, 9207326, 9207427, 9207795, 9209135,
                9209185, 9209653, 9211736, 9211787, 9212234, 9212525, 9213040, 9213090, 9216699,
                9216749, 9218281, 9218331, 9219207, 9219257, 9221141, 9221193, 9228366, 9231307,
                9235314, 9236312, 9236928, 9237885, 9237986, 9239929, 9239980, 9245506, 9245556,
                9246311, 9246362, 9247794, 9247844, 9247895, 9248363, 9248997, 9249404, 9251412,
                9251513, 9251563, 9251632, 9251733, 9251783, 9251892, 9251943, 9254433, 9254607,
                9254657, 9257990, 9259310, 9259360, 9263371, 9264525, 9264576, 9264949, 9264999,
                9265284, 9265874, 9270310, 9271328, 9272970, 9278363, 9278413, 9278590, 9279082,
                9279133, 9279483, 9280453, 9280591, 9280708, 9281687, 9282060, 9287250, 9287350,
                9287434, 9287555, 9287679, 9287783, 9287933, 9288707, 9288966, 9289182, 9289232,
                9290727, 9295942, 9296043, 9296943, 9298898, 9299016, 9301256, 9301904, 9302478,
                9302528, 9302877, 9302932, 9302998, 9303119, 9304200, 9304251, 9304865, 9305924,
                9306930, 9308579, 9309236, 9309286, 9309344, 9309559, 9309611, 9309662, 9309793,
                9309924, 9310060, 9310195, 9311974, 9312308, 9320446, 9320496, 9321322, 9322441,
                9325532, 9326922, 9327847, 9327897, 9327948, 9328856, 9336984, 9337396, 9339247,
                9339297, 9339362, 9339471, 9339589, 9339641, 9339842, 9341802, 9341902, 9341969,
                9342635, 9342755, 9342807, 9342931, 9343237, 9343337, 9343388, 9344038, 9344584,
                9345226, 9345799, 9346403, 9347012, 9347593, 9348204, 9348822, 9349399, 9349566,
                9349810, 9349861, 9350973, 9351269, 9351319, 9351678, 9351728, 9351844, 9351894,
                9352416, 9353025, 9353693, 9354221, 9354765, 9354866, 9354954, 9355257, 9355477,
                9357945, 9358286, 9359990, 9360041, 9360968, 9361041, 9362059, 9362110, 9367664,
                9368804, 9368855, 9371218, 9373084, 9373134, 9375049, 9378222, 9378322, 9378425,
                9378566, 9379074, 9379682, 9379793, 9380275, 9380800, 9380850, 9380952, 9381335,
                9381478, 9381579, 9382072, 9382333, 9382690, 9382740, 9382848, 9383297, 9383348,
                9383695, 9384133, 9384294, 9385086, 9385384, 9386165, 9386286, 9386458, 9386508,
                9386891, 9387514, 9388494, 9388544, 9388699, 9389313, 9389906, 9390570, 9390620,
                9391128, 9391735, 9392350, 9392910, 9392961, 9393140, 9393524, 9393574, 9394120,
                9394727, 9395319, 9395922, 9396562, 9397127, 9397803, 9398368, 9398961, 9399548,
                9400159, 9400759, 9401324, 9401374, 9401939, 9401989, 9402544, 9403170, 9403825,
                9404405, 9404978, 9405577, 9406160, 9406774, 9407041, 9407969, 9408020, 9408711,
                9409769, 9410324, 9410970, 9411096, 9412123, 9412173, 9412526, 9413478, 9416286,
                9416337, 9416413, 9416914, 9420280, 9421908, 9422947, 9422998, 9424250, 9424301,
                9429472, 9430517, 9433620, 9433670, 9439125, 9439176, 9440211, 9441697, 9444396,
                9448138, 9455746, 9455918, 9455968, 9457774, 9459032, 9466059, 9467908, 9468289,
                9468390, 9468508, 9468558, 9468678, 9469570, 9469770, 9471035, 9471086, 9471157,
                9471207, 9473827, 9474403, 9474453, 9474621, 9474817, 9474870, 9478339, 9478637,
                9483604, 9483655, 9483883, 9483946, 9483996, 9484215, 9484505, 9484625, 9484784,
                9485998, 9486800, 9487403, 9487453, 9487928, 9487978, 9488079, 9489351, 9489401,
                9489451, 9489730, 9489781, 9489946, 9491884, 9492546, 9492596, 9492927, 9492978,
                9493063, 9493264, 9493376, 9507199, 9507249, 9507495, 9507546, 9510333, 9510434,
                9510548, 9510599, 9512180, 9512231, 9521097, 9521148, 9521868, 9521918, 9524312,
                9524362, 9525724, 9525899, 9525950, 9528177, 9529349, 9531028, 9531079, 9531786,
                9531836, 9532233, 9532799, 9532849, 9532906, 9533553, 9533819, 9533920, 9533970,
                9534456, 9534565, 9534830, 9535101, 9535209, 9535310, 9535436, 9535860, 9535911,
                9538065, 9538115, 9541174, 9542241, 9543352, 9543439, 9543540, 9543653, 9543754,
                9543892, 9544026, 9545135, 9545237, 9545353, 9545988, 9546342, 9546478, 9546581,
                9546696, 9546797, 9546944, 9547556, 9547606, 9547902, 9548014, 9548185, 9548304,
                9548410, 9548544, 9548645, 9548789, 9548907, 9549008, 9549132, 9550372, 9550462,
                9550854, 9550960, 9551061, 9551225, 9551326, 9551469, 9551570, 9551709, 9551759,
                9551810, 9551955, 9552680, 9553041, 9556444, 9556494, 9556615, 9559078, 9559129,
                9562616, 9562666, 9563049, 9564424, 9568657, 9569023, 9569243, 9569747, 9570023,
                9570074, 9572094, 9572972, 9573749, 9573880, 9576268, 9576318, 9577885, 9579994,
                9580192, 9580813, 9580863, 9580915, 9581915, 9581993, 9582094, 9582367, 9583793,
                9585202, 9585252, 9586159, 9586209, 9586260, 9587264, 9587314, 9588208, 9588309,
                9588946, 9590066, 9590832, 9590883, 9592002, 9592052, 9593156, 9593499, 9594131,
                9594911, 9594961, 9595862, 9600762, 9600868, 9600918, 9601521, 9602124, 9607269,
                9607319, 9607369, 9607497, 9609118, 9613309, 9613360, 9617927, 9619010, 9621992,
                9623182, 9623801, 9625354, 9625406, 9626645, 9633168, 9634698, 9637222, 9640057,
                9641278, 9646437, 9646487, 9649562, 9650188, 9650265, 9650434, 9650931, 9650981,
                9652149, 9653952, 9654003, 9658903, 9659004, 9659054, 9659259, 9659309, 9666151,
                9666201, 9668392, 9669925, 9676217, 9677218, 9677956, 9678006, 9680941, 9684126,
                9684905, 9685161, 9685923, 9688371, 9693059, 9693565, 9693914, 9694803, 9695600,
                9695651, 9696613, 9706633, 9707344, 9707395, 9708344, 9708394, 9709396, 9710225,
                9713762, 9717026, 9717077, 9721765, 9723170, 9723220, 9723880, 9724088, 9725116,
                9725933, 9728377, 9729476, 9729527, 9729914, 9730906, 9731928, 9731979, 9732381,
                9732910, 9733110, 9733962, 9735916, 9735967, 9736910, 9737909, 9739935, 9739985,
                9741357, 9741408, 9741516, 9742201, 9743951, 9744002, 9744838, 9747361, 9748384,
                9752118, 9752168, 9752910, 9762497, 9762548, 9762683, 9762826, 9763126, 9763575,
                9764590, 9766366, 9767176, 9768932, 9769447, 9769498, 9771253, 9771927, 9771977,
                9772028, 9772788, 9772839, 9772957, 9773007, 9775891, 9776835, 9779911, 9779962,
                9780643, 9780694, 9780978, 9781030, 9781131, 9781335, 9782975, 9786324, 9786374,
                9786821, 9786906, 9787953, 9788003, 9788248, 9788298, 9788437, 9788488, 9788657,
                9788707, 9789569, 9789669, 9790221, 9790271, 9791690, 9792242, 9792293, 9793254,
                9793305, 9802391, 9802442, 9802746, 9803228, 9804137, 9807277, 9808009, 9808059,
                9808945, 9810226, 9810276, 9820404, 9820457, 9820507, 9820763, 9820814, 9820935,
                9821808, 9822362, 9822515, 9822712, 9822922, 9824813, 9825692, 9825827, 9825928,
                9827003, 9828926, 9829910, 9835193, 9835676, 9835727, 9839922, 9842375, 9843550,
                9844378, 9844428, 9845102, 9845430, 9845911, 9845961, 9847852, 9851232, 9852976,
                9853955, 9858018, 9862440, 9862836, 9867897, 9868260, 9868952, 9872661, 9873025,
                9873467, 9873518, 9876044, 9876094, 9877558, 9880924, 9880975, 9881751, 9884246,
                9884466, 9884591, 9887028, 9887129, 9888044, 9891011, 9893272, 9893920, 9893971,
                9895589, 9897637, 9897687, 9897924, 9898452, 9898944, 9899540, 9899590, 9899921,
                9900342, 9900392, 9903868, 9904060, 9907799, 9908248, 9908948, 9909001, 9909592,
                9914912, 9915985, 9916618, 9916668, 9917429, 9920717, 9923232, 9923283, 9959687,
                9964121, 9987762, 9988017, 9988393, 9988505, 9988608, 9988786, 9988967, 9989083,
                9990517, 9990618, 9992396, 9992447, 10000240, 10000748, 10002985, 10003035,
                10009908, 10024937, 10024987, 10026813, 10027777, 10033548, 10033649, 10040095,
                10040196, 10040340, 10040489, 10043332, 10043382, 10043433, 10043834, 10043968,
                10044163, 10044374, 10047096, 10047146, 10047587, 10047637, 10047689, 10047937,
                10048105, 10048328, 10048429, 10048549, 10050036, 10050086, 10050143, 10050276,
                10050377, 10052232, 10052297, 10052597, 10052647, 10052786, 10052904, 10053005,
                10053152, 10053352, 10058134, 10063763, 10064440, 10069260, 10069310, 10069710,
                10071402, 10071453, 10077829, 10077918, 10080749, 10080799, 10081864, 10081914,
                10081965, 10082327, 10082429, 10082530, 10082676, 10082779, 10082895, 10083030,
                10083144, 10083194, 10084150, 10084258, 10084359, 10084460, 10084562, 10084671,
                10084772, 10084906, 10085029, 10100284, 10100334, 10101291, 10101441, 10101586,
                10101697, 10101843, 10106008, 10106059, 10107243, 10107994, 10108128, 10108245,
                10108413, 10108525, 10111007, 10111057, 10112077, 10114178, 10116066, 10116944,
                10117053, 10117260, 10117361, 10117502, 10117625, 10118344, 10120822, 10120872,
                10121066, 10121330, 10121438, 10121586, 10121687, 10121838, 10122009, 10122149,
                10123386, 10123856, 10123957, 10124100, 10124259, 10124360, 10124514, 10124650,
                10124777, 10125242, 10125292, 10125736, 10125882, 10126104, 10126205, 10126337,
                10126463, 10126596, 10127676, 10127727, 10134669, 10134873, 10134923, 10138673,
                10139918, 10141500, 10141550, 10141776, 10141826, 10142309, 10142431, 10142685,
                10142736, 10148151, 10159713, 10160326, 10161493, 10161543, 10161864, 10161914,
                10162017, 10162068, 10162353, 10163441, 10173692, 10184598, 10184827, 10184877,
                10184928, 10185898, 10186610, 10186722, 10189265, 10189315, 10190186, 10191465,
                10192025, 10192707, 10192758, 10193907, 10195464, 10197173, 10203220, 10204303,
                10204354, 10204404, 10208112, 10211299, 10218041, 10222132, 10225875, 10225976,
                10226026, 10226077, 10226178, 10227990, 10228041, 10229145, 10229302, 10229403,
                10232095, 10261279, 10261329, 10263351, 10263402, 10267470, 10269203, 10270998,
                10271048, 10272347, 10276403, 10276454, 10277725, 10278698, 10282949, 10283000,
                10285915, 10286016, 10286239, 10287767, 10287817, 10287928, 10288033, 10288165,
                10292096, 10292197, 10292765, 10293068, 10293118, 10294266, 10296581, 10300979,
                10301109, 10301242, 10302654, 10305920, 10305970, 10308337, 10311371, 10311422,
                10311589, 10311652, 10315145, 10315260, 10321498, 10321549, 10321652, 10321866,
                10321967, 10326600, 10326709, 10327764, 10330490, 10333764, 10334595, 10334645,
                10334696, 10335500, 10336038, 10336089, 10336392, 10336500, 10336601, 10339110,
                10339744, 10349867, 10349917, 10350574, 10351958, 10353456, 10353929, 10353979,
                10357545, 10359914, 10361925, 10363849, 10363899, 10365929, 10369834, 10375869,
                10375920, 10376596, 10378958, 10380307, 10380455, 10380505, 10380565, 10380852,
                10385676, 10389959, 10390059, 10390261, 10391637, 10395482, 10395532, 10399011,
                10403697, 10407909, 10409426, 10409560, 10410932, 10411059, 10411160, 10411643,
                10413960, 10416961, 10417103, 10417768, 10417869, 10417919, 10418068, 10418547,
                10418598, 10421803, 10421904, 10422910, 10422960, 10437985, 10438086, 10443794,
                10443845, 10444592, 10444986, 10447420, 10448062, 10448464, 10450325, 10453361,
                10455672, 10456191, 10456921, 10457842, 10457893, 10458844, 10459850, 10461563,
                10461664, 10461990, 10462040, 10465603, 10466539, 10466591, 10467870, 10467959,
                10470764, 10470814, 10473492, 10475913, 10475963, 10480679, 10480779, 10481486,
                10481664, 10481715, 10481945, 10484779, 10485207, 10488850, 10489600, 10495954,
                10496004, 10503071, 10503121, 10503407, 10503457, 10509191, 10509241, 10509727,
                10510407, 10510457, 10510953, 10511107, 10511247, 10511347, 10511448, 10512257,
                10512308, 10513730, 10513915, 10514387, 10515131, 10515232, 10516196, 10516246,
                10516744, 10518149, 10518199, 10518250, 10518394, 10522219, 10523577, 10524434,
                10524696, 10524797, 10524847, 10526178, 10526228, 10526491, 10526614, 10527610,
                10527920, 10528021, 10528600, 10528725, 10528776, 10530700, 10530751, 10530801,
                10536346, 10536947, 10536997, 10537060, 10537136, 10538951, 10539002, 10541287,
                10541338, 10541797, 10541928, 10542072, 10542721, 10542854, 10546815, 10546866,
                10547343, 10547526, 10548879, 10548929, 10552630, 10552973, 10553074, 10553147,
                10553247, 10553452, 10556429, 10558833, 10558884, 10559293, 10560925, 10561471,
                10561521, 10589251, 10589493, 10591388, 10592915, 10592966, 10594015, 10594467,
                10594964, 10595015, 10597303, 10620064, 10620114, 10625923, 10626040, 10627042,
                10636686, 10640376, 10643470, 10648571, 10651782, 10654870, 10655539, 10658626,
                10658676, 10661669, 10661719, 10661959, 10662903, 10666226, 10666276, 10666326,
                10666376, 10672207, 10676268, 10676319, 10682957, 10685289, 10685390, 10686530,
                10687886, 10687987, 10688121, 10690839, 10690889, 10692823, 10692874, 10700905,
                10702053, 10703066, 10703117, 10708042, 10710496, 10710548, 10710604, 10717749,
                10717799, 10720913, 10724933, 10725341, 10726145, 10727832, 10727883, 10728658,
                10730679, 10731634, 10731864, 10742947, 10742997, 10747078, 10753344, 10753394,
                10754550, 10754934, 10755906, 10756006, 10756395, 10760590, 10760924, 10761911,
                10762927, 10763917, 10764789, 10764840, 10764908, 10768323, 10773632, 10774468,
                10774518, 10775693, 10780394, 10784905, 10784955, 10785219, 10785475, 10786442,
                10790376, 10790427, 10790927, 10792882, 10799417, 10802015, 10802066, 10802117,
                10808422, 10809004, 10813003, 10813054, 10813284, 10814285, 10816862, 10820984,
                10827930, 10827981, 10836697, 10838535, 10838586, 10838637, 10838687, 10840405,
                10840456, 10842470, 10842682, 10844939, 10846669, 10846922, 10846973, 10848255,
                10854677, 10855789, 10855890, 10856024, 10856128, 10856264, 10857098, 10859936,
                10859987, 10860813, 10860913, 10860964, 10861361, 10865146, 10865196, 10865318,
                10865368, 10868086, 10868936, 10869932, 10870469, 10870520, 10870635, 10870928,
                10871924, 10871974, 10872303, 10872354, 10872966, 10873735, 10874275, 10874401,
                10877884, 10878816, 10879026, 10879077, 10879509, 10880796, 10881350, 10883327,
                10883378, 10886596, 10887754, 10887931, 10888044, 10888173, 10888274, 10888399,
                10888568, 10888669, 10890409, 10890459, 10891078, 10891180, 10891266, 10891316,
                10892009, 10895440, 10896417, 10896537, 10896595, 10897391, 10897491, 10901737,
                10903312, 10903425, 10903601, 10903651, 10903702, 10906226, 10906481, 10906795,
                10906845, 10911198, 10913089, 10913190, 10913866, 10914912, 10915233, 10915284,
                10915404, 10916798, 10918079, 10918180, 10918506, 10918557, 10918865, 10920601,
                10921533, 10921584, 10922031, 10922082, 10926465, 10929001, 10930106, 10931210,
                10935285, 10935404, 10935560, 10939556, 10943109, 10943160, 10944973, 10947608,
                10948835, 10950920, 10952215, 10956780, 10958823, 10959998, 10960209, 10961026,
                10961077, 10962262, 10963200, 10967184, 10967234, 10967285, 10967398, 10967512,
                10970050, 10970101, 10970611, 10971287, 10971460, 10971567, 10971676, 10971959,
                10972015, 10972066, 10972131, 10972919, 10973039, 10973749, 10974410, 10974460,
                10974766, 10976113, 10976835, 10976885, 10976936, 10976986, 10977456, 10977736,
                10977837, 10977892, 10977942, 10978043, 10979171, 10979913, 10980242, 10980292,
                10981493, 10981667, 10984287, 10984910, 10986908, 10987857, 10987907, 10991677,
                10991727, 10991828, 10991939, 10992353, 10992662, 10993441, 10993492, 10996548,
                10998193, 10998317, 10998367, 10998858, 10999330, 11000703, 11001291, 11001342,
                11001442, 11006798, 11008892, 11009125, 11009716, 11010741, 11013224, 11013435,
                11014614, 11014664, 11016002, 11016052, 11016102, 11016583, 11017917, 11019920,
                11019971, 11020568, 11021908, 11021958, 11023718, 11024289, 11024340, 11024892,
                11025339, 11025389, 11025724, 11026116, 11026166, 11026718, 11026768, 11026818,
                11027423, 11027579, 11028836, 11029925, 11030927, 11030977, 11031098, 11031312,
                11031422, 11031915, 11032052, 11032208, 11034633, 11034683, 11035295, 11035520,
                11035570, 11037095, 11037315, 11037365, 11037779, 11038289, 11038339, 11038571,
                11038673, 11041382, 11041433, 11041920, 11042901, 11042952, 11045942, 11046201,
                11046622, 11047668, 11047719, 11050094, 11050201, 11051060, 11051286, 11051434,
                11051833, 11052371, 11052464, 11052833, 11053292, 11053342, 11053463, 11057909,
                11057959, 11058638, 11058872, 11059030, 11059503, 11059554, 11060804, 11060920,
                11061323, 11063881, 11064036, 11070729, 11070829, 11076750, 11076907, 11076958,
                11077093, 11077221, 11078550, 11081790, 11083424, 11083475, 11087041, 11089296,
                11089347, 11089397, 11090962, 11092686, 11092736, 11094894, 11095665, 11099732,
                11101907, 11104233, 11104786, 11105297, 11105348, 11107749, 11107799, 11112677,
                11118227, 11128259, 11128397, 11128466, 11128567, 11131926, 11135797, 11136043,
                11136219, 11136271, 11136322, 11136632, 11140351, 11141882, 11144078, 11144128,
                11144179, 11144229, 11145475, 11145615, 11145668, 11145785, 11145956, 11146006,
                11146136, 11146371, 11146474, 11146524, 11146979, 11148657, 11148996, 11149394,
                11152171, 11152222, 11152372, 11153138, 11154693, 11154743, 11154906, 11155026,
                11155996, 11156106, 11156156, 11157782, 11159559, 11159915, 11160876, 11162203,
                11162253, 11162389, 11162489, 11162539, 11164611, 11165913, 11165963, 11166124,
                11166175, 11167408, 11178886, 11178937, 11179977, 11186552, 11187287, 11187337,
                11189344, 11189396, 11192261, 11194398, 11195368, 11195776, 11196391, 11196491,
                11196906, 11197007, 11197098, 11197356, 11197407, 11197574, 11198453, 11205494,
                11205544, 11205826, 11206713, 11208921, 11209770, 11210929, 11211599, 11212406,
                11212457, 11214117, 11216039, 11216506, 11218876, 11220048, 11220098, 11221244,
                11224146, 11224196, 11226501, 11226650, 11232258, 11232309, 11233141, 11233827,
                11233878, 11237224, 11237807, 11239088, 11239925, 11240492, 11242234, 11242380,
                11242845, 11243349, 11243399, 11251833, 11252622, 11252828, 11254386, 11254579,
                11257631, 11258289, 11260813, 11261810, 11261860, 11262227, 11262474, 11263273,
                11264491, 11264772, 11264873, 11264994, 11265045, 11269152, 11272556, 11272607,
                11272657, 11273911, 11274855, 11274906, 11275921, 11275972, 11277454, 11278127,
                11278310, 11278360, 11279226, 11279983, 11280084, 11280184, 11281897, 11285163,
                11285213, 11286952, 11288383, 11289142, 11289242, 11290481, 11290769, 11290819,
                11290887, 11296459, 11296510, 11299592, 11300073, 11300258, 11301856, 11301906,
                11302792, 11303512, 11303563, 11303746, 11304444, 11304766, 11304816, 11304956,
                11305170, 11305220, 11308041, 11313746, 11313797, 11313847, 11315900, 11315951,
                11316952, 11317081, 11317182, 11317302, 11318354, 11318404, 11320533, 11323822,
                11323873, 11324909, 11325531, 11331729, 11331779, 11331852, 11341593, 11341644,
                11344338, 11344389, 11347909, 11348100, 11350601, 11350770, 11351114, 11356505,
                11360591, 11361566, 11361616, 11367951, 11368085, 11368186, 11368382, 11368486,
                11368613, 11371554, 11372584, 11379039, 11379090, 11379489, 11379625, 11379746,
                11379888, 11379992, 11380113, 11380287, 11380388, 11380530, 11380646, 11384794,
                11384844, 11385271, 11385421, 11385539, 11385697, 11385798, 11385948, 11386052,
                11386191, 11386241, 11386291, 11386771, 11386872, 11387008, 11387128, 11387275,
                11387376, 11387477, 11387822, 11387873, 11388207, 11399036, 11400993, 11401476,
                11401611, 11401661, 11402012, 11402868, 11404046, 11405518, 11406518, 11411101,
                11411207, 11411258, 11411320, 11411558, 11411609, 11412296, 11412404, 11412455,
                11412929, 11413033, 11415167, 11415217, 11415276, 11417979, 11419431, 11421785,
                11428381, 11429307, 11432510, 11432560, 11432708, 11444325, 11445650, 11448031,
                11454913, 11454963, 11456595, 11463844, 11463895, 11464854, 11467518, 11470954,
                11471004, 11472171, 11472222, 11474426, 11477439, 11477540, 11477645, 11477696,
                11478704, 11486965, 11487065, 11487842, 11487949, 11488837, 11489051, 11489101,
                11491651, 11491703, 11491943, 11492560, 11492691, 11492986, 11493750, 11493851,
                11494154, 11496097, 11497033, 11499556, 11499686, 11499872, 11500026, 11500930,
                11500981, 11502757, 11502807, 11503313, 11503414, 11503539, 11503590, 11504633,
                11504683, 11512496, 11514697, 11514748, 11517073, 11517124, 11517981, 11518032,
                11520161, 11520652, 11521932, 11522033, 11522439, 11522490, 11523624, 11525785,
                11527184, 11527319, 11527369, 11531372, 11531491, 11531977, 11532422, 11534106,
                11535326, 11535680, 11535936, 11537193, 11538174, 11538224, 11538274, 11538395,
                11538446, 11538568, 11538945, 11541116, 11541216, 11543187, 11543238, 11543663,
                11549189, 11551141, 11551242, 11554606, 11554657, 11554708, 11555939, 11564613,
                11569937, 11571152, 11571328, 11571448, 11571583, 11572668, 11572718, 11576354,
                11576775, 11576876, 11577166, 11577217, 11579969, 11586070, 11586120, 11591250,
                11591862, 11592830, 11592880, 11593151, 11600615, 11602511, 11602699, 11602810,
                11602911, 11607966, 11608078, 11608237, 11608341, 11608496, 11608642, 11615632,
                11615683, 11617836, 11619929, 11619979, 11620924, 11622078, 11624514, 11633329,
                11633430, 11633541, 11633683, 11637347, 11640878, 11640929, 11650344, 11651615,
                11651722, 11651825, 11652011, 11655217, 11655933, 11656034, 11658865, 11658931,
                11658982, 11661378, 11661428, 11662650, 11665944, 11666077, 11667961, 11672119,
                11672249, 11672300, 11672958, 11673146, 11673273, 11673374, 11673494, 11673952,
                11680675, 11682356, 11692098, 11692500, 11692550, 11692666, 11693830, 11697532,
                11704560, 11704611, 11704661, 11704793, 11704843, 11704967, 11705263, 11705313,
                11705966, 11706308, 11706732, 11712149, 11712200, 11713038, 11713165, 11713266,
                11713386, 11714516, 11714931, 11716576, 11716706, 11717101, 11717388, 11719157,
                11719271, 11719372, 11719527, 11719578, 11720733, 11723860, 11726060, 11728052,
                11728102, 11728228, 11728279, 11728404, 11729377, 11729428, 11729688, 11729739,
                11730913, 11730963, 11734326, 11734427, 11735159, 11736341, 11737463, 11739289,
                11749919, 11749969, 11757156, 11761285, 11761335, 11763201, 11763694, 11763744,
                11766372, 11767953, 11768004, 11773568, 11781371, 11785518, 11787047, 11787148,
                11787951, 11788002, 11788289, 11790328, 11791854, 11791904, 11794934, 11795368,
                11795864, 11795977, 11799268, 11800833, 11800883, 11802310, 11802361, 11802418,
                11804121, 11804262, 11804313, 11813966, 11814023, 11815577, 11818689, 11820315,
                11820433, 11820963, 11823157, 11823208, 11823767, 11823870, 11823924, 11824024,
                11825094, 11825968, 11826289, 11827267, 11828570, 11829515, 11829777, 11831538,
                11832003, 11832968, 11833119, 11833170, 11834122, 11835342, 11835554, 11835875,
                11835975, 11836628, 11836729, 11837625, 11839945, 11842966, 11843505, 11847560,
                11847611, 11847939, 11850934, 11850984, 11855908, 11860088, 11863264, 11867385,
                11874809, 11874859, 11877452, 11879341, 11879673, 11879773, 11880167, 11881226,
                11882379, 11882429, 11882480, 11882708, 11884802, 11884852, 11886602, 11886653,
                11886751, 11887048, 11887099, 11887564, 11890070, 11890120, 11894698, 11894909,
                11895027, 11896104, 11896503, 11896553, 11896807, 11897052, 11897103, 11897355,
                11901263, 11902047, 11902097, 11904033, 11904135, 11904373, 11904424, 11904485,
                11907933, 11918298, 11918348, 11921557, 11924037, 11924129, 11924236, 11927875,
                11928581, 11928632, 11928682, 11933213, 11935801, 11936088, 11936698, 11937280,
                11937862, 11938467, 11938736, 11941068, 11941477, 11942094, 11942700, 11943346,
                11943898, 11943949, 11944524, 11945094, 11945226, 11945634, 11945685, 11947745,
                11948133, 11948685, 11949281, 11949951, 11950503, 11951086, 11951136, 11951421,
                11951758, 11952343, 11953551, 11954096, 11954243, 11954295, 11954431, 11954482,
                11954535, 11954973, 11955985, 11957178, 11958119, 11958170, 11958646, 11961412,
                11961462, 11961601, 11961765, 11962392, 11962909, 11963573, 11963868, 11964208,
                11964753, 11964949, 11965385, 11966036, 11966127, 11966457, 11966638, 11966689,
                11966798, 11968580, 11968630, 11973065, 11975558, 11978624, 11982901, 11984756,
                11984806, 11986737, 11986839, 11987049, 11988924, 11989638, 11990932, 11990983,
                11995599, 11996066, 12000491, 12007806, 12007856, 12009062, 12009113, 12009164,
                12014099, 12014149, 12015531, 12015914, 12015964, 12016384, 12016607, 12016770,
                12017582, 12019085, 12019437, 12019609, 12020872, 12022379, 12022429, 12022745,
                12022846, 12023356, 12023407, 12024430, 12025164, 12026667, 12034286, 12035898,
                12035998, 12037003, 12039396, 12042730, 12051976, 12052027, 12052127, 12055939,
                12055990, 12057333, 12059205, 12059257, 12066923, 12067140, 12067190, 12067253,
                12071562, 12072379, 12072515, 12080498, 12081572, 12084704, 12084754, 12084805,
                12087042, 12087451, 12087553, 12087657, 12087798, 12087911, 12088067, 12090269,
                12090320, 12103614, 12114250, 12114301, 12115020, 12117286, 12118204, 12120924,
                12120986, 12121036, 12121216, 12121983, 12123077, 12123127, 12124941, 12124992,
                12125187, 12126906, 12128463, 12128513, 12130732, 12130782, 12131768, 12140151,
                12144140, 12147709, 12151664, 12151715, 12153345, 12155666, 12164461, 12165119,
                12168123, 12169173, 12169297, 12175473, 12175523, 12177677, 12178825, 12184621,
                12184672, 12184947, 12185986, 12186497, 12188103, 12190525, 12190674, 12191035,
                12191086, 12191463, 12191514, 12192712, 12193213, 12193263, 12196816, 12197564,
                12197614, 12197779, 12200894, 12206138, 12206761, 12206873, 12206923, 12207328,
                12207378, 12217272, 12217322, 12217993, 12218043, 12218093, 12218268, 12219923,
                12220130, 12220181, 12220231, 12227006, 12230665, 12230716, 12234349, 12235457,
                12235938, 12235989, 12238810, 12239154, 12239504, 12239820, 12240224, 12240891,
                12240941, 12250945, 12260842, 12261090, 12266007, 12269694, 12273042, 12273843,
                12274014, 12276523, 12276575, 12276677, 12276933, 12277159, 12277210, 12277260,
                12277430, 12277480, 12278962, 12279012, 12279759, 12279810, 12280142, 12280549,
                12280962, 12281773, 12284610, 12284661, 12285072, 12285291, 12285562, 12285729,
                12285779, 12285830, 12285959, 12286031, 12291680, 12291832, 12295348, 12302332,
                12302400, 12302452, 12303380, 12304244, 12304295, 12304367, 12305074, 12305124,
                12305174, 12305790, 12306510, 12306560, 12307132, 12307202, 12307914, 12308932,
                12309853, 12309903, 12311312, 12312716, 12314176, 12314665, 12315922, 12316918,
                12319992, 12320042, 12321243, 12321344, 12321505, 12322028, 12322291, 12323721,
                12323771, 12323822, 12326199, 12327983, 12328100, 12328150, 12330827, 12330930,
                12331133, 12331183, 12331744, 12332003, 12332209, 12337522, 12342720, 12344923,
                12346944, 12347659, 12348631, 12353125, 12354265, 12354315, 12354885, 12355975,
                12356025, 12356126, 12356526, 12358194, 12358245, 12359449, 12359993, 12360766,
                12364342, 12364597, 12365817, 12366383, 12378953, 12379701, 12379752, 12380988,
                12386029, 12392958, 12394188, 12394786, 12398200, 12401747, 12407128, 12407623,
                12407921, 12408946, 12409324, 12409374, 12409497, 12412984, 12416906, 12417015,
                12417065, 12420792, 12436214, 12436265, 12436338, 12437853, 12437903, 12444657,
                12444792, 12444897, 12445016, 12445117, 12445238, 12445996, 12449434, 12453075,
                12459939, 12459989, 12460040, 12463997, 12464048, 12470591, 12481001, 12481193,
                12481453, 12481616, 12481699, 12481997, 12482047, 12482120, 12482221, 12482560,
                12485439, 12486121, 12486171, 12486698, 12487112, 12487162, 12487619, 12488341,
                12489380, 12490736, 12491685, 12492427, 12494035, 12494412, 12495847, 12495897,
                12496753, 12498315, 12499420, 12499545, 12499595, 12500137, 12500188, 12500410,
                12501307, 12502113, 12502181, 12507430, 12508738, 12511091, 12511141, 12511751,
                12511938, 12515759, 12515809, 12515860, 12515945, 12515995, 12520197, 12520942,
                12520993, 12523801, 12532108, 12532686, 12540651, 12540702, 12540904, 12542015,
                12543088, 12545542, 12546919, 12547657, 12547708, 12551844, 12551895, 12552645,
                12554219, 12554431, 12554906, 12555056, 12555107, 12560951, 12561004, 12562594,
                12563911, 12566181, 12575867, 12575917, 12576597, 12580605, 12580705, 12586313,
                12590609, 12593099, 12601820, 12602927, 12604651, 12604701, 12605008, 12605177,
                12615909, 12616775, 12617839, 12617889, 12617940, 12619560, 12619610, 12619662,
                12621681, 12622101, 12622856, 12622906, 12625913, 12626045, 12628002, 12629768,
                12631146, 12635637, 12635687, 12635890, 12639282, 12640986, 12644006, 12644057,
                12644167, 12644218, 12644531, 12644650, 12644769, 12644879, 12644929, 12647223,
                12647273, 12649454, 12649784, 12659420, 12659581, 12659967, 12660996, 12661327,
                12662360, 12663817, 12664847, 12666213, 12669739, 12669789, 12671124, 12675983,
                12691019, 12692441, 12699644, 12699694, 12700274, 12700325, 12701524, 12704176,
                12704706, 12704833, 12705521, 12705572, 12705927, 12707020, 12707071, 12708089,
                12709065, 12711552, 12712998, 12713051, 12727155, 12727932, 12732016, 12732128,
                12732178, 12746674, 12746751, 12747950, 12748092, 12748232, 12748284, 12748353,
                12748483, 12749087, 12751437, 12752211, 12752261, 12753715, 12754854, 12755453,
                12758914, 12762339, 12762527, 12763169, 12763385, 12765314, 12765364, 12766847,
                12770857, 12770958, 12773193, 12773244, 12773727, 12776917, 12779929, 12779980,
                12780139, 12780638, 12780739, 12781984, 12783622, 12786328, 12786378, 12786429,
                12787054, 12787105, 12788913, 12789256, 12789306, 12791658, 12791709, 12792184,
                12792285, 12795536, 12797068, 12797118, 12797219, 12797270, 12797725, 12798607,
                12798735, 12804286, 12808020, 12808071, 12808566, 12808667, 12808823, 12808924,
                12809046, 12809458, 12812861, 12812913, 12814364, 12814802, 12815639, 12816716,
                12819940, 12820618, 12826881, 12826931, 12828549, 12828902, 12829887, 12830069,
                12831922, 12833586, 12834860, 12835157, 12836171, 12836503, 12839919, 12840294,
                12840882, 12841078, 12846568, 12851154, 12852335, 12852455, 12853638, 12853931,
                12854571, 12854901, 12855068, 12856304, 12856406, 12867979, 12868080, 12869125,
                12869176, 12869427, 12869527, 12869636, 12869748, 12869966, 12870589, 12870655,
                12870786, 12875944, 12876907, 12878353, 12878404, 12882293, 12882393, 12882576,
                12883028, 12883147, 12883305, 12883413, 12883551, 12883667, 12884017, 12884067,
                12887396, 12887447, 12888422, 12889679, 12891357, 12891723, 12894030, 12894080,
                12894690, 12897115, 12897168, 12897220, 12897411, 12897576, 12898818, 12898869,
                12898932, 12899092, 12899285, 12899335, 12899504, 12900842, 12901581, 12901852,
                12902069, 12903782, 12904864, 12904914, 12905422, 12905665, 12905715, 12905765,
                12905883, 12908241, 12913041, 12914534, 12914585, 12917113, 12918377, 12918428,
                12924420, 12927703, 12928044, 12933913, 12934479, 12934530, 12934873, 12934974,
                12935153, 12936018, 12938623, 12941455, 12941505, 12946860, 12947639, 12947865,
                12948921, 12954447, 12956602, 12959183, 12961443, 12976172, 12977279, 12980338,
                12980910, 12980961, 12988596, 12998134, 12998650, 12998828, 12998912, 12999906,
                13000038, 13000089, 13001050, 13001100, 13002460, 13002989, 13004000, 13004456,
                13004507, 13005072, 13005128, 13005179, 13007010, 13007149, 13007280, 13007331,
                13007381, 13007554, 13007914, 13008081, 13008264, 13008314, 13009492, 13009542,
                13009744, 13009892, 13012058, 13018946, 13021362, 13024737, 13025204, 13025843,
                13025945, 13026247, 13026297, 13027957, 13028441, 13028542, 13029724, 13029825,
                13031999, 13034120, 13034251, 13034601, 13034967, 13035017, 13036989, 13038007,
                13038057, 13038171, 13038507, 13040071, 13040122, 13041290, 13043245, 13045685,
                13045736, 13047762, 13047931, 13048371, 13048577, 13048682, 13048905, 13049015,
                13049119, 13049220, 13049320, 13056046, 13060526, 13060634, 13061471, 13061574,
                13061697, 13062612, 13066666, 13067539, 13080727, 13082086, 13082136, 13082288,
                13082919, 13083020, 13083158, 13084417, 13090301, 13093147, 13093304, 13093404,
                13094299, 13095293, 13095977, 13096027, 13096324, 13096980, 13097815, 13097865,
                13097915, 13098026, 13099228, 13100231, 13100281, 13105564, 13106277, 13106328,
                13107560, 13112798, 13113012, 13113062, 13113192, 13113358, 13113455, 13114326,
                13115127, 13115228, 13117310, 13117676, 13117778, 13119191, 13120415, 13120465,
                13121094, 13121255, 13121509, 13122180, 13122231, 13125429, 13129690, 13129740,
                13130911, 13136860, 13137733, 13137783, 13138450, 13139664, 13139831, 13140363,
                13140524, 13141315, 13149239, 13149686, 13149736, 13150183, 13153748, 13156551,
                13156602, 13157875, 13157976, 13158099, 13159504, 13159560, 13159610, 13159669,
                13161011, 13161062, 13161112, 13161224, 13161320, 13161666, 13162267, 13162776,
                13163553, 13163707, 13165216, 13165267, 13165452, 13166852, 13166970, 13167020,
                13167888, 13167938, 13169195, 13170067, 13170975, 13171026, 13171325, 13171568,
                13171914, 13172106, 13172418, 13172468, 13175944, 13176908, 13178111, 13178162,
                13180771, 13182235, 13183870, 13183970, 13185358, 13185408, 13188627, 13188816,
                13188867, 13189020, 13189438, 13189489, 13192106, 13192301, 13193770, 13193871,
                13193942, 13194371, 13194421, 13194565, 13194910, 13198271, 13198797, 13201785,
                13204106, 13204674, 13204724, 13205745, 13206828, 13206878, 13206952, 13207516,
                13208699, 13208799, 13208943, 13210592, 13210692, 13212427, 13212641, 13212752,
                13214189, 13214289, 13214432, 13214483, 13217791, 13217842, 13217893, 13218752,
                13218852, 13218965, 13219394, 13222524, 13222574, 13225939, 13227129, 13228681,
                13231285, 13231385, 13231542, 13237539, 13237645, 13237696, 13239062, 13239284,
                13239386, 13239696, 13240092, 13240447, 13240548, 13240648, 13240995, 13242665,
                13243413, 13243660, 13243980, 13248233, 13248283, 13248992, 13251916, 13252567,
                13252619, 13254261, 13254312, 13254571, 13257854, 13257905, 13258076, 13261549,
                13261599, 13262021, 13262121, 13262172, 13262298, 13262426, 13262477, 13263224,
                13263845, 13263896, 13264014, 13264115, 13264229, 13264280, 13265913, 13265964,
                13277545, 13277595, 13280015, 13290952, 13291299, 13291504, 13291554, 13296962,
                13297012, 13297272, 13297627, 13297769, 13297992, 13298120, 13298221, 13299058,
                13299269, 13299364, 13299573, 13299624, 13299674, 13300166, 13300275, 13300479,
                13300580, 13300630, 13301387, 13302262, 13302313, 13302394, 13302495, 13302768,
                13302820, 13302871, 13303243, 13305587, 13310347, 13312800, 13312851, 13316918,
                13317290, 13317672, 13319100, 13319151, 13320003, 13321349, 13321717, 13321767,
                13322225, 13322655, 13325709, 13326309, 13326415, 13326733, 13327750, 13328101,
                13328974, 13329501, 13329915, 13329966, 13330909, 13331631, 13331681, 13331917,
                13332648, 13332749, 13332935, 13332985, 13333917, 13334031, 13334867, 13338790,
                13338840, 13338890, 13339819, 13340137, 13345967, 13346017, 13346068, 13350326,
                13350921, 13351028, 13351098, 13351220, 13351375, 13351719, 13353644, 13355917,
                13356307, 13356359, 13356412, 13357542, 13357593, 13357958, 13360128, 13363261,
                13363312, 13369293, 13372349, 13374924, 13374978, 13375880, 13377887, 13379534,
                13379586, 13379711, 13379955, 13380557, 13380962, 13381012, 13381166, 13381725,
                13382914, 13382965, 13383048, 13383987, 13384038, 13384100, 13384172, 13384742,
                13386077, 13386178, 13386560, 13390908, 13391911, 13392056, 13392197, 13392914,
                13394328, 13394483, 13394583, 13394951, 13395052, 13395103, 13395285, 13400154,
                13400204, 13402543, 13404300, 13408766, 13409145, 13409195, 13410863, 13410998,
                13411052, 13412169, 13412219, 13417984, 13429224, 13429274, 13429864, 13430057,
                13434979, 13435083, 13435211, 13435382, 13438102, 13438152, 13439110, 13439304,
                13439848, 13442833, 13442960, 13443010, 13443711, 13443761, 13446164, 13446457,
                13451159, 13451871, 13452198, 13452702, 13454029, 13454549, 13458058, 13459109,
                13459248, 13459813, 13460015, 13460286, 13460510, 13460928, 13464786, 13466250,
                13466914, 13467245, 13467716, 13469151, 13469252, 13470199, 13470290, 13476898,
                13476948, 13477140, 13477191, 13484537, 13484587, 13484735, 13484836, 13485750,
                13485937, 13485987, 13487189, 13487239, 13487871, 13488107, 13489167, 13489268,
                13489454, 13489504, 13503792, 13518138, 13522691, 13522913, 13523936, 13524882,
                13525893, 13525943, 13526924, 13526975, 13533996, 13534126, 13535842, 13535892,
                13540047, 13545916, 13550714, 13550764, 13558006, 13559915, 13559966, 13566462,
                13570239, 13570289, 13570412, 13570700, 13570857, 13573513, 13574448, 13575150,
                13575250, 13579328, 13579378, 13581944, 13581994, 13582298, 13582434, 13582484,
                13582776, 13585303, 13586468, 13590217, 13590267, 13590478, 13590897, 13591342,
                13591647, 13592750, 13592800, 13595904, 13596005, 13596321, 13596372, 13596481,
                13598152, 13598202, 13598439, 13598490, 13599583, 13599701, 13599816, 13599917,
                13600023, 13600165, 13600283, 13600421, 13600471, 13606931, 13608930, 13608980,
                13609266, 13609316, 13612493, 13612957, 13613085, 13613136, 13613216, 13613366,
                13613554, 13613604, 13613921, 13614660, 13615919, 13616853, 13617693, 13617743,
                13620223, 13628942, 13629950, 13642587, 13642637, 13642688, 13642810, 13642861,
                13642961, 13643069, 13643119, 13643170, 13643220, 13643329, 13643379, 13643506,
                13643556, 13643607, 13643659, 13643760, 13643862, 13644021, 13644252, 13644674,
                13644724, 13644835, 13645097, 13645839, 13646094, 13646144, 13646665, 13646734,
                13646857, 13646970, 13647071, 13647221, 13647455, 13647505, 13647561, 13647801,
                13647905, 13648006, 13648512, 13648703, 13648861, 13648912, 13649232, 13649925,
                13650848, 13651601, 13651651, 13651796, 13651846, 13652832, 13654449, 13654500,
                13655169, 13655348, 13655448, 13655499, 13655636, 13659637, 13659687, 13661266,
                13662181, 13662231, 13663608, 13663945, 13664066, 13665681, 13665731, 13666565,
                13667357, 13667499, 13667611, 13668787, 13668925, 13670457, 13670624, 13671030,
                13672159, 13673982, 13684373, 13684424, 13685703, 13686691, 13686828, 13686955,
                13687085, 13687629, 13688561, 13689880, 13689998, 13690288, 13690625, 13692415,
                13695496, 13699886, 13699936, 13699987, 13700137, 13700258, 13700438, 13700539,
                13701487, 13703541, 13703773, 13704629, 13705561, 13705611, 13705663, 13705965,
                13706066, 13706179, 13707590, 13707931, 13708063, 13708164, 13708272, 13708510,
                13709482, 13709532, 13712159, 13713591, 13713701, 13714204, 13714378, 13715072,
                13715920, 13716970, 13717020, 13718650, 13719156, 13721212, 13721865, 13721915,
                13722917, 13723078, 13723129, 13723858, 13725012, 13726465, 13727285, 13727396,
                13728286, 13728435, 13729965, 13730015, 13730785, 13731170, 13731462, 13731513,
                13732044, 13732569, 13732687, 13733217, 13733950, 13734000, 13735187, 13735323,
                13735464, 13736345, 13736396, 13738474, 13742126, 13744094, 13745966, 13747381,
                13747431, 13747481, 13747649, 13747750, 13750306, 13762558, 13763230, 13763280,
                13765583, 13767938, 13768066, 13768167, 13769401, 13770522, 13770573, 13775448,
                13775561, 13775612, 13775922, 13777106, 13777818, 13778115, 13778215, 13778291,
                13778569, 13778619, 13779717, 13779883, 13780055, 13782824, 13782874, 13787070,
                13787171, 13787930, 13791295, 13795924, 13795975, 13796523, 13798009, 13800265,
                13800444, 13800912, 13806006, 13806107, 13806565, 13807476, 13807526, 13809016,
                13809187, 13811684, 13811734, 13812029, 13814554, 13816210, 13816261, 13823185,
                13825988, 13826039, 13827496, 13827920, 13828353, 13830497, 13834422, 13834523,
                13834619, 13836217, 13838073, 13838125, 13838439, 13838582, 13838723, 13841547,
                13845300, 13845401, 13850364, 13850521, 13851925, 13855204, 13858895, 13859036,
                13861271, 13867264, 13867333, 13867434, 13868829, 13869821, 13869872, 13870066,
                13874360, 13875951, 13876002, 13884947, 13884999, 13885259, 13885521, 13889259,
                13889310, 13889801, 13890120, 13891093, 13892873, 13893009, 13893260, 13897143,
                13897193, 13897244, 13898376, 13899370, 13899420, 13901017, 13901068, 13902714,
                13904254, 13905869, 13906223, 13909661, 13909711, 13909762, 13912052, 13912515,
                13913391, 13915109, 13915796, 13920417, 13922299, 13922608, 13922659, 13925264,
                13926010, 13928399, 13933504, 13935193, 13935243, 13936009, 13936949, 13937463,
                13938570, 13938621, 13938784, 13938885, 13938935, 13939103, 13942525, 13942727,
                13942777, 13942893, 13943339, 13943407, 13943557, 13947612, 13949131, 13949181,
                13949691, 13950027, 13950078, 13950501, 13952568, 13953113, 13953163, 13953948,
                13956877, 13957267, 13957368, 13960490, 13961845, 13961895, 13961996, 13962046,
                13962096, 13962908, 13963008, 13963388, 13964390, 13969336, 13969436, 13970383,
                13970967, 13971068, 13973090, 13973543, 13973594, 13973783, 13974249, 13977959,
                13978661, 13978903, 13979479, 13980173, 13980544, 13980594, 13980835, 13981494,
                13981717, 13983767, 13983868, 13984002, 13984052, 13985961, 13988465, 13988566,
                13989978, 13991036, 13991086, 13991492, 13995589, 13996563, 14001860, 14003402,
                14007949, 14012286, 14012337, 14012387, 14012437, 14012488, 14012538, 14016614,
                14025252, 14026267, 14026406, 14026946, 14026997, 14030126, 14030351, 14030657,
                14030734, 14031626, 14033966, 14034796, 14034847, 14035860, 14036553, 14036960,
                14039602, 14046742, 14046792, 14048359, 14049940, 14050304, 14052273, 14053104,
                14053788, 14056778, 14064484, 14064584, 14064699, 14064799, 14066987, 14067038,
                14067235, 14067872, 14068035, 14068086, 14068147, 14069225, 14069848, 14071726,
                14071777, 14076955, 14078012, 14083170, 14083221, 14083600, 14084011, 14092054,
                14092104, 14092154, 14092255, 14092795, 14096767, 14098274, 14106005, 14106106,
                14106156, 14106268, 14106318, 14106436, 14106487, 14106671, 14106962, 14107012,
                14107063, 14107121, 14109905, 14109956, 14111228, 14111931, 14113327, 14113377,
                14114571, 14114948, 14115646, 14115923, 14116913, 14119771, 14120342, 14122497,
                14124715, 14124766, 14128104, 14128828, 14129679, 14135046, 14135922, 14137383,
                14142316, 14152453, 14152562, 14152612, 14157971, 14158467, 14160003, 14167258,
                14167308, 14169509, 14172783, 14172833, 14177973, 14178025, 14178076, 14178181,
                14178232, 14178390, 14178491, 14178562, 14178613, 14178738, 14179216, 14179491,
                14179709, 14179931, 14179981, 14185620, 14185723, 14185968, 14186089, 14186240,
                14186364, 14186415, 14188646, 14190363, 14190414, 14191472, 14192945, 14193627,
                14194583, 14194633, 14194717, 14196082, 14196132, 14200881, 14200931, 14202125,
                14203779, 14204025, 14205149, 14207752, 14211933, 14213909, 14219871, 14220005,
                14222633, 14222779, 14224357, 14226993, 14229882, 14229932, 14230767, 14231149,
                14232371, 14232421, 14233131, 14233231, 14233667, 14234916, 14236664, 14237692,
                14238459, 14240552, 14240911, 14241918, 14244989, 14246257, 14247931, 14255485,
                14255535, 14259696, 14259805, 14261173, 14268887, 14271144, 14283926, 14290866,
                14290916, 14295815, 14302667, 14303645, 14303696, 14305454, 14305805, 14306482,
                14306911, 14307506, 14307557, 14310088, 14310138, 14311971, 14313328, 14314004,
                14314054, 14317377, 14323753, 14323804, 14326553, 14328441, 14330355, 14330427,
                14330977, 14331213, 14331360, 14331412, 14331513, 14338631, 14338681, 14344882,
                14345642, 14363480, 14363531, 14364958, 14365143, 14367029, 14367079, 14367944,
                14374415, 14374516, 14376634, 14376684, 14380405, 14380455, 14380937, 14381317,
                14381368, 14381960, 14382712, 14385671, 14385721, 14388934, 14389332, 14398112,
                14398258, 14399636, 14399737, 14400087, 14400137, 14400300, 14400743, 14401045,
                14401095, 14401146, 14403481, 14404252, 14405452, 14406493, 14406593, 14406746,
                14406797, 14411771, 14412155, 14415963, 14416910, 14416961, 14424583, 14424634,
                14427941, 14428053, 14428154, 14429909, 14431141, 14431192, 14434617, 14434718,
                14435171, 14437695, 14437888, 14448231, 14450109, 14463409, 14463584, 14463635,
                14463685, 14463884, 14464537, 14464587, 14464758, 14464908, 14466096, 14466861,
                14466911, 14468920, 14469784, 14469917, 14470018, 14470172, 14470222, 14470445,
                14470632, 14471915, 14474525, 14474575, 14486825, 14487117, 14488282, 14488332,
                14488383, 14488836, 14488887, 14489972, 14490042, 14492948, 14492998, 14493108,
                14493158, 14496949, 14499247, 14500430, 14508481, 14517497, 14519268, 14520975,
                14521097, 14521147, 14521489, 14521590, 14521694, 14521824, 14525718, 14525769,
                14527639, 14527690, 14528272, 14528323, 14528696, 14529232, 14529282, 14530359,
                14530660, 14531696, 14531807, 14534160, 14536630, 14536680, 14536955, 14537006,
                14538468, 14538586, 14538687, 14539803, 14540139, 14543371, 14544027, 14544078,
                14544241, 14544680, 14544770, 14545724, 14546075, 14546816, 14548263, 14548741,
                14549950, 14550932, 14552136, 14552186, 14554461, 14554512, 14557693, 14558744,
                14558851, 14559147, 14559919, 14560920, 14561990, 14563009, 14563141, 14571946,
                14573925, 14573976, 14576830, 14577678, 14577848, 14578239, 14578526, 14578683,
                14579971, 14584989, 14586915, 14586965, 14590957, 14591008, 14597915, 14602993,
                14604166, 14605678, 14605909, 14606065, 14607918, 14608020, 14608166, 14608327,
                14609551, 14612109, 14613109, 14613160, 14614240, 14614959, 14618112, 14619319,
                14619369, 14620221, 14625792, 14628630, 14629095, 14629145, 14629246, 14629296,
                14629439, 14629749, 14629921, 14632977, 14648307, 14648357, 14648599, 14650323,
                14651602, 14651652, 14654609, 14654711, 14654844, 14655424, 14656429, 14656480,
                14657987, 14667920, 14668057, 14668175, 14668302, 14668352, 14668474, 14669097,
                14669148, 14669346, 14671160, 14671738, 14671789, 14676757, 14676807, 14679106,
                14679157, 14686618, 14690484, 14690534, 14696816, 14696969, 14698614, 14703975,
                14706951, 14707001, 14714148, 14719661, 14720562, 14722576, 14723154, 14724560,
                14724731, 14725593, 14725931, 14725981, 14726032, 14726141, 14726191, 14727967,
                14728018, 14728270, 14729209, 14729409, 14731074, 14732742, 14732843, 14735722,
                14735772, 14740607, 14741560, 14742340, 14742391, 14742497, 14744877, 14745879,
                14747534, 14747584, 14747944, 14753623, 14754944, 14756793, 14756991, 14763541,
                14777317, 14777367, 14777944, 14778356, 14781929, 14783043, 14787918, 14788023,
                14788123, 14788218, 14788370, 14788475, 14795050, 14797679, 14797730, 14813398,
                14814135, 14817091, 14817141, 14817520, 14818228, 14818280, 14818362, 14818463,
                14818708, 14818913, 14819916, 14821680, 14821730, 14821914, 14822032, 14822166,
                14822309, 14822855, 14822969, 14823273, 14823609, 14823660, 14823813, 14824779,
                14829760, 14829810, 14829933, 14830961, 14832504, 14832663, 14837269, 14838075,
                14838125, 14838228, 14839376, 14839499, 14840934, 14842379, 14847043, 14848876,
                14848927, 14849600, 14856344, 14856394, 14856445, 14856495, 14856993, 14857490,
                14860531, 14862357, 14863272, 14864989, 14866664, 14877162, 14877212, 14877455,
                14878610, 14883186, 14883530, 14885363, 14885907, 14886866, 14886916, 14887920,
                14887970, 14888076, 14888383, 14907336, 14907754, 14907909, 14908222, 14908323,
                14909310, 14909412, 14909512, 14915950, 14918014, 14919567, 14920413, 14923058,
                14925389, 14926975, 14929203, 14936115, 14936165, 14936290, 14947551, 14947602,
                14947672, 14948410, 14950501, 14950625, 14950756, 14950806, 14950936, 14951498,
                14951994, 14952756, 14953342, 14953393, 14953657, 14953758, 14953973, 14955148,
                14956966, 14957016, 14958852, 14967101, 14968408, 14975944, 14979314, 14979364,
                14980988, 14981885, 14982005, 14982055, 14990144, 14993665, 14996620, 14999653,
                15002117, 15002168, 15002406, 15002533, 15003050, 15003151, 15005849, 15005899,
                15006404, 15012946, 15012996, 15014931, 15017930, 15017982, 15018105, 15018640,
                15018690, 15019008, 15022879, 15022929, 15022980, 15023101, 15023561, 15023950,
                15024171, 15024222, 15024272, 15024905, 15024982, 15025274, 15025912, 15026193,
                15026929, 15027914, 15028142, 15028192, 15028907, 15029233, 15029338, 15029439,
                15029507, 15029557, 15029608, 15030046, 15030096, 15032253, 15032549, 15032657,
                15032758, 15032916, 15034926, 15034977, 15035966, 15036915, 15036965, 15042115,
                15044698, 15044748, 15044965, 15055426, 15055604, 15055654, 15056612, 15056777,
                15056827, 15056878, 15057000, 15057050, 15057170, 15057341, 15057392, 15057705,
                15057756, 15060120, 15060170, 15060298, 15060630, 15060680, 15060928, 15061469,
                15061570, 15061690, 15062617, 15062667, 15064114, 15064165, 15064573, 15064945,
                15065076, 15065643, 15065865, 15067771, 15067821, 15068553, 15068748, 15069911,
                15070150, 15070317, 15070368, 15073284, 15073653, 15073703, 15073798, 15073849,
                15074302, 15074353, 15075463, 15075564, 15075687, 15075893, 15075943, 15075993,
                15081216, 15081267, 15082251, 15082462, 15084108, 15084297, 15085984, 15086034,
                15086741, 15093019, 15094160, 15099077, 15099939, 15101305, 15101356, 15104160,
                15104261, 15105968, 15119989, 15121269, 15122000, 15123933, 15124229, 15124280,
                15141853, 15142936, 15145111, 15146903, 15148015, 15156817, 15156918, 15157932,
                15158909, 15160164, 15160214, 15160985, 15161140, 15161275, 15161923, 15162962,
                15163012, 15163960, 15164593, 15164951, 15166929, 15173281, 15173562, 15173916,
                15175964, 15178924, 15179075, 15179965, 15184874, 15184976, 15185027, 15185410,
                15189960, 15191965, 15192622, 15192672, 15192970, 15195151, 15195201, 15195251,
                15195302, 15195424, 15195794, 15195844, 15195894, 15197164, 15200753, 15201720,
                15202078, 15202206, 15202592, 15202642, 15202919, 15203974, 15206666, 15207267,
                15208529, 15208580, 15208996, 15209046, 15209097, 15209914, 15210951, 15211940,
                15212827, 15212946, 15213672, 15214970, 15215020, 15216983, 15217086, 15228795,
                15232748, 15241224, 15241781, 15241911, 15242143, 15242193, 15242953, 15245960,
                15246069, 15252620, 15252670, 15254035, 15254961, 15256509, 15257719, 15257903,
                15258962, 15260965, 15267909, 15267960, 15270981, 15273626, 15276223, 15277741,
                15278647, 15278697, 15282609, 15284573, 15284683, 15286087, 15286272, 15289238,
                15289288, 15289391, 15290754, 15300220, 15300320, 15300371, 15300503, 15304942,
                15304992, 15305982, 15306725, 15306776, 15306948, 15307117, 15307977, 15309840,
                15310129, 15310179, 15311630, 15315128, 15316518, 15316940, 15316991, 15327972,
                15328097, 15328242, 15328427, 15332131, 15335012, 15335063, 15335274, 15335326,
                15336223, 15339604, 15339654, 15340651, 15343405, 15343455, 15345772, 15346317,
                15346367, 15346931, 15347950, 15353551, 15353602, 15353722, 15353967, 15354927,
                15355027, 15357227, 15357703, 15369380, 15372710, 15372760, 15375094, 15375307,
                15376166, 15376267, 15376368, 15376808, 15378339, 15378439, 15378663, 15382665,
                15382715, 15382925, 15383749, 15387987, 15388038, 15393166, 15393216, 15397495,
                15399668, 15399719, 15401952, 15403605, 15403655, 15404172, 15404935, 15405792,
                15407170, 15412233, 15413060, 15414913, 15416451, 15418629, 15418979, 15419917,
                15420177, 15423534, 15425149, 15425199, 15425334, 15425677, 15425978, 15427114,
                15427952, 15429958, 15430643, 15430693, 15430985, 15433792, 15442966, 15445456,
                15445578, 15447037, 15447088, 15448096, 15448197, 15448345, 15450000, 15468236,
                15468288, 15468338, 15468448, 15468499, 15468669, 15468770, 15469426, 15469527,
                15469693, 15469743, 15469906, 15470953, 15471003, 15471482, 15471533, 15472368,
                15472658, 15472709, 15482647, 15482697, 15482748, 15482945, 15484933, 15485945,
                15485995, 15486968, 15487983, 15489964, 15490467, 15490517, 15495318, 15495540,
                15499151, 15499926, 15499976, 15503903, 15504667, 15507161, 15508007, 15508491,
                15508542, 15509600, 15509650, 15509701, 15509751, 15509851, 15510354, 15510574,
                15510940, 15516339, 15516389, 15519459, 15519945, 15528995, 15531435, 15531486,
                15532430, 15534915, 15535043, 15535633, 15535907, 15536962, 15538911, 15539988,
                15543424, 15543474, 15552351, 15552951, 15553432, 15553482, 15553948, 15554049,
                15555974, 15556024, 15557960, 15558708, 15559715, 15559817, 15559867, 15559918,
                15562397, 15562447, 15562693, 15563034, 15563085, 15564108, 15564265, 15567704,
                15569024, 15572157, 15573515, 15576379, 15577741, 15579748, 15579798, 15579927,
                15580526, 15580579, 15580701, 15580756, 15581095, 15582143, 15583288, 15583421,
                15584316, 15585773, 15585823, 15586191, 15595701, 15603055, 15603105, 15603156,
                15604942, 15605938, 15610302, 15611464, 15611515, 15611579, 15618944, 15619908,
                15619958, 15620009, 15620059, 15626319, 15627972, 15630632, 15631193, 15631391,
                15631441, 15631616, 15631901, 15632100, 15632285, 15632397, 15632767, 15632998,
                15633140, 15633405, 15634637, 15634687, 15634797, 15634923, 15635384, 15635434,
                15637427, 15638023, 15638124, 15638419, 15640508, 15641383, 15644788, 15644838,
                15647741, 15647791, 15652125, 15652175, 15661923, 15662042, 15662092, 15668470,
                15668571, 15672060, 15672434, 15672909, 15673336, 15688187, 15688238, 15694137,
                15695124, 15695174, 15704530, 15705171, 15712404, 15712601, 15712837, 15713002,
                15713142, 15713267, 15713852, 15715406, 15715719, 15715769, 15719529, 15720765,
                15721252, 15725412, 15731006, 15731611, 15731911, 15733112, 15733163, 15733214,
                15738095, 15738196, 15738296, 15746134, 15746184, 15746234, 15746933, 15757388,
                15757439, 15759412, 15760627, 15761786, 15761836, 15769709, 15769834, 15770903,
                15771065, 15771185, 15771306, 15771444, 15771639, 15771754, 15771855, 15772813,
                15773124, 15773809, 15774796, 15774847, 15774967, 15783444, 15783545, 15787968,
                15788952, 15790414, 15790966, 15791320, 15798137, 15798212, 15803119, 15804245,
                15805242, 15805981, 15806185, 15806235, 15807386, 15807437, 15807487, 15807995,
                15810378, 15810429, 15810521, 15821533, 15821583, 15822581, 15823884, 15825932,
                15827483, 15827583, 15828308, 15831928, 15840836, 15849619, 15850032, 15850082,
                15851074, 15851202, 15851369, 15851502, 15851602, 15851730, 15852037, 15852497,
                15860225, 15860587, 15867926, 15870295, 15872823, 15872941, 15874328, 15874948,
                15875446, 15876451, 15879955, 15890926, 15891657, 15892434, 15892615, 15893738,
                15897112, 15897212, 15907634, 15907735, 15915123, 15915698, 15916127, 15916177,
                15916439, 15916539, 15928052, 15928344, 15928445, 15931100, 15931150, 15934375,
                15935165, 15935266, 15935916, 15948828, 15948879, 15949255, 15949305, 15952577,
                15959245, 15961324, 15961526, 15961639, 15961865, 15961915, 15961966, 15962096,
                15962202, 15962321, 15962447, 15962597, 15962703, 15962840, 15962967, 15963252,
                15963358, 15963481, 15963605, 15963706, 15963931, 15964936, 15965955, 15966919,
                15968920, 15971728, 15974195, 15978740, 15978791, 15987938, 15988283, 15988563,
                15991686, 15991736, 15995212, 15998722, 16000718, 16001917, 16002468, 16014207,
                16016899, 16017184, 16017301, 16017667, 16019936, 16020820, 16020938, 16020989,
                16027564, 16031153, 16032352, 16032453, 16038402, 16038511, 16041917, 16044986,
                16045976, 16046965, 16047016, 16047970, 16048097, 16049253, 16054569, 16054927,
                16055969, 16057185, 16057941, 16060923, 16060974, 16070605, 16070656, 16089950,
                16096655, 16096706, 16096785, 16097451, 16100594, 16100645, 16106735, 16117138,
                16118605, 16118656, 16118945, 16123994, 16124045, 16127922, 16130953, 16134995,
                16135602, 16135652, 16137586, 16148937, 16149414, 16149465, 16149683, 16149733,
                16151748, 16151798, 16166224, 16167385, 16167499, 16167925, 16167976, 16168681,
                16168782, 16168908, 16168958, 16169662, 16170606, 16170728, 16170829, 16170978,
                16171120, 16174448, 16175077, 16175196, 16175335, 16175915, 16176402, 16176846,
                16177052, 16177178, 16180538, 16180588, 16181023, 16181239, 16181389, 16181439,
                16182749, 16183017, 16183155, 16183256, 16186925, 16186976, 16208046, 16208096,
                16210080, 16210130, 16210181, 16211286, 16214915, 16217012, 16217062, 16217113,
                16219042, 16219092, 16222307, 16222708, 16229261, 16229362, 16229563, 16229670,
                16229866, 16233144, 16233663, 16233883, 16234249, 16234570, 16234671, 16234794,
                16234906, 16245125, 16245913, 16245963, 16246711, 16246915, 16247135, 16247306,
                16247356, 16248329, 16249809, 16250324, 16252266, 16252386, 16252487, 16252611,
                16252713, 16252763, 16253459, 16253603, 16253704, 16253814, 16253977, 16254078,
                16254771, 16254890, 16254940, 16256566, 16257053, 16258361, 16259663, 16261144,
                16261194, 16261368, 16261419, 16261469, 16261887, 16262341, 16262392, 16262981,
                16263031, 16263428, 16263857, 16264080, 16264866, 16264980, 16265118, 16265368,
                16265418, 16265816, 16265866, 16267579, 16267680, 16277296, 16278539, 16278589,
                16278639, 16279152, 16279254, 16279400, 16279507, 16279558, 16280831, 16280882,
                16280992, 16282200, 16282522, 16282601, 16282780, 16283970, 16284020, 16284568,
                16284670, 16284775, 16287966, 16288966, 16289016, 16289089, 16289596, 16289697,
                16289820, 16289870, 16290400, 16290808, 16290858, 16290994, 16291287, 16291511,
                16294416, 16294466, 16294517, 16294567, 16295001, 16295178, 16295279, 16295789,
                16295840, 16296290, 16296525, 16296626, 16296797, 16296919, 16297032, 16297638,
                16297749, 16297920, 16298640, 16298690, 16298784, 16299030, 16299292, 16299657,
                16300693, 16300806, 16301256, 16302859, 16303824, 16303989, 16307079, 16312518,
                16312712, 16313020, 16313239, 16313472, 16313669, 16314897, 16315061, 16317299,
                16318050, 16318123, 16319256, 16320926, 16321046, 16321146, 16321242, 16321492,
                16321750, 16321884, 16322043, 16322093, 16322295, 16322538, 16322638, 16323037,
                16323943, 16324935, 16325036, 16325138, 16327649, 16327973, 16329963, 16340593,
                16340706, 16341142, 16341193, 16347497, 16347549, 16347600, 16347753, 16348057,
                16349000, 16349051, 16349170, 16349339, 16349439, 16349502, 16349619, 16349814,
                16350021, 16350180, 16350230, 16350280, 16350381, 16350431, 16351053, 16351202,
                16351303, 16351428, 16351934, 16352194, 16352305, 16352428, 16352553, 16352955,
                16354030, 16354551, 16354601, 16355058, 16355182, 16355283, 16355407, 16355551,
                16358157, 16358270, 16359389, 16359440, 16359901, 16360044, 16360153, 16360267,
                16361133, 16361276, 16361707, 16361810, 16361912, 16362077, 16364535, 16364699,
                16364749, 16364800, 16368880, 16368990, 16371573, 16371920, 16372052, 16376298,
                16376349, 16379916, 16386082, 16386133, 16393663, 16393713, 16393920, 16393971,
                16394131, 16394253, 16394681, 16394782, 16394920, 16398645, 16398862, 16398912,
                16399037, 16408056, 16408107, 16410951, 16411002, 16411122, 16411234, 16412045,
                16414359, 16415098, 16415248, 16415527, 16415751, 16415801, 16416392, 16416513,
                16416564, 16416614, 16417371, 16417543, 16417683, 16417739, 16417867, 16418013,
                16418306, 16418357, 16419310, 16419413, 16419573, 16419674, 16419775, 16425528,
                16425579, 16426534, 16426671, 16426779, 16426880, 16426994, 16427138, 16427248,
                16427510, 16429653, 16431059, 16431110, 16431248, 16431693, 16432144, 16432195,
                16432245, 16433907, 16434972, 16435173, 16436590, 16436640, 16440928, 16441051,
                16441162, 16441925, 16442935, 16443974, 16444937, 16445061, 16445569, 16445620,
                16445933, 16446413, 16446876, 16447532, 16449919, 16450931, 16451986, 16452037,
                16452985, 16454406, 16455158, 16459163, 16461916, 16463801, 16463912, 16464013,
                16465029, 16465400, 16466235, 16466285, 16467000, 16467186, 16468059, 16468527,
                16468578, 16468977, 16469280, 16469611, 16469719, 16469891, 16470958, 16471408,
                16471537, 16472467, 16472517, 16473020, 16473121, 16474472, 16475025, 16475823,
                16476203, 16477298, 16481996, 16482046, 16483567, 16483974, 16484150, 16484200,
                16491635, 16493145, 16499007, 16499640, 16500358, 16503016, 16503461, 16504970,
                16506789, 16506982, 16507732, 16508225, 16508439, 16508653, 16509186, 16517844,
                16517895, 16522431, 16522942, 16523326, 16523662, 16524193, 16527273, 16527324,
                16527446, 16527941, 16527991, 16529657, 16532087, 16545671, 16545722, 16546703,
                16546753, 16558464, 16559420, 16559470, 16560944, 16565052, 16565780, 16581127,
                16581177, 16581228, 16581278, 16582016, 16582911, 16582961, 16583658, 16583708,
                16584411, 16584512, 16584643, 16584694, 16584744, 16584918, 16587211, 16587262,
                16587442, 16587492, 16587563, 16587613, 16587982, 16593569, 16596033, 16596083,
                16596184, 16597140, 16600083, 16600566, 16600616, 16600963, 16601797, 16601848,
                16601924, 16602609, 16603103, 16622700, 16622866, 16622916, 16623300, 16623429,
                16623480, 16624028, 16624914, 16625455, 16636181, 16640624, 16640674, 16644229,
                16651179, 16654511, 16655648, 16655698, 16656163, 16658476, 16658662, 16659629,
                16659680, 16660227, 16663838, 16664287, 16664429, 16664479, 16667881, 16672339,
                16672391, 16672625, 16672676, 16673035, 16673362, 16673467, 16673625, 16674982,
                16676595, 16676645, 16676839, 16677239, 16677368, 16677469, 16678826, 16678876,
                16678926, 16679068, 16679118, 16679169, 16679219, 16679299, 16679400, 16679543,
                16679926, 16679976, 16680113, 16680214, 16680335, 16680458, 16681223, 16681273,
                16683132, 16693668, 16693768, 16693928, 16697121, 16697172, 16697369, 16697769,
                16697951, 16698489, 16698908, 16699526, 16699627, 16699748, 16699869, 16700040,
                16700141, 16717311, 16717361, 16717414, 16719402, 16719452, 16720732, 16722979,
                16727571, 16727622, 16727940, 16730022, 16730072, 16730467, 16732928, 16732979,
                16736939, 16738907, 16739996, 16744169, 16744270, 16751368, 16759565, 16759615,
                16760179, 16763550, 16763953, 16764003, 16769361, 16769499, 16775385, 16785651,
                16798809, 16801034, 16803955, 16810587, 16811278, 16811329, 16812994, 16818962,
                16819012, 16819683, 16828188, 16831232, 16831282, 16831969, 16832311, 16834038,
                16834088, 16834279, 16834889, 16834939, 16835957, 16836007, 16839981, 16840908,
                16841079, 16841198, 16841312, 16841562, 16841663, 16841808, 16841958, 16842009,
                16842121, 16846930, 16850921, 16857181, 16857890, 16863734, 16863785, 16863879,
                16865226, 16872994, 16873044, 16874000, 16874875, 16874925, 16875033, 16875551,
                16875601, 16875699, 16875800, 16876736, 16876787, 16880254, 16881211, 16887466,
                16887977, 16888028, 16889254, 16889304, 16891599, 16891881, 16895950, 16898695,
                16898745, 16899946, 16900634, 16901668, 16901718, 16902658, 16902708, 16902896,
                16903518, 16904403, 16904929, 16905078, 16906303, 16906933, 16910577, 16911145,
                16919352, 16927164, 16927214, 16933213, 16933263, 16935231, 16935282, 16937053,
                16937153, 16941493, 16941544, 16942289, 16942340, 16942724, 16942831, 16942985,
                16952199, 16952300, 16954971, 16961012, 16964768, 16965912, 16965963, 16969917,
                16970922, 16970972, 16975161, 16978212, 16978262, 16983197, 16987282, 16987909,
                16989036, 16989244, 16991047, 16991229, 16995967, 16996538, 16996930, 17005826,
                17010110, 17010211, 17011158, 17016268, 17018929, 17019311, 17019362, 17019479,
                17019730, 17019780, 17019830, 17023040, 17023141, 17023380, 17023431, 17037730,
                17045591, 17045691, 17046461, 17046562, 17051033, 17057231, 17057749, 17060235,
                17060971, 17062531, 17062581, 17065944, 17067925, 17068041, 17068513, 17068563,
                17070997, 17076635, 17076685, 17076944, 17077914, 17080332, 17086731, 17087286,
                17092393, 17092928, 17092979, 17094456, 17094507, 17095950, 17096204, 17101152,
                17105131, 17105432, 17105878, 17107156, 17107207, 17110008, 17110647, 17110698,
                17118928, 17119952, 17126003, 17128006, 17128263, 17131033, 17131134, 17131867,
                17132238, 17134507, 17143054, 17144062, 17144112, 17146252, 17150711, 17153519,
                17153569, 17159449, 17159600, 17168164, 17170276, 17170326, 17170733, 17173310,
                17173431, 17176931, 17177116, 17177724, 17179961, 17180011, 17180062, 17180205,
                17189218, 17189268, 17189499, 17189735, 17192536, 17193263, 17194358, 17194409,
                17195254, 17195965, 17196073, 17199360, 17201389, 17201976, 17203063, 17204252,
                17205373, 17205518, 17225744, 17229197, 17231827, 17233356, 17233969, 17234535,
                17234992, 17235042, 17235970, 17236071, 17236987, 17237961, 17238062, 17238263,
                17239296, 17239397, 17240304, 17241449, 17241499, 17245252, 17247986, 17248036,
                17248949, 17249000, 17250254, 17253124, 17253510, 17256728, 17257491, 17259204,
                17260209, 17264659, 17264709, 17266890, 17267544, 17268555, 17273839, 17283120,
                17284576, 17284627, 17285458, 17285508, 17285632, 17285767, 17285817, 17288807,
                17293345, 17293921, 17294070, 17294837, 17295174, 17295224, 17299794, 17299935,
                17301967, 17302018, 17302664, 17302989, 17315325, 17315780, 17317213, 17318694,
                17318745, 17320413, 17320463, 17325566, 17325617, 17325717, 17325790, 17325891,
                17326159, 17326933, 17329078, 17329458, 17332270, 17332321, 17334177, 17334643,
                17334960, 17335250, 17335672, 17335836, 17340322, 17342166, 17342216, 17342913,
                17346253, 17346916, 17354643, 17354694, 17354744, 17354979, 17355526, 17355926,
                17356264, 17356315, 17357236, 17358036, 17359181, 17359412, 17361620, 17361775,
                17367919, 17367970, 17370544, 17373324, 17376196, 17376247, 17376970, 17378716,
                17379913, 17384411, 17385848, 17388144, 17391845, 17392555, 17392705, 17399964,
                17403278, 17403328, 17403935, 17403985, 17404288, 17404432, 17404482, 17404888,
                17404993, 17405043, 17405601, 17405896, 17406848, 17410170, 17410221, 17410507,
                17410948, 17415941, 17419391, 17421616, 17421666, 17426703, 17427956, 17428007,
                17428984, 17429915, 17438941, 17439208, 17439258, 17441275, 17441388, 17441902,
                17443618, 17443668, 17449333, 17458277, 17459982, 17461656, 17461707, 17461939,
                17463967, 17464231, 17471851, 17472736, 17475927, 17476524, 17476575, 17476937,
                17477915, 17477966, 17478941, 17480894, 17482749, 17482799, 17484875, 17497564,
                17499131, 17499181, 17500223, 17500905, 17500955, 17501687, 17501738, 17502849,
                17502951, 17503793, 17503944, 17506673, 17506929, 17508195, 17508247, 17508298,
                17509408, 17516489, 17528397, 17531658, 17531709, 17531759, 17534565, 17534616,
                17535747, 17535797, 17535847, 17544427, 17548001, 17549909, 17550915, 17551107,
                17551799, 17559419, 17560088, 17560931, 17561237, 17561342, 17561923, 17562206,
                17562256, 17562927, 17562977, 17568944, 17569952, 17570939, 17572414, 17573006,
                17574951, 17575939, 17576917, 17579492, 17579915, 17580244, 17580295, 17581006,
                17582950, 17586081, 17587030, 17587460, 17588938, 17588988, 17592964, 17593014,
                17595503, 17604978, 17607939, 17608039, 17609044, 17609096, 17609966, 17610959,
                17611010, 17612458, 17619726, 17620117, 17626017, 17627433, 17627621, 17639668,
                17639718, 17640592, 17640721, 17641321, 17641687, 17643115, 17643166, 17643545,
                17647355, 17647405, 17648928, 17650926, 17651891, 17653237, 17660664, 17660714,
                17660994, 17661247, 17661397, 17661598, 17664929, 17665926, 17666115, 17666166,
                17666704, 17666973, 17667930, 17667982, 17669027, 17669078, 17670618, 17672471,
                17672522, 17672722, 17673440, 17673721, 17678938, 17678989, 17685447, 17685800,
                17688141, 17688192, 17688967, 17689182, 17689390, 17689930, 17691675, 17691937,
                17692340, 17693130, 17693964, 17694014, 17694988, 17695968, 17696018, 17696711,
                17697157, 17699580, 17702954, 17706022, 17706501, 17706746, 17707415, 17708364,
                17708414, 17709374, 17710293, 17710394, 17710967, 17711256, 17711307, 17711625,
                17712266, 17712391, 17712492, 17712784, 17712835, 17714947, 17715681, 17720128,
                17720178, 17720923, 17721247, 17722005, 17722922, 17725302, 17727928, 17727979,
                17743352, 17745284, 17745334, 17745450, 17745501, 17745622, 17745813, 17745984,
                17747921, 17751963, 17758972, 17775775, 17776111, 17776161, 17776212, 17777020,
                17777207, 17777404, 17777513, 17777950, 17778662, 17778775, 17780640, 17785265,
                17788002, 17788052, 17788103, 17789300, 17789350, 17789400, 17790681, 17792217,
                17795474, 17809651, 17819983, 17823014, 17824497, 17824548, 17824990, 17825887,
                17825937, 17826457, 17828394, 17832318, 17832368, 17832418, 17834930, 17835453,
                17837614, 17838951, 17841995, 17843940, 17844339, 17845297, 17845434, 17847236,
                17847337, 17847926, 17847976, 17851002, 17858319, 17858919, 17858970, 17865758,
                17865808, 17865859, 17869794, 17870824, 17871154, 17872659, 17873118, 17873661,
                17874383, 17874434, 17876924, 17877409, 17878786, 17879678, 17879778, 17880559,
                17880855, 17880906, 17881652, 17882069, 17882319, 17882639, 17883414, 17884153,
                17884203, 17884904, 17897954, 17900261, 17900361, 17900823, 17900924, 17901024,
                17901141, 17901191, 17902062, 17902236, 17902819, 17903400, 17903450, 17904931,
                17904982, 17907077, 17907934, 17907985, 17910493, 17911499, 17915284, 17915334,
                17915403, 17916543, 17916593, 17918542, 17920769, 17922708, 17922825, 17922884,
                17922984, 17926275, 17927249, 17928337, 17930052, 17930798, 17931401, 17931452,
                17932855, 17932906, 17932956, 17934066, 17934708, 17935033, 17936445, 17936495,
                17938807, 17952206, 17952256, 17952307, 17952423, 17954289, 17956146, 17956197,
                17958203, 17958253, 17964506, 17966859, 17968002, 17968105, 17968278, 17968390,
                17968541, 17968642, 17968692, 17968742, 17968873, 17972483, 17972533, 17972784,
                17978126, 17980576, 17981208, 17981830, 17982406, 17985013, 17985115, 18000008,
                18002679, 18002729, 18002810, 18003409, 18003510, 18004103, 18004214, 18004654,
                18004907, 18005197, 18005583, 18005906, 18005957, 18007032, 18011240, 18011291,
                18011366, 18011572, 18011628, 18022707, 18022943, 18022993, 18026056, 18026109,
                18045102, 18045152, 18045203, 18045349, 18045399, 18045519, 18046172, 18046753,
                18047318, 18047368, 18047925, 18047976, 18048522, 18048893, 18048944, 18052741,
                18053334, 18053384, 18059824, 18068423, 18068555, 18068605, 18070914, 18072050,
                18072101, 18072390, 18073602, 18074659, 18077500, 18077551, 18092250, 18096921,
                18099854, 18099905, 18101005, 18101207, 18101257, 18104892, 18106515, 18108233,
                18108283, 18111272, 18112429, 18112983, 18117323, 18118911, 18119067, 18119117,
                18119976, 18121007, 18122359, 18122509, 18122559, 18128176, 18128457, 18128749,
                18128799, 18129391, 18132276, 18132495, 18132644, 18133374, 18133696, 18134051,
                18136086, 18140326, 18140497, 18140548, 18140598, 18140669, 18143618, 18144440,
                18144974, 18145741, 18145792, 18146748, 18146798, 18147369, 18147498, 18147660,
                18147711, 18147814, 18147864, 18148792, 18149171, 18149929, 18149979, 18150790,
                18152696, 18152747, 18153177, 18153701, 18154530, 18154644, 18154694, 18154950,
                18155557, 18155607, 18155950, 18156595, 18157938, 18158869, 18158970, 18159197,
                18159247, 18159702, 18159926, 18160281, 18160478, 18160909, 18160959, 18161346,
                18161397, 18162083, 18162873, 18168725, 18169606, 18169757, 18171274, 18171952,
                18172416, 18172520, 18172570, 18173325, 18173494, 18178334, 18181895, 18183942,
                18184094, 18184145, 18184948, 18185465, 18185991, 18186988, 18187039, 18187742,
                18187942, 18187992, 18188576, 18189637, 18191399, 18191450, 18193518, 18194031,
                18194361, 18196958, 18197415, 18197940, 18199745, 18199960, 18200985, 18206648,
                18207968, 18216363, 18217006, 18217317, 18217368, 18217506, 18217607, 18217837,
                18217951, 18218001, 18218232, 18220627, 18220949, 18220999, 18222003, 18223285,
                18223560, 18223610, 18223958, 18224311, 18224361, 18224591, 18224691, 18224742,
                18225923, 18231141, 18231503, 18236311, 18236548, 18236738, 18238044, 18238486,
                18238589, 18243392, 18243686, 18243736, 18243995, 18244166, 18244975, 18245197,
                18245247, 18245370, 18246006, 18246962, 18247518, 18247569, 18247795, 18247924,
                18247974, 18248398, 18248711, 18249389, 18249954, 18250924, 18250974, 18251976,
                18256370, 18259268, 18260774, 18261696, 18261797, 18261917, 18264909, 18265929,
                18265980, 18266317, 18267977, 18268027, 18268100, 18268802, 18268924, 18268974,
                18269898, 18269949, 18270261, 18272185, 18275207, 18275257, 18275743, 18275793,
                18275933, 18276912, 18277796, 18277847, 18277920, 18293017, 18293533, 18293657,
                18293758, 18294347, 18295353, 18295916, 18298853, 18298903, 18299398, 18300093,
                18300244, 18302729, 18304394, 18314172, 18316865, 18316915, 18318034, 18320134,
                18320184, 18320234, 18320284, 18321330, 18321380, 18321442, 18321600, 18321709,
                18322426, 18322476, 18322739, 18323036, 18324209, 18325944, 18327935, 18327986,
                18328036, 18328087, 18328152, 18328253, 18328379, 18328614, 18328845, 18328960,
                18329641, 18329692, 18329848, 18329995, 18330562, 18330613, 18332295, 18334669,
                18335288, 18335338, 18335389, 18335545, 18335646, 18336155, 18336479, 18336637,
                18337936, 18338950, 18339000, 18339427, 18339909, 18339959, 18340418, 18341802,
                18345071, 18345121, 18347058, 18347179, 18347230, 18347311, 18347361, 18357019,
                18358944, 18360953, 18361003, 18362003, 18363480, 18363530, 18363957, 18367018,
                18368545, 18371109, 18371793, 18371843, 18371989, 18372306, 18372358, 18372938,
                18374876, 18380194, 18380245, 18380295, 18384936, 18385050, 18385101, 18387270,
                18387947, 18387998, 18388048, 18388192, 18388302, 18389632, 18392156, 18392206,
                18394185, 18394396, 18394528, 18394648, 18394759, 18394931, 18395032, 18395301,
                18395401, 18396135, 18397229, 18397665, 18397715, 18398181, 18398687, 18399185,
                18399700, 18400261, 18400687, 18401146, 18402621, 18403090, 18403191, 18403678,
                18404657, 18405114, 18405165, 18409500, 18409614, 18409749, 18413260, 18414627,
                18416527, 18416639, 18418619, 18418721, 18419079, 18420131, 18420664, 18420715,
                18421365, 18421666, 18421766, 18421817, 18422280, 18422380, 18422464, 18422515,
                18423310, 18425781, 18429248, 18429908, 18431909, 18432444, 18434106, 18434864,
                18436902, 18439988, 18440039, 18440271, 18440342, 18440577, 18440677, 18440728,
                18441080, 18441379, 18441429, 18441480, 18441962, 18442016, 18442117, 18442989,
                18443039, 18443089, 18443545, 18444938, 18444988, 18445093, 18445206, 18446616,
                18449313, 18453586, 18453637, 18454970, 18455021, 18455174, 18459816, 18459867,
                18466427, 18467481, 18467531, 18467768, 18467818, 18467869, 18467973, 18468105,
                18468155, 18468328, 18468378, 18468788, 18471171, 18476058, 18480096, 18480260,
                18481821, 18484361, 18484412, 18486183, 18487685, 18487735, 18487949, 18488154,
                18488430, 18490951, 18491001, 18491303, 18492172, 18493638, 18493688, 18496009,
                18496059, 18497782, 18497833, 18497913, 18498047, 18498097, 18498147, 18498248,
                18498388, 18498439, 18499099, 18499149, 18499625, 18499676, 18501553, 18501678,
                18501855, 18501971, 18504426, 18507979, 18510252, 18514629, 18516136, 18516186,
                18516247, 18517121, 18518673, 18519485, 18520476, 18532000, 18532050, 18532382,
                18533021, 18533072, 18535293, 18535394, 18535446, 18535927, 18536136, 18537231,
                18537283, 18537590, 18537707, 18539642, 18539693, 18539967, 18540185, 18540687,
                18540823, 18540968, 18541093, 18541144, 18541235, 18542032, 18542967, 18545163,
                18545213, 18545675, 18545936, 18546399, 18546943, 18547948, 18548550, 18548939,
                18548990, 18549901, 18549999, 18552645, 18552696, 18557277, 18558363, 18558588,
                18558638, 18558740, 18558952, 18560920, 18560970, 18561032, 18561177, 18561278,
                18564595, 18567988, 18568947, 18571918, 18571968, 18572208, 18572535, 18572586,
                18573740, 18574159, 18574209, 18574785, 18574835, 18574983, 18575747, 18575798,
                18577056, 18577515, 18577894, 18578201, 18578409, 18581652, 18581747, 18582391,
                18583376, 18583783, 18583834, 18583906, 18584160, 18584286, 18584960, 18585438,
                18586104, 18586850, 18588520, 18588919, 18589912, 18590908, 18591089, 18592571,
                18595395, 18596386, 18598332, 18600528, 18600948, 18601504, 18601837, 18601888,
                18601954, 18602110, 18602160, 18602997, 18603369, 18606946, 18607443, 18607498,
                18607610, 18607663, 18610087, 18610915, 18624308, 18624358, 18624409, 18638182,
                18638233, 18641075, 18641127, 18641321, 18645507, 18645558, 18650535, 18650898,
                18651731, 18651881, 18652008, 18652142, 18652303, 18658720, 18659353, 18666464,
                18669258, 18669562, 18671297, 18673242, 18673597, 18673698, 18673834, 18673972,
                18678009, 18678059, 18679503, 18682862, 18683135, 18683185, 18683236, 18692324,
                18693565, 18693616, 18699209, 18699259, 18700792, 18701546, 18702153, 18702611,
                18702662, 18707273, 18709687, 18710918, 18710982, 18711083, 18711351, 18711786,
                18712117, 18712173, 18714057, 18715382, 18715483, 18715553, 18715745, 18716982,
                18717329, 18717380, 18717430, 18718839, 18718889, 18720440, 18721121, 18721714,
                18722815, 18722865, 18727029, 18731973, 18732444, 18734870, 18735488, 18735626,
                18735677, 18742033, 18742134, 18742954, 18747943, 18750451, 18750501, 18750649,
                18750700, 18750811, 18750862, 18751213, 18751713, 18751834, 18751884, 18754179,
                18755932, 18757147, 18760301, 18765232, 18765333, 18765454, 18786581, 18790976,
                18797005, 18802045, 18802095, 18802167, 18804003, 18808002, 18808102, 18808524,
                18812975, 18830091, 18830616, 18837733, 18838636, 18838687, 18841982, 18842194,
                18845276, 18845914, 18845965, 18849564, 18849614, 18855235, 18857209, 18861928,
                18866983, 18870708, 18870774, 18870889, 18870990, 18871112, 18871248, 18876295,
                18880973, 18881093, 18881143, 18881193, 18881893, 18882109, 18882285, 18882335,
                18882452, 18882502, 18882553, 18883535, 18883586, 18884854, 18884905, 18884955,
                18885112, 18885163, 18888447, 18890792, 18890843, 18891444, 18891880, 18893658,
                18893708, 18898030, 18898159, 18899135, 18899235, 18901151, 18904987, 18905767,
                18906467, 18906627, 18908323, 18909280, 18909331, 18910786, 18910837, 18910957,
                18911094, 18911346, 18917759, 18917809, 18921138, 18921189, 18924025, 18924330,
                18926124, 18927497, 18927827, 18927939, 18927990, 18933464, 18934591, 18934692,
                18934742, 18937473, 18937574, 18937677, 18938666, 18938769, 18939857, 18939907,
                18948233, 18948404, 18949376, 18952450, 18953367, 18953418, 18954781, 18956804,
                18956854, 18957582, 18959874, 18964946, 18964997, 18965332, 18965824, 18965875,
                18967474, 18967637, 18968356, 18971591, 18971692, 18972711, 18972761, 18979921,
                18982435, 18982485, 18982605, 18982657, 18983389, 18984074, 18986285, 18986365,
                18987170, 18987949, 18988068, 18988176, 18988226, 18990282, 18993775, 18993920,
                18994355, 18994493, 18995796, 18995846, 19005608, 19005658, 19005709, 19006604,
                19008148, 19008260, 19008667, 19009126, 19009176, 19009569, 19010881, 19010992,
                19012884, 19014008, 19015055, 19015958, 19016008, 19016920, 19019911, 19020135,
                19020186, 19022261, 19022362, 19022775, 19023797, 19024066, 19026042, 19026093,
                19026143, 19026981, 19027987, 19028037, 19029115, 19032988, 19041180, 19045510,
                19045561, 19046524, 19046625, 19047223, 19047273, 19047365, 19047466, 19047600,
                19049753, 19054409, 19054955, 19061961, 19065883, 19065984, 19066120, 19066243,
                19068720, 19068891, 19068941, 19081599, 19081700, 19081803, 19081922, 19082023,
                19082191, 19082241, 19082298, 19082912, 19082962, 19083560, 19086696, 19086747,
                19086853, 19088240, 19093023, 19097333, 19097434, 19097894, 19097944, 19104252,
                19106406, 19107987, 19108841, 19109935, 19110059, 19115434, 19118661, 19120570,
                19120940, 19120991, 19122028, 19122079, 19122924, 19123025, 19135873, 19140968,
                19141018, 19141592, 19142190, 19143286, 19143390, 19143521, 19146145, 19146195,
                19146804, 19147089, 19147957, 19148399, 19149399, 19155521, 19155571, 19156072,
                19167953, 19169424, 19171998, 19172050, 19176116, 19176435, 19176485, 19181300,
                19181400, 19181951, 19182439, 19182731, 19182903, 19182954, 19183061, 19185930,
                19188025, 19189784, 19189834, 19199342, 19201759, 19201977, 19202831, 19203147,
                19203198, 19203392, 19203927, 19204028, 19204084, 19204490, 19206932, 19208954,
                19210763, 19210818, 19216875, 19217110, 19217160, 19217652, 19218139, 19218190,
                19218448, 19218548, 19218651, 19219286, 19219626, 19220167, 19220448, 19220499,
                19220613, 19221934, 19221993, 19226267, 19226653, 19226703, 19226899, 19226949,
                19227949, 19228058, 19228130, 19228281, 19228502, 19228553, 19228966, 19229066,
                19229274, 19230738, 19230910, 19231030, 19231227, 19231278, 19232491, 19232542,
                19232593, 19233023, 19234791, 19235528, 19235578, 19237328, 19237379, 19237499,
                19238959, 19240403, 19241551, 19241652, 19243400, 19243520, 19244717, 19244827,
                19244928, 19245074, 19248157, 19248514, 19259347, 19259960, 19260011, 19262641,
                19262692, 19264768, 19264818, 19266438, 19271366, 19271542, 19271960, 19274174,
                19277894, 19287908, 19287958, 19288100, 19288151, 19288250, 19288403, 19296909,
                19297709, 19310752, 19310802, 19315269, 19315834, 19316399, 19316932, 19317681,
                19318513, 19320542, 19320592, 19320643, 19321239, 19322149, 19327968, 19328651,
                19329299, 19329400, 19335790, 19339450, 19339551, 19339602, 19340478, 19347949,
                19348162, 19348264, 19348365, 19348469, 19348570, 19348674, 19349568, 19349620,
                19349827, 19350217, 19357197, 19360183, 19362087, 19363390, 19363441, 19370248,
                19370900, 19370950, 19371190, 19371610, 19373218, 19373690, 19374685, 19375130,
                19381728, 19381828, 19381980, 19382080, 19382552, 19383987, 19385006, 19385501,
                19387440, 19387802, 19395152, 19395637, 19395688, 19398043, 19398164, 19403523,
                19403573, 19403624, 19403951, 19404954, 19423940, 19427588, 19427639, 19428143,
                19429630, 19429681, 19429758, 19434949, 19435442, 19440467, 19440568, 19443907,
                19454293, 19454344, 19454806, 19455301, 19460313, 19460364, 19461031, 19463201,
                19465969, 19466715, 19467103, 19467203, 19467555, 19467606, 19468162, 19470005,
                19473903, 19478602, 19480052, 19480103, 19480555, 19481026, 19485280, 19485381,
                19485499, 19487157, 19491845, 19492203, 19492579, 19492800, 19493316, 19493367,
                19504795, 19505948, 19509898, 19510188, 19510397, 19514870, 19514967, 19516016,
                19516887, 19516938, 19517145, 19517195, 19517246, 19520988, 19521526, 19521627,
                19523225, 19523607, 19523721, 19523771, 19524499, 19528006, 19528057, 19528781,
                19530958, 19532428, 19532478, 19539565, 19540916, 19547028, 19549819, 19549869,
                19562790, 19563623, 19568177, 19570955, 19571005, 19576035, 19581873, 19581924,
                19582110, 19582160, 19585185, 19585235, 19585345, 19585935, 19587924, 19588317,
                19589314, 19595926, 19595976, 19596634, 19597006, 19603448, 19605838, 19606804,
                19611000, 19611051, 19611168, 19616861, 19616911, 19617186, 19619393, 19619927,
                19621270, 19621320, 19621937, 19623433, 19623487, 19623555, 19627159, 19627210,
                19627963, 19628442, 19628757, 19630159, 19632374, 19634153, 19635155, 19635205,
                19635952, 19637028, 19638197, 19639444, 19648909, 19648959, 19649075, 19650098,
                19650576, 19651369, 19651420, 19651660, 19652698, 19653907, 19654505, 19654969,
                19657499, 19658003, 19658054, 19658104, 19658155, 19658205, 19658481, 19658738,
                19658788, 19658839, 19659164, 19659452, 19659579, 19660661, 19662703, 19663147,
                19664981, 19666221, 19667411, 19667900, 19667950, 19669057, 19670722, 19670772,
                19671293, 19672097, 19672480, 19674674, 19676647, 19676697, 19687920, 19687970,
                19688082, 19688134, 19689393, 19690813, 19691157, 19692064, 19692484, 19698627,
                19698677, 19698958, 19701149, 19709844, 19712830, 19712960, 19714055, 19714106,
                19718063, 19718206, 19718256, 19722111, 19722161, 19727453, 19727504, 19727554,
                19728003, 19728402, 19729209, 19729260, 19732682, 19735473, 19736541, 19736591,
                19736641, 19738797, 19738847, 19739906, 19739957, 19740061, 19742986, 19743088,
                19743189, 19744150, 19744901, 19746231, 19746333, 19746434, 19746488, 19746539,
                19746640, 19746690, 19748542, 19749486, 19750086, 19750136, 19750200, 19750301,
                19752400, 19752451, 19752559, 19752660, 19753293, 19753344, 19753686, 19756275,
                19756945, 19758415, 19758466, 19759161, 19759807, 19759908, 19760607, 19760817,
                19762244, 19762390, 19762667, 19763690, 19764181, 19764438, 19764596, 19764696,
                19767660, 19767711, 19767936, 19768037, 19769649, 19770096, 19770147, 19770406,
                19770566, 19771381, 19772128, 19773207, 19773257, 19773307, 19775147, 19776134,
                19777249, 19778137, 19778243, 19779243, 19779294, 19789487, 19789537, 19789594,
                19790004, 19795394, 19795444, 19797194, 19797508, 19797559, 19799988, 19800868,
                19800918, 19800968, 19801850, 19801901, 19802211, 19802599, 19802649, 19802700,
                19802914, 19802965, 19803935, 19805292, 19805667, 19806959, 19807387, 19807523,
                19811272, 19811323, 19813619, 19813670, 19814821, 19814926, 19814976, 19815675,
                19820862, 19824922, 19826218, 19827119, 19828015, 19828065, 19828342, 19828392,
                19828443, 19828606, 19828927, 19830083, 19830875, 19831186, 19831237, 19832649,
                19832835, 19834543, 19835641, 19836126, 19838138, 19838641, 19838691, 19839543,
                19840172, 19840624, 19840675, 19844183, 19846148, 19846661, 19846711, 19847179,
                19850100, 19851711, 19854348, 19854472, 19857542, 19858056, 19858106, 19858609,
                19859147, 19859373, 19859423, 19860206, 19861094, 19862135, 19862563, 19866469,
                19866520, 19866630, 19866681, 19868664, 19869083, 19869134, 19881809, 19881859,
                19883061, 19883771, 19883823, 19884397, 19885142, 19885192, 19885919, 19887940,
                19887990, 19888041, 19894955, 19895526, 19895576, 19897617, 19903510, 19912602,
                19913524, 19913956, 19914007, 19916088, 19917004, 19919626, 19921139, 19923148,
                19947923, 19947973, 19954516, 19954617, 19954920, 19955172, 19957801, 19957852,
                19958128, 19958845, 19959321, 19961422, 19962445, 19964765, 19964921, 19965487,
                19965696, 19966926, 19967110, 19967161, 19967657, 19967934, 19968080, 19968456,
                19968506, 19968629, 19968680, 19968836, 19971604, 19971708, 19972604, 19972704,
                19972972, 19974389, 19974442, 19974974, 19975926, 19976051, 19976156, 19977096,
                19977196, 19978623, 19979687, 19980264, 19980600, 19982143, 19982193, 19982670,
                19982954, 19983368, 19983647, 19983698, 19983816, 19984867, 19984983, 19985921,
                19986554, 19986604, 19986654, 19986782, 19992455, 19993309, 19993955, 19998870,
                19999372, 19999991, 20000170, 20000270, 20009325, 20012769, 20012820, 20012920,
                20013093, 20013361, 20014297, 20016011, 20016417, 20016885, 20018486, 20018889,
                20018990, 20019721, 20020080, 20020182, 20020404, 20020551, 20020729, 20021940,
                20022070, 20022121, 20023138, 20023189, 20025838, 20026743, 20026870, 20027165,
                20027553, 20028616, 20033870, 20036920, 20038330, 20038433, 20038692, 20038942,
                20040928, 20042554, 20042604, 20043320, 20043371, 20044552, 20046365, 20046415,
                20046932, 20052116, 20058059, 20059927, 20060625, 20061499, 20061600, 20061650,
                20062382, 20064307, 20066205, 20066717, 20076886, 20076947, 20077918, 20078425,
                20084944, 20086934, 20089346, 20089615, 20097152, 20101113, 20102430, 20112302,
                20112352, 20121433, 20121749, 20121849, 20122932, 20122983, 20123033, 20123083,
                20126135, 20126538, 20126638, 20127946, 20134598, 20134699, 20135422, 20135472,
                20135916, 20136906, 20137910, 20138203, 20138601, 20139004, 20139054, 20140191,
                20140914, 20142009, 20148343, 20149919, 20150916, 20151967, 20153589, 20153640,
                20153957, 20154007, 20155633, 20159169, 20164998, 20168713, 20168763, 20170209,
                20170479, 20172822, 20172952, 20173214, 20174184, 20174234, 20174584, 20174669,
                20175023, 20175074, 20175772, 20176119, 20176170, 20176517, 20176617, 20176668,
                20178159, 20178232, 20180384, 20181672, 20182100, 20183220, 20184161, 20185436,
                20185803, 20185853, 20186396, 20186566, 20186627, 20187098, 20187148, 20187497,
                20187607, 20187992, 20189015, 20189119, 20189171, 20191138, 20191702, 20193336,
                20193387, 20194114, 20195319, 20195369, 20201174, 20202719, 20203060, 20203717,
                20203767, 20204134, 20204185, 20204660, 20205160, 20205756, 20206099, 20206150,
                20206541, 20206714, 20207140, 20207636, 20208045, 20208101, 20208202, 20208617,
                20209148, 20209199, 20209596, 20209646, 20210840, 20211813, 20216474, 20217938,
                20221422, 20225700, 20225751, 20227730, 20229676, 20229956, 20230939, 20231550,
                20231752, 20231802, 20231940, 20232934, 20233245, 20237109, 20237159, 20238577,
                20239574, 20240388, 20240648, 20241490, 20241541, 20244777, 20245236, 20250521,
                20250622, 20250934, 20251804, 20251904, 20252695, 20255611, 20256762, 20259607,
                20259658, 20261186, 20261735, 20262149, 20262644, 20263221, 20263657, 20263707,
                20265991, 20271652, 20272670, 20273684, 20274193, 20276091, 20276150, 20279662,
                20281275, 20282251, 20282658, 20282708, 20287355, 20287405, 20287456, 20287609,
                20289652, 20289703, 20289754, 20289804, 20290202, 20290319, 20291679, 20291729,
                20291833, 20291942, 20292193, 20292999, 20293050, 20293522, 20293632, 20296535,
                20297666, 20299116, 20306909, 20307409, 20307966, 20308923, 20309925, 20311969,
                20312907, 20313707, 20313915, 20315116, 20315167, 20315274, 20315325, 20315462,
                20315512, 20315839, 20315939, 20316548, 20317541, 20319104, 20320292, 20320342,
                20329060, 20330207, 20331778, 20332546, 20334311, 20335153, 20335717, 20335768,
                20339992, 20340539, 20343995, 20344045, 20344844, 20350182, 20351014, 20353958,
                20355225, 20355276, 20355472, 20359581, 20359676, 20360505, 20363116, 20363803,
                20364566, 20368063, 20368817, 20370087, 20375909, 20375959, 20378108, 20378563,
                20379033, 20379084, 20383945, 20385455, 20389291, 20389341, 20389539, 20389917,
                20390751, 20390871, 20391971, 20392570, 20392690, 20394122, 20396206, 20396256,
                20396736, 20397705, 20398718, 20399709, 20403748, 20405613, 20405664, 20406705,
                20406850, 20406959, 20407688, 20408155, 20408703, 20409195, 20409983, 20410538,
                20410639, 20410962, 20413105, 20414990, 20415529, 20415814, 20416004, 20416870,
                20421435, 20422234, 20422980, 20424022, 20424072, 20424956, 20425461, 20425512,
                20425970, 20427972, 20428022, 20428194, 20428487, 20428588, 20428744, 20428795,
                20428846, 20428967, 20429598, 20429717, 20429818, 20429868, 20429918, 20430091,
                20430141, 20430191, 20430734, 20434736, 20435730, 20436122, 20436563, 20438190,
                20438356, 20439955, 20440902, 20440953, 20441366, 20441811, 20442278, 20442640,
                20443121, 20443172, 20443611, 20443661, 20443826, 20444135, 20444186, 20445459,
                20447455, 20449112, 20451444, 20453215, 20453641, 20454195, 20455670, 20456091,
                20456142, 20456944, 20457211, 20457311, 20457653, 20457755, 20460568, 20461185,
                20461673, 20462688, 20462738, 20463768, 20466604, 20471461, 20474653, 20474703,
                20474754, 20474993, 20475043, 20475470, 20475521, 20477589, 20477640, 20477762,
                20478412, 20481254, 20481449, 20482939, 20484821, 20484871, 20485508, 20487195,
                20488148, 20488563, 20488649, 20489603, 20490335, 20490385, 20495362, 20497129,
                20498078, 20498128, 20499185, 20500460, 20500510, 20500561, 20501138, 20501239,
                20501355, 20501407, 20501457, 20501583, 20501874, 20502024, 20502345, 20502924,
                20502974, 20503302, 20503591, 20503643, 20503922, 20504471, 20504925, 20505933,
                20505984, 20506926, 20507029, 20507281, 20507332, 20508205, 20508906, 20509101,
                20509151, 20509811, 20510216, 20513010, 20513107, 20516401, 20518627, 20518677,
                20519873, 20520225, 20520275, 20522278, 20522408, 20522458, 20525379, 20526266,
                20527374, 20529715, 20530496, 20531330, 20531972, 20532171, 20532230, 20532576,
                20532770, 20532897, 20533203, 20534295, 20537512, 20537562, 20537693, 20538605,
                20539830, 20539880, 20540708, 20540758, 20541111, 20541329, 20541638, 20543680,
                20543730, 20543914, 20543965, 20544132, 20544232, 20544334, 20544610, 20544781,
                20544831, 20546875, 20546925, 20546975, 20547231, 20547468, 20547944, 20547995,
                20548095, 20548256, 20548429, 20548584, 20557778, 20558856, 20558907, 20563925,
                20564916, 20565926, 20566927, 20568967, 20569926, 20570966, 20573801, 20575643,
                20575693, 20575832, 20575882, 20576306, 20580974, 20581024, 20581984, 20582067,
                20582169, 20583007, 20583172, 20583813, 20584148, 20584423, 20584474, 20585106,
                20585496, 20585650, 20585750, 20585948, 20587471, 20587521, 20587572, 20587683,
                20587733, 20587784, 20587888, 20590167, 20592837, 20593239, 20594142, 20594192,
                20594328, 20594626, 20594676, 20595291, 20595392, 20595654, 20595705, 20596122,
                20596172, 20596564, 20596665, 20596770, 20596900, 20597001, 20597157, 20599122,
                20600655, 20601164, 20602432, 20602482, 20602542, 20602603, 20603375, 20603688,
                20603738, 20607137, 20607925, 20608224, 20608275, 20608832, 20617012, 20617121,
                20619652, 20620008, 20620362, 20620561, 20620611, 20620958, 20621008, 20621931,
                20622989, 20623938, 20624920, 20624971, 20625900, 20626111, 20626162, 20626274,
                20626324, 20626924, 20627255, 20627306, 20627951, 20628869, 20628920, 20629340,
                20629806, 20630363, 20630413, 20631014, 20631114, 20631165, 20631568, 20633663,
                20635926, 20641391, 20641442, 20641969, 20642511, 20644078, 20644128, 20644382,
                20646018, 20646069, 20646380, 20646491, 20646541, 20648007, 20653105, 20653155,
                20654246, 20654297, 20655590, 20656685, 20658182, 20663540, 20665248, 20665299,
                20666081, 20667955, 20668056, 20674335, 20674421, 20675656, 20677567, 20679679,
                20680650, 20680909, 20681888, 20683274, 20684962, 20685327, 20685835, 20685885,
                20685935, 20690672, 20690772, 20692102, 20692710, 20692760, 20693155, 20693205,
                20693709, 20693837, 20693957, 20695516, 20698442, 20698492, 20698980, 20700943,
                20700994, 20701068, 20706702, 20706909, 20708338, 20708388, 20708780, 20708830,
                20710375, 20714152, 20714202, 20716904, 20716954, 20718517, 20718567, 20720491,
                20720542, 20727262, 20727312, 20728263, 20728314, 20729386, 20729436, 20729556,
                20732612, 20732662, 20733398, 20735796, 20736917, 20737958, 20738098, 20738149,
                20738661, 20738711, 20741180, 20742033, 20742084, 20744006, 20744252, 20746347,
                20746398, 20746935, 20751705, 20752454, 20752504, 20756131, 20757926, 20757977,
                20760967, 20761122, 20761374, 20762666, 20762716, 20763849, 20766018, 20766736,
                20768014, 20768668, 20768718, 20768851, 20768901, 20769226, 20769448, 20773311,
                20776872, 20776923, 20777302, 20782315, 20785680, 20786145, 20788623, 20788786,
                20788887, 20793098, 20793206, 20805133, 20807640, 20808915, 20809959, 20810915,
                20815644, 20815746, 20816005, 20816661, 20817599, 20818665, 20819653, 20820700,
                20821665, 20821715, 20825738, 20825917, 20826257, 20826933, 20827880, 20827981,
                20828108, 20828326, 20828377, 20828444, 20828494, 20828665, 20829091, 20829141,
                20839125, 20839176, 20839796, 20839920, 20840836, 20840886, 20841138, 20842288,
                20845123, 20848086, 20848136, 20848252, 20860930, 20863667, 20863768, 20863819,
                20863935, 20866288, 20866339, 20867646, 20867700, 20868637, 20868688, 20868738,
                20869260, 20872525, 20872576, 20873170, 20877464, 20877912, 20879085, 20879135,
                20880050, 20880352, 20883781, 20884346, 20885041, 20885245, 20885295, 20886582,
                20887242, 20887663, 20887714, 20888846, 20889975, 20890026, 20890351, 20891049,
                20893440, 20893490, 20896207, 20896307, 20906453, 20907081, 20907719, 20907770,
                20908036, 20909630, 20909731, 20909781, 20909906, 20910006, 20910475, 20911678,
                20912230, 20913070, 20913913, 20913964, 20914209, 20914644, 20915172, 20916098,
                20916149, 20916199, 20916638, 20916802, 20917143, 20917589, 20917646, 20919377,
                20919428, 20920097, 20920604, 20920654, 20920728, 20920938, 20922284, 20923174,
                20923930, 20924799, 20925755, 20926677, 20927146, 20927568, 20928509, 20928650,
                20929156, 20930041, 20930161, 20930213, 20930311, 20930664, 20931434, 20932503,
                20933695, 20934347, 20934705, 20936728, 20938152, 20939425, 20939991, 20941093,
                20942257, 20942307, 20942692, 20945265, 20946724, 20949316, 20949942, 20951101,
                20952366, 20952416, 20952546, 20952597, 20953372, 20953987, 20958158, 20960901,
                20961002, 20963465, 20963580, 20963942, 20966876, 20966927, 20969908, 20969959,
                20970561, 20972716, 20975157, 20976629, 20978102, 20978153, 20979287, 20980267,
                20981270, 20981835, 20982258, 20985178, 20986727, 20986778, 20989089, 20989140,
                20992727, 21001179, 21001230, 21002643, 21002694, 21010951, 21011120, 21011171,
                21011667, 21012370, 21014597, 21016895, 21017626, 21017926, 21018569, 21019233,
                21019283, 21025945, 21027964, 21028908, 21031182, 21031360, 21031411, 21031855,
                21031906, 21033966, 21034699, 21035145, 21035274, 21035375, 21035526, 21037044,
                21037095, 21037172, 21037305, 21037406, 21037805, 21037941, 21043336, 21043493,
                21043544, 21044005, 21044159, 21044309, 21044441, 21044542, 21044684, 21044806,
                21044857, 21044907, 21046557, 21047702, 21050566, 21050616, 21053465, 21053517,
                21053568, 21053636, 21053948, 21054557, 21056301, 21058047, 21058120, 21061593,
                21061916, 21063069, 21063120, 21069268, 21069318, 21070028, 21077303, 21078479,
                21078530, 21079874, 21081000, 21082312, 21084504, 21084555, 21086012, 21087233,
                21087283, 21087932, 21094371, 21103455, 21104178, 21104229, 21110993, 21111781,
                21118958, 21119926, 21119977, 21120813, 21122618, 21127847, 21139297, 21139347,
                21140136, 21140641, 21145048, 21146413, 21146890, 21149332, 21151375, 21153312,
                21153865, 21155984, 21156434, 21157025, 21160188, 21170119, 21170819, 21171309,
                21171409, 21172197, 21172646, 21172696, 21172996, 21173103, 21173704, 21175366,
                21175416, 21175552, 21176472, 21177348, 21183047, 21183148, 21183660, 21184303,
                21184765, 21184866, 21185346, 21185448, 21185549, 21186107, 21186258, 21186569,
                21186670, 21186799, 21187123, 21187174, 21187318, 21187705, 21187873, 21188520,
                21188966, 21189185, 21189316, 21189683, 21190049, 21190150, 21190266, 21190757,
                21190866, 21190969, 21191070, 21191211, 21191473, 21191547, 21191982, 21192184,
                21192285, 21192430, 21192574, 21192675, 21193190, 21193391, 21193580, 21193681,
                21193795, 21193896, 21194395, 21194496, 21194620, 21194780, 21194904, 21195094,
                21195144, 21196482, 21196533, 21207926, 21216114, 21223526, 21224956, 21226506,
                21227319, 21227369, 21229419, 21237547, 21237775, 21238306, 21240269, 21240321,
                21240715, 21240940, 21241329, 21241448, 21241987, 21243164, 21243287, 21247940,
                21248985, 21250943, 21251171, 21265238, 21267984, 21268148, 21268199, 21268507,
                21269538, 21269906, 21270057, 21270984, 21276938, 21277922, 21277973, 21279155,
                21279277, 21279327, 21279593, 21283192, 21287455, 21287961, 21290009, 21290059,
                21297291, 21297342, 21300161, 21300363, 21301095, 21301145, 21301196, 21305246,
                21305296, 21305347, 21306588, 21306638, 21306688, 21306739, 21306840, 21306975,
                21307026, 21307951, 21308671, 21308773, 21308979, 21309229, 21309539, 21312653,
                21313464, 21318700, 21318814, 21318914, 21319156, 21319907, 21321949, 21321999,
                21322926, 21323909, 21324458, 21324625, 21325692, 21326988, 21332768, 21333378,
                21335020, 21335071, 21338013, 21338063, 21342515, 21342622, 21342770, 21342946,
                21344031, 21345574, 21355212, 21355363, 21359865, 21359915, 21363956, 21364508,
                21366737, 21366869, 21366929, 21366979, 21367082, 21368242, 21368292, 21368343,
                21368459, 21396205, 21396255, 21396934, 21400550, 21400637, 21400860, 21401069,
                21401235, 21401360, 21401948, 21403027, 21403078, 21403934, 21407171, 21409216,
                21409267, 21409685, 21410905, 21414186, 21414236, 21414303, 21414489, 21415553,
                21415604, 21415713, 21416291, 21418011, 21418181, 21418727, 21419359, 21420342,
                21420392, 21420504, 21421135, 21421702, 21421908, 21422393, 21422900, 21423663,
                21423713, 21423763, 21423922, 21424071, 21425053, 21425104, 21427208, 21427258,
                21427396, 21427496, 21427607, 21427658, 21427728, 21428324, 21428920, 21429523,
                21430251, 21430352, 21430724, 21430958, 21431563, 21431659, 21432434, 21432535,
                21435747, 21436128, 21436770, 21436821, 21436942, 21437776, 21437921, 21441862,
                21441912, 21442087, 21442450, 21442867, 21443641, 21443976, 21446450, 21447962,
                21448462, 21448513, 21448891, 21449971, 21451110, 21451161, 21453292, 21464064,
                21464164, 21465659, 21470893, 21470995, 21471046, 21471526, 21471970, 21472022,
                21473163, 21473566, 21475574, 21481555, 21483234, 21486199, 21486299, 21486445,
                21486546, 21487587, 21487638, 21487688, 21489437, 21489487, 21490593, 21498314,
                21498364, 21498415, 21504276, 21512975, 21514755, 21514806, 21515133, 21515490,
                21520925, 21521453, 21521503, 21522157, 21527121, 21527644, 21533704, 21536947,
                21537769, 21538225, 21538711, 21539574, 21539624, 21548954, 21555569, 21558334,
                21566956, 21567006, 21567491, 21568550, 21569972, 21570782, 21573387, 21573438,
                21573957, 21574509, 21576438, 21576651, 21578146, 21578335, 21579930, 21586906,
                21586956, 21587625, 21591156, 21591395, 21591446, 21593878, 21594026, 21599686,
                21599737, 21599978, 21600128, 21600382, 21600822, 21600872, 21600922, 21601271,
                21601321, 21601865, 21601916, 21602157, 21602723, 21602773, 21603168, 21603218,
                21604136, 21604539, 21605255, 21605719, 21606698, 21607286, 21610462, 21610512,
                21615640, 21615889, 21616009, 21616060, 21616446, 21616590, 21616640, 21618446,
                21620609, 21622094, 21622145, 21622272, 21622384, 21622966, 21623016, 21623639,
                21626759, 21627200, 21627349, 21628046, 21628174, 21628224, 21628285, 21628474,
                21628575, 21628789, 21630197, 21632104, 21642095, 21642202, 21642253, 21642424,
                21642698, 21642932, 21647966, 21651593, 21653148, 21653198, 21655326, 21656968,
                21661965, 21668081, 21670640, 21670691, 21670741, 21671243, 21671837, 21671887,
                21672168, 21672747, 21673211, 21673334, 21673443, 21675424, 21675475, 21675647,
                21675944, 21677021, 21677072, 21679909, 21681565, 21683042, 21683283, 21683334,
                21684335, 21684470, 21687922, 21687972, 21688055, 21688495, 21691548, 21691649,
                21691891, 21692089, 21692139, 21693660, 21702605, 21702655, 21702773, 21719276,
                21719377, 21719495, 21720467, 21721062, 21721163, 21722015, 21725824, 21725904,
                21726935, 21727038, 21727627, 21729079, 21729129, 21729900, 21729951, 21730435,
                21731993, 21732043, 21735364, 21735414, 21735464, 21735601, 21736043, 21736093,
                21736188, 21736374, 21737248, 21737299, 21740049, 21740946, 21740997, 21743004,
                21743505, 21743626, 21743836, 21744256, 21745720, 21745821, 21746073, 21746356,
                21747081, 21747131, 21747437, 21747539, 21748039, 21748089, 21753123, 21753880,
                21753931, 21754026, 21754550, 21754722, 21755333, 21755383, 21756022, 21756548,
                21756750, 21759317, 21759368, 21759523, 21759909, 21762159, 21762210, 21762311,
                21762424, 21762530, 21763070, 21765007, 21765562, 21766927, 21767523, 21767574,
                21767797, 21768144, 21768393, 21768527, 21768595, 21768723, 21768774, 21769152,
                21769586, 21769687, 21769796, 21770190, 21772513, 21775650, 21775916, 21776157,
                21776909, 21776959, 21777991, 21780925, 21780976, 21782227, 21782328, 21782378,
                21782480, 21782886, 21787154, 21787775, 21787998, 21788976, 21789026, 21789077,
                21789215, 21789704, 21789949, 21790145, 21790926, 21791095, 21791196, 21791610,
                21791711, 21792310, 21792361, 21792622, 21792710, 21792812, 21793481, 21793655,
                21793706, 21793827, 21793928, 21794294, 21794394, 21794527, 21794577, 21796749,
                21796855, 21799275, 21803704, 21803755, 21805044, 21805094, 21805208, 21805524,
                21805726, 21806170, 21806220, 21806481, 21806999, 21807459, 21807510, 21807666,
                21809329, 21809430, 21812945, 21813335, 21814867, 21820503, 21821671, 21821722,
                21826828, 21828731, 21828781, 21829802, 21830071, 21831273, 21832702, 21833937,
                21834627, 21834880, 21836003, 21836053, 21836103, 21840985, 21843173, 21844366,
                21844416, 21844712, 21845753, 21845876, 21845952, 21847515, 21847565, 21851896,
                21852216, 21852706, 21852964, 21856174, 21856911, 21857035, 21857085, 21857968,
                21858386, 21862024, 21864307, 21865610, 21866691, 21867128, 21867179, 21868192,
                21868404, 21869437, 21872069, 21878527, 21878577, 21879272, 21883241, 21884917,
                21884967, 21885471, 21885521, 21893021, 21893688, 21894639, 21896194, 21896244,
                21896561, 21896712, 21898734, 21898784, 21898876, 21898976, 21899633, 21904892,
                21904943, 21906756, 21906918, 21907766, 21907917, 21907967, 21910659, 21910710,
                21910933, 21911056, 21911598, 21911699, 21911859, 21920956, 21921007, 21923937,
                21924216, 21925482, 21925701, 21926083, 21927939, 21928066, 21928257, 21928439,
                21933772, 21934068, 21934119, 21934178, 21934277, 21936229, 21936633, 21936684,
                21936906, 21939855, 21939905, 21947937, 21948467, 21948518, 21948618, 21948723,
                21948824, 21950589, 21954031, 21954081, 21954406, 21955525, 21961441, 21961897,
                21961948, 21964428, 21965192, 21965243, 21966948, 21967065, 21967115, 21969912,
                21973334, 21975491, 21977154, 21983057, 21983170, 21983220, 21983366, 21983417,
                21984569, 21984867, 21984917, 21992913, 21992963, 21993198, 21993320, 21993451,
                21993591, 21993692, 21993837, 22001395, 22001445, 22002352, 22002403, 22007722,
                22009103, 22009154, 22009256, 22009307, 22009745, 22010023, 22010073, 22010906,
                22012159, 22012289, 22012429, 22014147, 22015602, 22015653, 22017973, 22018073,
                22019031, 22019082, 22019134, 22019242, 22019346, 22026289, 22026340, 22029586,
                22029876, 22036915, 22039449, 22039855, 22039956, 22040006, 22040141, 22040304,
                22040417, 22040520, 22040756, 22042024, 22042075, 22042248, 22042541, 22042592,
                22043373, 22043873, 22044027, 22044083, 22044574, 22045134, 22045214, 22045804,
                22045939, 22046932, 22046995, 22047156, 22047426, 22047476, 22047942, 22047992,
                22048207, 22048258, 22048447, 22048497, 22048712, 22056242, 22059544, 22060206,
                22060323, 22060424, 22064927, 22064977, 22065969, 22075861, 22075911, 22076042,
                22076143, 22076208, 22076347, 22076457, 22077325, 22077375, 22078615, 22079041,
                22079247, 22081140, 22083327, 22084548, 22085043, 22085197, 22086360, 22086575,
                22087142, 22087192, 22087319, 22088993, 22089947, 22090775, 22090825, 22091087,
                22091368, 22091976, 22093053, 22093942, 22095936, 22095987, 22096967, 22097965,
                22098939, 22100922, 22101089, 22103046, 22103595, 22104186, 22105001, 22105508,
                22105559, 22105609, 22106025, 22106140, 22106241, 22107214, 22107952, 22108003,
                22108429, 22108480, 22108778, 22111376, 22111426, 22112908, 22115330, 22115575,
                22115676, 22115799, 22118557, 22119591, 22119641, 22119982, 22126014, 22127950,
                22131141, 22132113, 22132164, 22134044, 22134866, 22134917, 22136498, 22136600,
                22137007, 22137109, 22137230, 22138672, 22138841, 22140221, 22140558, 22140788,
                22142656, 22142948, 22144001, 22144936, 22145986, 22147581, 22147631, 22148390,
                22148491, 22148601, 22148702, 22149253, 22149727, 22149828, 22149979, 22150944,
                22150995, 22151344, 22152218, 22152319, 22152464, 22152622, 22157269, 22157319,
                22157772, 22157852, 22162298, 22162348, 22162642, 22162693, 22166421, 22167424,
                22167474, 22167815, 22170818, 22174216, 22175836, 22175886, 22176951, 22178472,
                22189659, 22189852, 22189953, 22190003, 22190939, 22194880, 22196052, 22196166,
                22196216, 22196370, 22197762, 22197812, 22198919, 22199965, 22200016, 22200066,
                22200256, 22200357, 22200511, 22200561, 22200611, 22200681, 22200961, 22201011,
                22201071, 22201172, 22201774, 22204945, 22206000, 22206401, 22206535, 22206983,
                22208000, 22211507, 22211671, 22211721, 22211772, 22212183, 22212632, 22216850,
                22224135, 22224515, 22224682, 22224782, 22224935, 22225036, 22225204, 22225255,
                22226772, 22227634, 22227979, 22228029, 22230633, 22231142, 22231255, 22231627,
                22231865, 22231915, 22233349, 22233960, 22235206, 22235426, 22237945, 22237995,
                22239847, 22239897, 22242350, 22244030, 22245628, 22246411, 22248015, 22249338,
                22251182, 22261634, 22274621, 22276675, 22277257, 22278302, 22278352, 22278938,
                22280095, 22280266, 22280367, 22280620, 22280671, 22281672, 22281918, 22282019,
                22284583, 22284813, 22286615, 22286909, 22287964, 22288932, 22288983, 22289426,
                22292927, 22294199, 22294653, 22294807, 22295178, 22295278, 22295660, 22296202,
                22296916, 22297965, 22301650, 22314990, 22315929, 22316658, 22317640, 22318139,
                22318190, 22319922, 22322952, 22324616, 22324876, 22324929, 22326266, 22326316,
                22326893, 22327294, 22327345, 22328557, 22328954, 22329502, 22329627, 22329760,
                22329906, 22330227, 22330278, 22331426, 22331476, 22332070, 22332121, 22333153,
                22333341, 22333650, 22333700, 22334490, 22339491, 22339541, 22339749, 22339799,
                22344091, 22344141, 22346496, 22346974, 22349905, 22350404, 22350454, 22350517,
                22350618, 22350987, 22351436, 22351810, 22351860, 22351986, 22353452, 22357508,
                22357627, 22357740, 22357855, 22359944, 22361109, 22361159, 22364144, 22366290,
                22368734, 22368835, 22368968, 22369316, 22369902, 22369952, 22370133, 22378132,
                22378182, 22378233, 22378356, 22379010, 22380288, 22380339, 22381310, 22384643,
                22385520, 22385718, 22386820, 22386870, 22386920, 22387023, 22387127, 22387232,
                22387355, 22388134, 22388185, 22388311, 22388411, 22389942, 22390650, 22393423,
                22393540, 22395342, 22396779, 22396904, 22396956, 22397300, 22399956, 22400006,
                22402154, 22402778, 22402828, 22404081, 22404379, 22406064, 22407380, 22407648,
                22407953, 22408810, 22409809, 22412893, 22415978, 22416031, 22416826, 22418627,
                22418677, 22420384, 22424247, 22424298, 22424892, 22426089, 22426139, 22427242,
                22427370, 22427490, 22429494, 22429545, 22431502, 22440243, 22443179, 22443535,
                22443585, 22444150, 22445605, 22445707, 22446132, 22448590, 22451603, 22453916,
                22454895, 22454945, 22455133, 22455184, 22455234, 22456189, 22456323, 22456374,
                22456549, 22467997, 22468580, 22468630, 22469511, 22470748, 22470798, 22477013,
                22477785, 22478211, 22478261, 22481984, 22482035, 22482328, 22483599, 22483699,
                22484995, 22485498, 22489857, 22489907, 22489957, 22490119, 22490170, 22490344,
                22490395, 22491718, 22493986, 22494036, 22494159, 22500328, 22500378, 22500655,
                22500706, 22500756, 22501934, 22502518, 22502568, 22502631, 22503670, 22503721,
                22503821, 22504553, 22504827, 22504878, 22506058, 22506108, 22506230, 22506488,
                22506539, 22507913, 22509615, 22509994, 22511082, 22511317, 22511433, 22511547,
                22511723, 22511824, 22514193, 22514518, 22515785, 22515901, 22515952, 22516003,
                22516161, 22516261, 22516312, 22518684, 22518791, 22520269, 22520492, 22520542,
                22521635, 22527290, 22527465, 22529569, 22529941, 22533776, 22533990, 22534118,
                22534169, 22535898, 22540483, 22540802, 22545365, 22545416, 22545923, 22545974,
                22546315, 22546367, 22546563, 22546663, 22546789, 22550794, 22559290, 22559821,
                22559871, 22560795, 22561791, 22561842, 22562086, 22562613, 22562663, 22565017,
                22565210, 22570585, 22570636, 22574124, 22574174, 22574360, 22580641, 22592802,
                22597156, 22597477, 22598493, 22598543, 22600162, 22601166, 22601216, 22602674,
                22602725, 22605487, 22605537, 22606638, 22607166, 22607343, 22607393, 22607595,
                22608043, 22609196, 22609331, 22609491, 22609592, 22609732, 22609840, 22609984,
                22610034, 22610723, 22614096, 22614148, 22615130, 22616626, 22618442, 22620594,
                22620645, 22622405, 22628410, 22631369, 22631450, 22631501, 22631623, 22635804,
                22635855, 22637227, 22637586, 22637729, 22637838, 22637940, 22638087, 22638188,
                22638546, 22638596, 22639158, 22640136, 22644655, 22644707, 22647767, 22647817,
                22647959, 22649951, 22650743, 22650993, 22651943, 22651994, 22652245, 22652547,
                22652823, 22652874, 22653304, 22654898, 22654948, 22656948, 22657083, 22658658,
                22660154, 22661607, 22661701, 22661751, 22662698, 22662993, 22663093, 22663883,
                22666015, 22666645, 22668286, 22669880, 22670906, 22670956, 22672741, 22673212,
                22675062, 22675451, 22676835, 22678345, 22679970, 22680023, 22680415, 22682393,
                22682443, 22684228, 22684338, 22684458, 22684559, 22684920, 22686160, 22686643,
                22686959, 22687238, 22687288, 22687338, 22687461, 22688262, 22689803, 22689940,
                22689991, 22694868, 22694919, 22695692, 22696675, 22696725, 22697798, 22697948,
                22698149, 22698277, 22699094, 22699144, 22699194, 22699705, 22700551, 22703875,
                22705219, 22705754, 22707973, 22709576, 22711164, 22711763, 22712097, 22712817,
                22712918, 22716980, 22717116, 22719913, 22722055, 22724486, 22724537, 22724912,
                22725908, 22725958, 22726765, 22728523, 22728574, 22730264, 22730405, 22730455,
                22730940, 22731258, 22732165, 22732215, 22732709, 22735075, 22737274, 22737701,
                22739290, 22740408, 22743599, 22744111, 22744212, 22744262, 22746474, 22749160,
                22750131, 22750181, 22754875, 22754925, 22757847, 22760926, 22760977, 22762958,
                22763147, 22765019, 22770535, 22770914, 22771015, 22771116, 22771258, 22771420,
                22771605, 22771845, 22772641, 22772731, 22772832, 22772948, 22772999, 22773050,
                22773151, 22773573, 22773706, 22773810, 22776320, 22776769, 22776957, 22777007,
                22777058, 22777174, 22777394, 22778266, 22779948, 22780049, 22780209, 22782770,
                22784487, 22787357, 22788773, 22789953, 22791962, 22792013, 22792064, 22795895,
                22796406, 22796506, 22796700, 22798683, 22799299, 22799894, 22800143, 22800194,
                22800245, 22800403, 22800454, 22800554, 22800663, 22800764, 22800814, 22800950,
                22801051, 22801152, 22801297, 22801686, 22801736, 22801787, 22801987, 22802088,
                22802452, 22803167, 22804325, 22807282, 22807333, 22808300, 22808614, 22809956,
                22812563, 22812614, 22812739, 22813110, 22814037, 22814144, 22824508, 22824605,
                22827536, 22829114, 22829351, 22830773, 22832036, 22832087, 22832530, 22833192,
                22835242, 22835846, 22836871, 22837003, 22837210, 22837311, 22837909, 22838590,
                22838757, 22838808, 22839442, 22839493, 22839630, 22839797, 22840016, 22840066,
                22842106, 22842630, 22842913, 22844134, 22844321, 22844711, 22845241, 22845341,
                22846500, 22847610, 22847661, 22848254, 22848442, 22848544, 22848664, 22849232,
                22849282, 22849755, 22849805, 22850052, 22850102, 22850846, 22854139, 22854189,
                22854395, 22855832, 22856114, 22856218, 22856423, 22856574, 22856827, 22857023,
                22857249, 22857350, 22857400, 22857487, 22857537, 22858815, 22859353, 22860542,
                22861416, 22862660, 22862710, 22863936, 22864921, 22864971, 22865274, 22865375,
                22865569, 22865619, 22866802, 22866928, 22867400, 22867973, 22868023, 22868232,
                22868332, 22868497, 22868652, 22868831, 22868932, 22870893, 22871012, 22871063,
                22872735, 22873123, 22873943, 22874152, 22874202, 22874549, 22874793, 22874843,
                22875191, 22875292, 22875779, 22876027, 22877293, 22877344, 22878764, 22878865,
                22879607, 22880318, 22880369, 22880575, 22880626, 22880676, 22880932, 22881797,
                22881852, 22882048, 22882250, 22882468, 22882641, 22882781, 22883481, 22883531,
                22883581, 22883695, 22883745, 22883796, 22883982, 22884083, 22884415, 22884734,
                22888954, 22889225, 22890597, 22896350, 22896400, 22896451, 22896501, 22896564,
                22897423, 22897917, 22898525, 22899966, 22900513, 22902590, 22903165, 22904062,
                22905591, 22905641, 22906777, 22908085, 22908807, 22908858, 22909256, 22910541,
                22910591, 22910715, 22910818, 22910925, 22913509, 22913559, 22913771, 22913850,
                22913987, 22914088, 22914190, 22914297, 22914398, 22915786, 22915837, 22916324,
                22916427, 22916478, 22916531, 22916744, 22917235, 22917339, 22918097, 22918351,
                22918401, 22918497, 22918599, 22918788, 22918890, 22918991, 22919141, 22919312,
                22919413, 22919539, 22919856, 22919956, 22920006, 22920438, 22920488, 22920588,
                22921060, 22921161, 22921290, 22921412, 22921544, 22921647, 22921752, 22924052,
                22924103, 22924153, 22924645, 22924753, 22924854, 22924991, 22925135, 22925246,
                22925350, 22925460, 22925603, 22925654, 22926137, 22926633, 22926751, 22926942,
                22927043, 22927184, 22927291, 22927449, 22927820, 22928134, 22928308, 22928664,
                22928845, 22929037, 22929150, 22929280, 22929437, 22929566, 22929667, 22929776,
                22930029, 22930080, 22930131, 22931034, 22931141, 22931882, 22931932, 22931983,
                22933046, 22933153, 22933254, 22933615, 22933665, 22935203, 22935254, 22936208,
                22936259, 22936309, 22936419, 22936520, 22936570, 22936894, 22936944, 22937139,
                22939628, 22949830, 22949880, 22949930, 22950040, 22950184, 22950499, 22950581,
                22950681, 22952072, 22955072, 22955122, 22955741, 22964355, 22964406, 22964523,
                22964781, 22964976, 22965919, 22965970, 22966306, 22966871, 22968924, 22970126,
                22970362, 22970774, 22970945, 22970995, 22971545, 22971596, 22971696, 22971758,
                22971932, 22972171, 22972222, 22972927, 22972978, 22974838, 22975462, 22975649,
                22975766, 22975817, 22975980, 22976167, 22976268, 22976397, 22976509, 22978811,
                22978861, 22980024, 22980074, 22980551, 22981745, 22985498, 22986601, 22986652,
                22987656, 22988126, 22988176, 22988297, 22988397, 22988885, 22989490, 22989541,
                22989674, 22992922, 22993023, 22995459, 22995509, 22995757, 22999019, 22999191,
                22999344, 22999395, 22999795, 23000444, 23000938, 23000988, 23001627, 23002610,
                23003699, 23003838, 23004074, 23004175, 23004924, 23005254, 23005654, 23005803,
                23006465, 23006670, 23007365, 23008051, 23008261, 23008311, 23008412, 23008546,
                23008688, 23009245, 23009616, 23009666, 23011906, 23012006, 23013382, 23013544,
                23013595, 23013695, 23013746, 23014046, 23014096, 23015689, 23017052, 23017103,
                23019773, 23019824, 23021353, 23022496, 23023275, 23023325, 23023598, 23023710,
                23023918, 23023968, 23024837, 23025180, 23025230, 23025330, 23025924, 23026136,
                23026186, 23026626, 23027590, 23028205, 23028255, 23028458, 23028698, 23028802,
                23028916, 23029017, 23029200, 23029331, 23030216, 23031050, 23031100, 23031151,
                23031201, 23031251, 23031301, 23031792, 23031842, 23032275, 23032326, 23033425,
                23035264, 23035315, 23035451, 23035666, 23037601, 23038348, 23038449, 23038568,
                23038679, 23038823, 23039968, 23040019, 23040069, 23040226, 23040484, 23040670,
                23040778, 23041726, 23041777, 23042111, 23043099, 23043149, 23044224, 23044274,
                23044657, 23044725, 23045252, 23045353, 23045482, 23045532, 23045582, 23046977,
                23047650, 23047700, 23047853, 23050313, 23051028, 23051079, 23051129, 23051919,
                23052220, 23052270, 23052412, 23052619, 23052727, 23053283, 23053333, 23053434,
                23053697, 23054023, 23054074, 23055907, 23056003, 23056054, 23056518, 23058110,
                23058160, 23058211, 23059117, 23060339, 23060390, 23060936, 23061522, 23064678,
                23064729, 23064848, 23064899, 23066609, 23066766, 23066864, 23067142, 23067193,
                23067243, 23067490, 23067672, 23068045, 23068095, 23068209, 23068259, 23068956,
                23069939, 23070272, 23070623, 23070673, 23072622, 23079626, 23079966, 23080016,
                23080202, 23080278, 23080453, 23080912, 23080962, 23081013, 23081063, 23081213,
                23081264, 23081442, 23085031, 23085081, 23087483, 23090043, 23090175, 23090334,
                23090384, 23090768, 23091012, 23091108, 23091208, 23091304, 23092267, 23092384,
                23092434, 23093167, 23099055, 23099907, 23100071, 23100121, 23100273, 23101155,
                23101205, 23101256, 23101628, 23101888, 23102027, 23102083, 23102962, 23103012,
                23105859, 23105966, 23106738, 23106788, 23106970, 23107263, 23107364, 23107467,
                23107568, 23107669, 23107773, 23107874, 23108004, 23109271, 23110533, 23110992,
                23111091, 23111141, 23111364, 23111414, 23113185, 23113235, 23118233, 23120182,
                23120233, 23120283, 23120333, 23120384, 23121465, 23122461, 23123374, 23125540,
                23126695, 23129024, 23129125, 23129257, 23129359, 23129471, 23130865, 23130966,
                23131080, 23131230, 23131343, 23131495, 23131596, 23131705, 23131806, 23132089,
                23132782, 23133074, 23133182, 23133469, 23133670, 23139913, 23140201, 23140251,
                23140302, 23140407, 23141320, 23141370, 23142171, 23143252, 23143609, 23143659,
                23144548, 23146558, 23146608, 23147987, 23148038, 23150399, 23155184, 23159989,
                23161500, 23162120, 23165794, 23166533, 23168144, 23168194, 23168302, 23168352,
                23170082, 23172587, 23172638, 23172688, 23173620, 23173872, 23174813, 23176162,
                23176577, 23177055, 23177479, 23177535, 23177585, 23180140, 23181323, 23182958,
                23183008, 23183667, 23183718, 23184055, 23184106, 23184959, 23185009, 23185498,
                23185891, 23185941, 23186232, 23186761, 23186863, 23187047, 23187161, 23187318,
                23190171, 23190221, 23190983, 23191034, 23192923, 23201245, 23201295, 23203369,
                23203646, 23208682, 23208732, 23208914, 23209305, 23209355, 23209993, 23210043,
                23210123, 23210225, 23210386, 23210437, 23210747, 23211242, 23211395, 23211448,
                23211499, 23212005, 23212056, 23212318, 23212368, 23213410, 23215165, 23216620,
                23216731, 23216843, 23216944, 23217020, 23217136, 23217243, 23217519, 23217569,
                23219819, 23220406, 23222719, 23223484, 23223716, 23224162, 23224477, 23224527,
                23224812, 23224984, 23225275, 23228106, 23228674, 23229244, 23229294, 23229759,
                23229860, 23229997, 23230047, 23230234, 23230341, 23230924, 23230975, 23231079,
                23231538, 23231727, 23232050, 23232101, 23232246, 23232296, 23232748, 23232798,
                23233004, 23233266, 23233543, 23233749, 23233990, 23234040, 23234202, 23234693,
                23234743, 23234860, 23235318, 23237309, 23238254, 23238306, 23238814, 23239267,
                23239317, 23240473, 23241855, 23242933, 23242984, 23244380, 23245842, 23246247,
                23246297, 23247717, 23248204, 23248254, 23248476, 23248608, 23249669, 23249931,
                23250247, 23250350, 23250628, 23252184, 23252235, 23252529, 23254339, 23254669,
                23255079, 23255181, 23255231, 23255682, 23255732, 23257783, 23257833, 23258371,
                23258422, 23258494, 23258628, 23258740, 23258948, 23259093, 23260122, 23260432,
                23260483, 23261120, 23262059, 23262110, 23263568, 23263618, 23263850, 23266029,
                23266079, 23266130, 23266199, 23266250, 23267555, 23267699, 23268456, 23269654,
                23269988, 23270476, 23270909, 23271828, 23272413, 23272775, 23272915, 23273388,
                23273919, 23274611, 23275154, 23275204, 23275537, 23275630, 23276464, 23276983,
                23277033, 23277710, 23277889, 23278428, 23278529, 23278845, 23280266, 23280387,
                23280508, 23280559, 23281544, 23281594, 23282397, 23282448, 23282666, 23284083,
                23284184, 23284460, 23285856, 23288140, 23288191, 23288537, 23288587, 23289435,
                23289486, 23290907, 23290957, 23292616, 23300116, 23300880, 23301846, 23302046,
                23302202, 23302253, 23302680, 23303415, 23303854, 23304004, 23304112, 23304213,
                23304876, 23307637, 23310782, 23312321, 23313647, 23313888, 23314343, 23314488,
                23315014, 23315185, 23315808, 23316317, 23316367, 23316679, 23316730, 23318145,
                23318276, 23318326, 23319075, 23319373, 23319423, 23319661, 23320081, 23320132,
                23320485, 23321280, 23321367, 23321586, 23321636, 23321796, 23321846, 23321915,
                23322235, 23322513, 23323151, 23325317, 23325368, 23325766, 23325907, 23325958,
                23326598, 23326929, 23327029, 23327149, 23327380, 23327595, 23327696, 23328187,
                23328458, 23328565, 23329327, 23330192, 23330942, 23330992, 23331497, 23331547,
                23333017, 23333067, 23334174, 23334382, 23334996, 23335640, 23335691, 23335836,
                23335886, 23336021, 23336744, 23337866, 23338162, 23338212, 23338499, 23338656,
                23338827, 23338902, 23339179, 23339679, 23339729, 23339782, 23339878, 23339928,
                23340055, 23340164, 23340215, 23340265, 23340432, 23340613, 23340761, 23340928,
                23340978, 23341364, 23341920, 23341970, 23342154, 23342334, 23342629, 23342763,
                23343106, 23343206, 23343257, 23343726, 23343777, 23344463, 23344936, 23344986,
                23345116, 23345194, 23345433, 23345666, 23345716, 23345809, 23345923, 23346121,
                23346221, 23346272, 23346821, 23346871, 23346922, 23347148, 23347202, 23347312,
                23347362, 23347413, 23347463, 23347615, 23347902, 23348278, 23348379, 23348520,
                23348623, 23348674, 23349016, 23349816, 23349867, 23350822, 23350953, 23351003,
                23351053, 23351230, 23351318, 23351660, 23351913, 23352099, 23352149, 23352260,
                23352449, 23352659, 23352709, 23352915, 23353124, 23353660, 23353925, 23354185,
                23354363, 23355036, 23355194, 23355691, 23355741, 23356029, 23356601, 23356652,
                23356754, 23356966, 23357285, 23357335, 23357473, 23357629, 23357749, 23357991,
                23358042, 23358145, 23358452, 23358860, 23358910, 23359011, 23359112, 23359267,
                23359328, 23359429, 23359877, 23360134, 23360257, 23360308, 23360549, 23360599,
                23360758, 23361097, 23361147, 23361849, 23362185, 23362235, 23362568, 23362669,
                23363046, 23363146, 23363264, 23363891, 23363941, 23364490, 23364590, 23364894,
                23364944, 23365409, 23365510, 23365655, 23365705, 23365756, 23365942, 23366043,
                23366093, 23366200, 23366316, 23366428, 23366478, 23366830, 23366939, 23367040,
                23367174, 23367442, 23367590, 23367641, 23367777, 23367915, 23368066, 23368184,
                23368315, 23368419, 23369816, 23369917, 23370048, 23370098, 23370215, 23370352,
                23370402, 23370453, 23371111, 23371183, 23371284, 23371446, 23371496, 23371597,
                23371710, 23371819, 23371920, 23372026, 23372127, 23372311, 23372650, 23372751,
                23372801, 23372948, 23373049, 23373152, 23373387, 23373438, 23373488, 23373602,
                23373652, 23373703, 23373833, 23373984, 23374034, 23374084, 23374185, 23374285,
                23374356, 23374406, 23374510, 23374561, 23374694, 23374744, 23374797, 23375054,
                23375105, 23375203, 23375304, 23375722, 23375772, 23375891, 23376198, 23376299,
                23376387, 23376509, 23376729, 23376779, 23376917, 23378100, 23378151, 23378610,
                23378783, 23378909, 23378959, 23379314, 23379364, 23379465, 23379734, 23379784,
                23379935, 23380249, 23380300, 23380407, 23380457, 23380507, 23380608, 23380658,
                23380724, 23380825, 23380926, 23381054, 23381118, 23381269, 23382089, 23382140,
                23382253, 23382304, 23382408, 23382753, 23383754, 23383912, 23384164, 23384350,
                23384455, 23384563, 23384679, 23384842, 23384942, 23385117, 23385268, 23385318,
                23385368, 23386172, 23386516, 23386567, 23386744, 23386964, 23387508, 23387832,
                23387883, 23387933, 23388069, 23388126, 23388177, 23388229, 23388280, 23388535,
                23388691, 23388832, 23388882, 23388933, 23389051, 23389201, 23389402, 23389502,
                23389553, 23389627, 23390187, 23390237, 23390347, 23390705, 23390958, 23391084,
                23391250, 23391710, 23391814, 23392987, 23393480, 23393530, 23393581, 23393631,
                23393738, 23393848, 23395419, 23396027, 23396869, 23396919, 23397370, 23397421,
                23397529, 23397630, 23398441, 23398631, 23398682, 23398732, 23398977, 23399027,
                23399078, 23399441, 23399667,
            ]);
        }
    }
    /// `gen_blk` generates a sorted block of u32 values.
    ///
    /// The maximum difference between each value is the specified bit-length.
    ///
    /// At lease one difference has the maximum specified bit-length.
    ///
    /// The starting value is zero.
    pub fn gen_blk(blk_len: usize, bit_len: u8) -> Vec<u32> {
        if !(blk_len >= MIN_ELM_PER_BLK) {
            ::core::panicking::panic("assertion failed: blk_len >= MIN_ELM_PER_BLK")
        };
        if !(blk_len % ELM_PER_SMD == 0) {
            ::core::panicking::panic("assertion failed: blk_len % ELM_PER_SMD == 0")
        };
        if !(bit_len <= 32u8) {
            ::core::panicking::panic("assertion failed: bit_len <= 32u8")
        };
        let mut blk = ::alloc::vec::from_elem(0u32, blk_len);
        if bit_len == 0u8 {
            return blk;
        }
        let max_excl = if bit_len < 32u8 {
            1u32 << bit_len
        } else {
            u32::MAX
        };
        let dist = Uniform::new(0, max_excl);
        let mut rng = thread_rng();
        let dlt_max = if bit_len < 32u8 {
            (1u32 << bit_len) - 1
        } else {
            u32::MAX
        };
        for idx in ELM_PER_SMD..(ELM_PER_SMD * 2) {
            blk[idx] = dlt_max;
        }
        let smd_len: usize = blk_len / ELM_PER_SMD;
        for smd_idx in 2..smd_len {
            let mut rnds: Vec<u32> = (0..ELM_PER_SMD).map(|_| dist.sample(&mut rng)).collect();
            rnds.sort();
            for lne_idx in 0..ELM_PER_SMD {
                let prv_blk_idx = ((smd_idx - 1) * ELM_PER_SMD) + lne_idx;
                let cur_blk_idx = (smd_idx * ELM_PER_SMD) + lne_idx;
                blk[cur_blk_idx] = blk[cur_blk_idx - 1].saturating_add(rnds[lne_idx]);
                let dlt = blk[cur_blk_idx] - blk[prv_blk_idx];
                if dlt > dlt_max {
                    blk[cur_blk_idx] = blk[prv_blk_idx] + dlt_max;
                }
            }
        }
        return blk;
    }
}
pub mod vrn {
    //! `vrn` module compresses integers with variable length encoding.
    //!
    //! Variable length integer compression is also known as `VARINT`.
    //!
    //! This is based on code from the Rust `integer-encoding` implementation.
    //!
    //! See Rust implmentation https://docs.rs/integer-encoding/3.0.2/integer_encoding/index.html.
    //!
    //! See Google documentation https://developers.google.com/protocol-buffers/docs/encoding.
    //!
    //! See `VARINT` discussion in scholarly journal https://arxiv.org/abs/1401.6399.
    /// `BYT_HDR_MSK` is a byte mask for the header of variable integer encoding.
    ///
    /// A header of 1 indicates another byte exist in the variable length encoding.
    ///
    /// A header of 0 indicates that the current byte is the last byte of the variable length encoding.
    const BYT_HDR_MSK: u8 = 0b1000_0000;
    /// `BYT_BDY_MSK` is a byte mask for the body of the variable integer encoding and decoding.
    const BYT_BDY_MSK: u8 = 0b0111_1111;
    /// `BIT_SHF_LEN` is the number of bits to shift during variable integer encoding and decoding.
    const BIT_SHF_LEN: u8 = 7;
    /// `usize_byt_len` returns the number of bytes to variable length encode the specfied usize value.
    #[inline]
    pub fn usize_byt_len(mut v: usize) -> usize {
        if v == 0 {
            return 1;
        }
        let mut len: usize = 0;
        while v > 0 {
            v >>= BIT_SHF_LEN;
            len += 1;
        }
        return len;
    }
    /// `usize_pck` encodes a usize to a [u8] and returns the number of bytes encoded.
    #[inline]
    pub fn usize_pck(mut v: usize, pck: &mut [u8]) -> usize {
        let mut p: usize = 0;
        while v >= 0x80 {
            pck[p] = BYT_HDR_MSK | (v as u8);
            v >>= BIT_SHF_LEN;
            p += 1;
        }
        pck[p] = v as u8;
        return p + 1;
    }
    /// `UsizeUnp` returns an unpacked usize value with the number of unpacked bytes.
    pub struct UsizeUnp {
        pub val: usize,
        pub len: usize,
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::fmt::Debug for UsizeUnp {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            match *self {
                UsizeUnp {
                    val: ref __self_0_0,
                    len: ref __self_0_1,
                } => {
                    let debug_trait_builder =
                        &mut ::core::fmt::Formatter::debug_struct(f, "UsizeUnp");
                    let _ = ::core::fmt::DebugStruct::field(
                        debug_trait_builder,
                        "val",
                        &&(*__self_0_0),
                    );
                    let _ = ::core::fmt::DebugStruct::field(
                        debug_trait_builder,
                        "len",
                        &&(*__self_0_1),
                    );
                    ::core::fmt::DebugStruct::finish(debug_trait_builder)
                }
            }
        }
    }
    /// `usize_unp` decodes a [u8] and returns a `UsizeUnp`.
    #[inline]
    pub fn usize_unp(pck: &[u8]) -> UsizeUnp {
        let mut r = UsizeUnp { val: 0, len: 0 };
        let mut shf: u8 = 0;
        for p in 0..pck.len() {
            r.val |= ((pck[p] & BYT_BDY_MSK) as usize) << shf;
            r.len += 1;
            if pck[p] & BYT_HDR_MSK == 0 {
                break;
            }
            shf += BIT_SHF_LEN;
        }
        return r;
    }
    /// `u32_byt_len` returns the number of bytes to variable length encode the specfied u32 value.
    #[inline]
    pub fn u32_byt_len(mut v: u32) -> usize {
        if v == 0 {
            return 1;
        }
        let mut len: usize = 0;
        while v > 0 {
            v >>= BIT_SHF_LEN;
            len += 1;
        }
        return len;
    }
    /// `u32_pck` encodes a u32 to a [u8] and returns the number of bytes encoded.
    #[inline]
    pub fn u32_pck(mut v: u32, pck: &mut [u8]) -> usize {
        let mut p: usize = 0;
        while v >= 0x80 {
            pck[p] = BYT_HDR_MSK | (v as u8);
            v >>= BIT_SHF_LEN;
            p += 1;
        }
        pck[p] = v as u8;
        return p + 1;
    }
    /// `U32Unp` returns an unpacked u32 value with the number of unpacked bytes.
    pub struct U32Unp {
        pub val: u32,
        pub len: usize,
    }
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::fmt::Debug for U32Unp {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            match *self {
                U32Unp {
                    val: ref __self_0_0,
                    len: ref __self_0_1,
                } => {
                    let debug_trait_builder =
                        &mut ::core::fmt::Formatter::debug_struct(f, "U32Unp");
                    let _ = ::core::fmt::DebugStruct::field(
                        debug_trait_builder,
                        "val",
                        &&(*__self_0_0),
                    );
                    let _ = ::core::fmt::DebugStruct::field(
                        debug_trait_builder,
                        "len",
                        &&(*__self_0_1),
                    );
                    ::core::fmt::DebugStruct::finish(debug_trait_builder)
                }
            }
        }
    }
    /// `u32_unp` decodes a [u8] and returns a `U32Unp`.
    #[inline]
    pub fn u32_unp(pck: &[u8]) -> U32Unp {
        let mut r = U32Unp { val: 0, len: 0 };
        let mut shf: u8 = 0;
        for p in 0..pck.len() {
            r.val |= ((pck[p] & BYT_BDY_MSK) as u32) << shf;
            r.len += 1;
            if pck[p] & BYT_HDR_MSK == 0 {
                break;
            }
            shf += BIT_SHF_LEN;
        }
        return r;
    }
    /// `u32s_byt_len` returns the byte length of variable length encoded u32s.
    #[inline]
    pub fn u32s_byt_len(blk: &[u32]) -> usize {
        let mut len: usize = 0;
        for n in 0..blk.len() {
            if blk[n] == 0 {
                len += 1;
                continue;
            }
            let mut v = blk[n];
            while v > 0 {
                len += 1;
                v >>= BIT_SHF_LEN;
            }
        }
        return len;
    }
    /// `u32s_pck` compresses u32s to variable length encoded bytes.
    ///
    /// `dst` is expected to be large enough.
    #[inline]
    pub fn u32s_pck(src: &[u32], dst: &mut [u8]) {
        let mut d: usize = 0;
        for s in 0..src.len() {
            let mut v = src[s];
            while v >= 0x80 {
                dst[d] = BYT_HDR_MSK | (v as u8);
                v >>= BIT_SHF_LEN;
                d += 1;
            }
            dst[d] = v as u8;
            d += 1;
        }
    }
    /// `u32s_unp` decompresses u32s from variable length encoded bytes.
    ///
    /// `dst` is expected to be zeroed out and large enough.
    #[inline]
    pub fn u32s_unp(src: &[u8], dst: &mut [u32]) {
        let mut shf: u8 = 0;
        let mut d: usize = 0;
        for s in 0..src.len() {
            dst[d] |= ((src[s] & BYT_BDY_MSK) as u32) << shf;
            shf += BIT_SHF_LEN;
            if src[s] & BYT_HDR_MSK == 0 {
                shf = 0;
                d += 1;
            }
        }
    }
}
use std::arch::x86_64::__m256i as m256;
use std::arch::x86_64::_mm256_add_epi32 as add;
use std::arch::x86_64::_mm256_and_si256 as and;
use std::arch::x86_64::_mm256_lddqu_si256 as load;
use std::arch::x86_64::_mm256_or_si256 as or;
use std::arch::x86_64::_mm256_set1_epi32 as set1;
use std::arch::x86_64::_mm256_slli_epi32 as lft;
use std::arch::x86_64::_mm256_srli_epi32 as rht;
use std::arch::x86_64::_mm256_storeu_si256 as store;
use std::arch::x86_64::_mm256_sub_epi32 as sub;
use std::ptr;
use core_simd::*;
use chrono::naive::{NaiveDate, NaiveDateTime, NaiveTime};
use chrono::Datelike;
use chrono::Duration;
use u32;
use i32;
/// `BIT_PER_BYT` is the number of bits per byte.
const BIT_PER_BYT: usize = 8;
/// `BIT_PER_ELM` is the number of bits per 32-bit element.
const BIT_PER_ELM: usize = 32;
/// `BIT_PER_LNE` is the number of bits per SIMD lane.
///
/// This is the same as `BIT_PER_ELM`, and can be convient to think in terms of SIMD lanes.
const BIT_PER_LNE: usize = 32;
/// `BIT_PER_SMD` is the number of bits per SIMD vector.
const BIT_PER_SMD: usize = 256;
/// `BYT_PER_SMD` is the number of bytes per SIMD vector.
const BYT_PER_SMD: usize = 32;
/// `ELM_PER_SMD` is the number of 32-bit elements per SIMD vector.
const ELM_PER_SMD: usize = 8;
/// `MIN_ELM_PER_BLK` is the inclusive minimum number of 32-bit elements per block.
/// This is two SIMD vectors.
const MIN_ELM_PER_BLK: usize = 16;
/// `BLK_256` is a block with 256 elements.
const BLK_256: usize = 256;
use mcr::u32_blk;
pub unsafe fn u32x256_pck(elm_bit_len: u8, fst: u32, unp: &[u32], pck: &mut [u8]) {
    let unp_ptr = unp.as_ptr() as *const m256;
    let pck_ptr = pck.as_mut_ptr() as *mut m256;
    match elm_bit_len {
        0u8 => {}
        1u8 => {
            let mut prv = set1(fst as i32);
            let mut cur = load(unp_ptr);
            let mut smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(1usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 1i32));
            prv = cur;
            cur = load(unp_ptr.add(2usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 2i32));
            prv = cur;
            cur = load(unp_ptr.add(3usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 3i32));
            prv = cur;
            cur = load(unp_ptr.add(4usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 4i32));
            prv = cur;
            cur = load(unp_ptr.add(5usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 5i32));
            prv = cur;
            cur = load(unp_ptr.add(6usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 6i32));
            prv = cur;
            cur = load(unp_ptr.add(7usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 7i32));
            prv = cur;
            cur = load(unp_ptr.add(8usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 8i32));
            prv = cur;
            cur = load(unp_ptr.add(9usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 9i32));
            prv = cur;
            cur = load(unp_ptr.add(10usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 10i32));
            prv = cur;
            cur = load(unp_ptr.add(11usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 11i32));
            prv = cur;
            cur = load(unp_ptr.add(12usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 12i32));
            prv = cur;
            cur = load(unp_ptr.add(13usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 13i32));
            prv = cur;
            cur = load(unp_ptr.add(14usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 14i32));
            prv = cur;
            cur = load(unp_ptr.add(15usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 15i32));
            prv = cur;
            cur = load(unp_ptr.add(16usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 16i32));
            prv = cur;
            cur = load(unp_ptr.add(17usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 17i32));
            prv = cur;
            cur = load(unp_ptr.add(18usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 18i32));
            prv = cur;
            cur = load(unp_ptr.add(19usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 19i32));
            prv = cur;
            cur = load(unp_ptr.add(20usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 20i32));
            prv = cur;
            cur = load(unp_ptr.add(21usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 21i32));
            prv = cur;
            cur = load(unp_ptr.add(22usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 22i32));
            prv = cur;
            cur = load(unp_ptr.add(23usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 23i32));
            prv = cur;
            cur = load(unp_ptr.add(24usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 24i32));
            prv = cur;
            cur = load(unp_ptr.add(25usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 25i32));
            prv = cur;
            cur = load(unp_ptr.add(26usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 26i32));
            prv = cur;
            cur = load(unp_ptr.add(27usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 27i32));
            prv = cur;
            cur = load(unp_ptr.add(28usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 28i32));
            prv = cur;
            cur = load(unp_ptr.add(29usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 29i32));
            prv = cur;
            cur = load(unp_ptr.add(30usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 30i32));
            prv = cur;
            store(
                pck_ptr.add(0usize),
                or(smd_pck, lft(sub(load(unp_ptr.add(31usize)), prv), 31i32)),
            );
        }
        2u8 => {
            let mut prv = set1(fst as i32);
            let mut cur = load(unp_ptr);
            let mut smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(1usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 2i32));
            prv = cur;
            cur = load(unp_ptr.add(2usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 4i32));
            prv = cur;
            cur = load(unp_ptr.add(3usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 6i32));
            prv = cur;
            cur = load(unp_ptr.add(4usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 8i32));
            prv = cur;
            cur = load(unp_ptr.add(5usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 10i32));
            prv = cur;
            cur = load(unp_ptr.add(6usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 12i32));
            prv = cur;
            cur = load(unp_ptr.add(7usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 14i32));
            prv = cur;
            cur = load(unp_ptr.add(8usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 16i32));
            prv = cur;
            cur = load(unp_ptr.add(9usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 18i32));
            prv = cur;
            cur = load(unp_ptr.add(10usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 20i32));
            prv = cur;
            cur = load(unp_ptr.add(11usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 22i32));
            prv = cur;
            cur = load(unp_ptr.add(12usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 24i32));
            prv = cur;
            cur = load(unp_ptr.add(13usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 26i32));
            prv = cur;
            cur = load(unp_ptr.add(14usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 28i32));
            prv = cur;
            cur = load(unp_ptr.add(15usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 30i32));
            prv = cur;
            store(pck_ptr.add(0usize), smd_pck);
            cur = load(unp_ptr.add(16usize));
            smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(17usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 2i32));
            prv = cur;
            cur = load(unp_ptr.add(18usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 4i32));
            prv = cur;
            cur = load(unp_ptr.add(19usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 6i32));
            prv = cur;
            cur = load(unp_ptr.add(20usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 8i32));
            prv = cur;
            cur = load(unp_ptr.add(21usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 10i32));
            prv = cur;
            cur = load(unp_ptr.add(22usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 12i32));
            prv = cur;
            cur = load(unp_ptr.add(23usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 14i32));
            prv = cur;
            cur = load(unp_ptr.add(24usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 16i32));
            prv = cur;
            cur = load(unp_ptr.add(25usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 18i32));
            prv = cur;
            cur = load(unp_ptr.add(26usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 20i32));
            prv = cur;
            cur = load(unp_ptr.add(27usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 22i32));
            prv = cur;
            cur = load(unp_ptr.add(28usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 24i32));
            prv = cur;
            cur = load(unp_ptr.add(29usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 26i32));
            prv = cur;
            cur = load(unp_ptr.add(30usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 28i32));
            prv = cur;
            store(
                pck_ptr.add(1usize),
                or(smd_pck, lft(sub(load(unp_ptr.add(31usize)), prv), 30i32)),
            );
        }
        3u8 => {
            let mut prv = set1(fst as i32);
            let mut cur = load(unp_ptr);
            let mut smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(1usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 3i32));
            prv = cur;
            cur = load(unp_ptr.add(2usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 6i32));
            prv = cur;
            cur = load(unp_ptr.add(3usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 9i32));
            prv = cur;
            cur = load(unp_ptr.add(4usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 12i32));
            prv = cur;
            cur = load(unp_ptr.add(5usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 15i32));
            prv = cur;
            cur = load(unp_ptr.add(6usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 18i32));
            prv = cur;
            cur = load(unp_ptr.add(7usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 21i32));
            prv = cur;
            cur = load(unp_ptr.add(8usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 24i32));
            prv = cur;
            cur = load(unp_ptr.add(9usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 27i32));
            prv = cur;
            cur = load(unp_ptr.add(10usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 30i32));
            prv = cur;
            store(pck_ptr.add(0usize), smd_pck);
            smd_pck = rht(dlt, 2i32);
            cur = load(unp_ptr.add(11usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 1i32));
            prv = cur;
            cur = load(unp_ptr.add(12usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 4i32));
            prv = cur;
            cur = load(unp_ptr.add(13usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 7i32));
            prv = cur;
            cur = load(unp_ptr.add(14usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 10i32));
            prv = cur;
            cur = load(unp_ptr.add(15usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 13i32));
            prv = cur;
            cur = load(unp_ptr.add(16usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 16i32));
            prv = cur;
            cur = load(unp_ptr.add(17usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 19i32));
            prv = cur;
            cur = load(unp_ptr.add(18usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 22i32));
            prv = cur;
            cur = load(unp_ptr.add(19usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 25i32));
            prv = cur;
            cur = load(unp_ptr.add(20usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 28i32));
            prv = cur;
            cur = load(unp_ptr.add(21usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 31i32));
            prv = cur;
            store(pck_ptr.add(1usize), smd_pck);
            smd_pck = rht(dlt, 1i32);
            cur = load(unp_ptr.add(22usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 2i32));
            prv = cur;
            cur = load(unp_ptr.add(23usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 5i32));
            prv = cur;
            cur = load(unp_ptr.add(24usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 8i32));
            prv = cur;
            cur = load(unp_ptr.add(25usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 11i32));
            prv = cur;
            cur = load(unp_ptr.add(26usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 14i32));
            prv = cur;
            cur = load(unp_ptr.add(27usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 17i32));
            prv = cur;
            cur = load(unp_ptr.add(28usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 20i32));
            prv = cur;
            cur = load(unp_ptr.add(29usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 23i32));
            prv = cur;
            cur = load(unp_ptr.add(30usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 26i32));
            prv = cur;
            store(
                pck_ptr.add(2usize),
                or(smd_pck, lft(sub(load(unp_ptr.add(31usize)), prv), 29i32)),
            );
        }
        4u8 => {
            let mut prv = set1(fst as i32);
            let mut cur = load(unp_ptr);
            let mut smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(1usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 4i32));
            prv = cur;
            cur = load(unp_ptr.add(2usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 8i32));
            prv = cur;
            cur = load(unp_ptr.add(3usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 12i32));
            prv = cur;
            cur = load(unp_ptr.add(4usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 16i32));
            prv = cur;
            cur = load(unp_ptr.add(5usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 20i32));
            prv = cur;
            cur = load(unp_ptr.add(6usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 24i32));
            prv = cur;
            cur = load(unp_ptr.add(7usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 28i32));
            prv = cur;
            store(pck_ptr.add(0usize), smd_pck);
            cur = load(unp_ptr.add(8usize));
            smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(9usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 4i32));
            prv = cur;
            cur = load(unp_ptr.add(10usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 8i32));
            prv = cur;
            cur = load(unp_ptr.add(11usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 12i32));
            prv = cur;
            cur = load(unp_ptr.add(12usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 16i32));
            prv = cur;
            cur = load(unp_ptr.add(13usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 20i32));
            prv = cur;
            cur = load(unp_ptr.add(14usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 24i32));
            prv = cur;
            cur = load(unp_ptr.add(15usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 28i32));
            prv = cur;
            store(pck_ptr.add(1usize), smd_pck);
            cur = load(unp_ptr.add(16usize));
            smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(17usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 4i32));
            prv = cur;
            cur = load(unp_ptr.add(18usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 8i32));
            prv = cur;
            cur = load(unp_ptr.add(19usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 12i32));
            prv = cur;
            cur = load(unp_ptr.add(20usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 16i32));
            prv = cur;
            cur = load(unp_ptr.add(21usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 20i32));
            prv = cur;
            cur = load(unp_ptr.add(22usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 24i32));
            prv = cur;
            cur = load(unp_ptr.add(23usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 28i32));
            prv = cur;
            store(pck_ptr.add(2usize), smd_pck);
            cur = load(unp_ptr.add(24usize));
            smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(25usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 4i32));
            prv = cur;
            cur = load(unp_ptr.add(26usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 8i32));
            prv = cur;
            cur = load(unp_ptr.add(27usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 12i32));
            prv = cur;
            cur = load(unp_ptr.add(28usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 16i32));
            prv = cur;
            cur = load(unp_ptr.add(29usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 20i32));
            prv = cur;
            cur = load(unp_ptr.add(30usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 24i32));
            prv = cur;
            store(
                pck_ptr.add(3usize),
                or(smd_pck, lft(sub(load(unp_ptr.add(31usize)), prv), 28i32)),
            );
        }
        5u8 => {
            let mut prv = set1(fst as i32);
            let mut cur = load(unp_ptr);
            let mut smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(1usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 5i32));
            prv = cur;
            cur = load(unp_ptr.add(2usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 10i32));
            prv = cur;
            cur = load(unp_ptr.add(3usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 15i32));
            prv = cur;
            cur = load(unp_ptr.add(4usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 20i32));
            prv = cur;
            cur = load(unp_ptr.add(5usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 25i32));
            prv = cur;
            cur = load(unp_ptr.add(6usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 30i32));
            prv = cur;
            store(pck_ptr.add(0usize), smd_pck);
            smd_pck = rht(dlt, 2i32);
            cur = load(unp_ptr.add(7usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 3i32));
            prv = cur;
            cur = load(unp_ptr.add(8usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 8i32));
            prv = cur;
            cur = load(unp_ptr.add(9usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 13i32));
            prv = cur;
            cur = load(unp_ptr.add(10usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 18i32));
            prv = cur;
            cur = load(unp_ptr.add(11usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 23i32));
            prv = cur;
            cur = load(unp_ptr.add(12usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 28i32));
            prv = cur;
            store(pck_ptr.add(1usize), smd_pck);
            smd_pck = rht(dlt, 4i32);
            cur = load(unp_ptr.add(13usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 1i32));
            prv = cur;
            cur = load(unp_ptr.add(14usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 6i32));
            prv = cur;
            cur = load(unp_ptr.add(15usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 11i32));
            prv = cur;
            cur = load(unp_ptr.add(16usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 16i32));
            prv = cur;
            cur = load(unp_ptr.add(17usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 21i32));
            prv = cur;
            cur = load(unp_ptr.add(18usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 26i32));
            prv = cur;
            cur = load(unp_ptr.add(19usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 31i32));
            prv = cur;
            store(pck_ptr.add(2usize), smd_pck);
            smd_pck = rht(dlt, 1i32);
            cur = load(unp_ptr.add(20usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 4i32));
            prv = cur;
            cur = load(unp_ptr.add(21usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 9i32));
            prv = cur;
            cur = load(unp_ptr.add(22usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 14i32));
            prv = cur;
            cur = load(unp_ptr.add(23usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 19i32));
            prv = cur;
            cur = load(unp_ptr.add(24usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 24i32));
            prv = cur;
            cur = load(unp_ptr.add(25usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 29i32));
            prv = cur;
            store(pck_ptr.add(3usize), smd_pck);
            smd_pck = rht(dlt, 3i32);
            cur = load(unp_ptr.add(26usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 2i32));
            prv = cur;
            cur = load(unp_ptr.add(27usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 7i32));
            prv = cur;
            cur = load(unp_ptr.add(28usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 12i32));
            prv = cur;
            cur = load(unp_ptr.add(29usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 17i32));
            prv = cur;
            cur = load(unp_ptr.add(30usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 22i32));
            prv = cur;
            store(
                pck_ptr.add(4usize),
                or(smd_pck, lft(sub(load(unp_ptr.add(31usize)), prv), 27i32)),
            );
        }
        6u8 => {
            let mut prv = set1(fst as i32);
            let mut cur = load(unp_ptr);
            let mut smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(1usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 6i32));
            prv = cur;
            cur = load(unp_ptr.add(2usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 12i32));
            prv = cur;
            cur = load(unp_ptr.add(3usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 18i32));
            prv = cur;
            cur = load(unp_ptr.add(4usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 24i32));
            prv = cur;
            cur = load(unp_ptr.add(5usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 30i32));
            prv = cur;
            store(pck_ptr.add(0usize), smd_pck);
            smd_pck = rht(dlt, 2i32);
            cur = load(unp_ptr.add(6usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 4i32));
            prv = cur;
            cur = load(unp_ptr.add(7usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 10i32));
            prv = cur;
            cur = load(unp_ptr.add(8usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 16i32));
            prv = cur;
            cur = load(unp_ptr.add(9usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 22i32));
            prv = cur;
            cur = load(unp_ptr.add(10usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 28i32));
            prv = cur;
            store(pck_ptr.add(1usize), smd_pck);
            smd_pck = rht(dlt, 4i32);
            cur = load(unp_ptr.add(11usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 2i32));
            prv = cur;
            cur = load(unp_ptr.add(12usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 8i32));
            prv = cur;
            cur = load(unp_ptr.add(13usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 14i32));
            prv = cur;
            cur = load(unp_ptr.add(14usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 20i32));
            prv = cur;
            cur = load(unp_ptr.add(15usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 26i32));
            prv = cur;
            store(pck_ptr.add(2usize), smd_pck);
            cur = load(unp_ptr.add(16usize));
            smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(17usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 6i32));
            prv = cur;
            cur = load(unp_ptr.add(18usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 12i32));
            prv = cur;
            cur = load(unp_ptr.add(19usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 18i32));
            prv = cur;
            cur = load(unp_ptr.add(20usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 24i32));
            prv = cur;
            cur = load(unp_ptr.add(21usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 30i32));
            prv = cur;
            store(pck_ptr.add(3usize), smd_pck);
            smd_pck = rht(dlt, 2i32);
            cur = load(unp_ptr.add(22usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 4i32));
            prv = cur;
            cur = load(unp_ptr.add(23usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 10i32));
            prv = cur;
            cur = load(unp_ptr.add(24usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 16i32));
            prv = cur;
            cur = load(unp_ptr.add(25usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 22i32));
            prv = cur;
            cur = load(unp_ptr.add(26usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 28i32));
            prv = cur;
            store(pck_ptr.add(4usize), smd_pck);
            smd_pck = rht(dlt, 4i32);
            cur = load(unp_ptr.add(27usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 2i32));
            prv = cur;
            cur = load(unp_ptr.add(28usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 8i32));
            prv = cur;
            cur = load(unp_ptr.add(29usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 14i32));
            prv = cur;
            cur = load(unp_ptr.add(30usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 20i32));
            prv = cur;
            store(
                pck_ptr.add(5usize),
                or(smd_pck, lft(sub(load(unp_ptr.add(31usize)), prv), 26i32)),
            );
        }
        7u8 => {
            let mut prv = set1(fst as i32);
            let mut cur = load(unp_ptr);
            let mut smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(1usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 7i32));
            prv = cur;
            cur = load(unp_ptr.add(2usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 14i32));
            prv = cur;
            cur = load(unp_ptr.add(3usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 21i32));
            prv = cur;
            cur = load(unp_ptr.add(4usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 28i32));
            prv = cur;
            store(pck_ptr.add(0usize), smd_pck);
            smd_pck = rht(dlt, 4i32);
            cur = load(unp_ptr.add(5usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 3i32));
            prv = cur;
            cur = load(unp_ptr.add(6usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 10i32));
            prv = cur;
            cur = load(unp_ptr.add(7usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 17i32));
            prv = cur;
            cur = load(unp_ptr.add(8usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 24i32));
            prv = cur;
            cur = load(unp_ptr.add(9usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 31i32));
            prv = cur;
            store(pck_ptr.add(1usize), smd_pck);
            smd_pck = rht(dlt, 1i32);
            cur = load(unp_ptr.add(10usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 6i32));
            prv = cur;
            cur = load(unp_ptr.add(11usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 13i32));
            prv = cur;
            cur = load(unp_ptr.add(12usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 20i32));
            prv = cur;
            cur = load(unp_ptr.add(13usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 27i32));
            prv = cur;
            store(pck_ptr.add(2usize), smd_pck);
            smd_pck = rht(dlt, 5i32);
            cur = load(unp_ptr.add(14usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 2i32));
            prv = cur;
            cur = load(unp_ptr.add(15usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 9i32));
            prv = cur;
            cur = load(unp_ptr.add(16usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 16i32));
            prv = cur;
            cur = load(unp_ptr.add(17usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 23i32));
            prv = cur;
            cur = load(unp_ptr.add(18usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 30i32));
            prv = cur;
            store(pck_ptr.add(3usize), smd_pck);
            smd_pck = rht(dlt, 2i32);
            cur = load(unp_ptr.add(19usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 5i32));
            prv = cur;
            cur = load(unp_ptr.add(20usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 12i32));
            prv = cur;
            cur = load(unp_ptr.add(21usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 19i32));
            prv = cur;
            cur = load(unp_ptr.add(22usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 26i32));
            prv = cur;
            store(pck_ptr.add(4usize), smd_pck);
            smd_pck = rht(dlt, 6i32);
            cur = load(unp_ptr.add(23usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 1i32));
            prv = cur;
            cur = load(unp_ptr.add(24usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 8i32));
            prv = cur;
            cur = load(unp_ptr.add(25usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 15i32));
            prv = cur;
            cur = load(unp_ptr.add(26usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 22i32));
            prv = cur;
            cur = load(unp_ptr.add(27usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 29i32));
            prv = cur;
            store(pck_ptr.add(5usize), smd_pck);
            smd_pck = rht(dlt, 3i32);
            cur = load(unp_ptr.add(28usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 4i32));
            prv = cur;
            cur = load(unp_ptr.add(29usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 11i32));
            prv = cur;
            cur = load(unp_ptr.add(30usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 18i32));
            prv = cur;
            store(
                pck_ptr.add(6usize),
                or(smd_pck, lft(sub(load(unp_ptr.add(31usize)), prv), 25i32)),
            );
        }
        8u8 => {
            let mut prv = set1(fst as i32);
            let mut cur = load(unp_ptr);
            let mut smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(1usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 8i32));
            prv = cur;
            cur = load(unp_ptr.add(2usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 16i32));
            prv = cur;
            cur = load(unp_ptr.add(3usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 24i32));
            prv = cur;
            store(pck_ptr.add(0usize), smd_pck);
            cur = load(unp_ptr.add(4usize));
            smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(5usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 8i32));
            prv = cur;
            cur = load(unp_ptr.add(6usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 16i32));
            prv = cur;
            cur = load(unp_ptr.add(7usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 24i32));
            prv = cur;
            store(pck_ptr.add(1usize), smd_pck);
            cur = load(unp_ptr.add(8usize));
            smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(9usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 8i32));
            prv = cur;
            cur = load(unp_ptr.add(10usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 16i32));
            prv = cur;
            cur = load(unp_ptr.add(11usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 24i32));
            prv = cur;
            store(pck_ptr.add(2usize), smd_pck);
            cur = load(unp_ptr.add(12usize));
            smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(13usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 8i32));
            prv = cur;
            cur = load(unp_ptr.add(14usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 16i32));
            prv = cur;
            cur = load(unp_ptr.add(15usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 24i32));
            prv = cur;
            store(pck_ptr.add(3usize), smd_pck);
            cur = load(unp_ptr.add(16usize));
            smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(17usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 8i32));
            prv = cur;
            cur = load(unp_ptr.add(18usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 16i32));
            prv = cur;
            cur = load(unp_ptr.add(19usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 24i32));
            prv = cur;
            store(pck_ptr.add(4usize), smd_pck);
            cur = load(unp_ptr.add(20usize));
            smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(21usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 8i32));
            prv = cur;
            cur = load(unp_ptr.add(22usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 16i32));
            prv = cur;
            cur = load(unp_ptr.add(23usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 24i32));
            prv = cur;
            store(pck_ptr.add(5usize), smd_pck);
            cur = load(unp_ptr.add(24usize));
            smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(25usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 8i32));
            prv = cur;
            cur = load(unp_ptr.add(26usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 16i32));
            prv = cur;
            cur = load(unp_ptr.add(27usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 24i32));
            prv = cur;
            store(pck_ptr.add(6usize), smd_pck);
            cur = load(unp_ptr.add(28usize));
            smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(29usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 8i32));
            prv = cur;
            cur = load(unp_ptr.add(30usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 16i32));
            prv = cur;
            store(
                pck_ptr.add(7usize),
                or(smd_pck, lft(sub(load(unp_ptr.add(31usize)), prv), 24i32)),
            );
        }
        9u8 => {
            let mut prv = set1(fst as i32);
            let mut cur = load(unp_ptr);
            let mut smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(1usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 9i32));
            prv = cur;
            cur = load(unp_ptr.add(2usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 18i32));
            prv = cur;
            cur = load(unp_ptr.add(3usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 27i32));
            prv = cur;
            store(pck_ptr.add(0usize), smd_pck);
            smd_pck = rht(dlt, 5i32);
            cur = load(unp_ptr.add(4usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 4i32));
            prv = cur;
            cur = load(unp_ptr.add(5usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 13i32));
            prv = cur;
            cur = load(unp_ptr.add(6usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 22i32));
            prv = cur;
            cur = load(unp_ptr.add(7usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 31i32));
            prv = cur;
            store(pck_ptr.add(1usize), smd_pck);
            smd_pck = rht(dlt, 1i32);
            cur = load(unp_ptr.add(8usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 8i32));
            prv = cur;
            cur = load(unp_ptr.add(9usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 17i32));
            prv = cur;
            cur = load(unp_ptr.add(10usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 26i32));
            prv = cur;
            store(pck_ptr.add(2usize), smd_pck);
            smd_pck = rht(dlt, 6i32);
            cur = load(unp_ptr.add(11usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 3i32));
            prv = cur;
            cur = load(unp_ptr.add(12usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 12i32));
            prv = cur;
            cur = load(unp_ptr.add(13usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 21i32));
            prv = cur;
            cur = load(unp_ptr.add(14usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 30i32));
            prv = cur;
            store(pck_ptr.add(3usize), smd_pck);
            smd_pck = rht(dlt, 2i32);
            cur = load(unp_ptr.add(15usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 7i32));
            prv = cur;
            cur = load(unp_ptr.add(16usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 16i32));
            prv = cur;
            cur = load(unp_ptr.add(17usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 25i32));
            prv = cur;
            store(pck_ptr.add(4usize), smd_pck);
            smd_pck = rht(dlt, 7i32);
            cur = load(unp_ptr.add(18usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 2i32));
            prv = cur;
            cur = load(unp_ptr.add(19usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 11i32));
            prv = cur;
            cur = load(unp_ptr.add(20usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 20i32));
            prv = cur;
            cur = load(unp_ptr.add(21usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 29i32));
            prv = cur;
            store(pck_ptr.add(5usize), smd_pck);
            smd_pck = rht(dlt, 3i32);
            cur = load(unp_ptr.add(22usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 6i32));
            prv = cur;
            cur = load(unp_ptr.add(23usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 15i32));
            prv = cur;
            cur = load(unp_ptr.add(24usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 24i32));
            prv = cur;
            store(pck_ptr.add(6usize), smd_pck);
            smd_pck = rht(dlt, 8i32);
            cur = load(unp_ptr.add(25usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 1i32));
            prv = cur;
            cur = load(unp_ptr.add(26usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 10i32));
            prv = cur;
            cur = load(unp_ptr.add(27usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 19i32));
            prv = cur;
            cur = load(unp_ptr.add(28usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 28i32));
            prv = cur;
            store(pck_ptr.add(7usize), smd_pck);
            smd_pck = rht(dlt, 4i32);
            cur = load(unp_ptr.add(29usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 5i32));
            prv = cur;
            cur = load(unp_ptr.add(30usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 14i32));
            prv = cur;
            store(
                pck_ptr.add(8usize),
                or(smd_pck, lft(sub(load(unp_ptr.add(31usize)), prv), 23i32)),
            );
        }
        10u8 => {
            let mut prv = set1(fst as i32);
            let mut cur = load(unp_ptr);
            let mut smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(1usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 10i32));
            prv = cur;
            cur = load(unp_ptr.add(2usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 20i32));
            prv = cur;
            cur = load(unp_ptr.add(3usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 30i32));
            prv = cur;
            store(pck_ptr.add(0usize), smd_pck);
            smd_pck = rht(dlt, 2i32);
            cur = load(unp_ptr.add(4usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 8i32));
            prv = cur;
            cur = load(unp_ptr.add(5usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 18i32));
            prv = cur;
            cur = load(unp_ptr.add(6usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 28i32));
            prv = cur;
            store(pck_ptr.add(1usize), smd_pck);
            smd_pck = rht(dlt, 4i32);
            cur = load(unp_ptr.add(7usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 6i32));
            prv = cur;
            cur = load(unp_ptr.add(8usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 16i32));
            prv = cur;
            cur = load(unp_ptr.add(9usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 26i32));
            prv = cur;
            store(pck_ptr.add(2usize), smd_pck);
            smd_pck = rht(dlt, 6i32);
            cur = load(unp_ptr.add(10usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 4i32));
            prv = cur;
            cur = load(unp_ptr.add(11usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 14i32));
            prv = cur;
            cur = load(unp_ptr.add(12usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 24i32));
            prv = cur;
            store(pck_ptr.add(3usize), smd_pck);
            smd_pck = rht(dlt, 8i32);
            cur = load(unp_ptr.add(13usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 2i32));
            prv = cur;
            cur = load(unp_ptr.add(14usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 12i32));
            prv = cur;
            cur = load(unp_ptr.add(15usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 22i32));
            prv = cur;
            store(pck_ptr.add(4usize), smd_pck);
            cur = load(unp_ptr.add(16usize));
            smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(17usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 10i32));
            prv = cur;
            cur = load(unp_ptr.add(18usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 20i32));
            prv = cur;
            cur = load(unp_ptr.add(19usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 30i32));
            prv = cur;
            store(pck_ptr.add(5usize), smd_pck);
            smd_pck = rht(dlt, 2i32);
            cur = load(unp_ptr.add(20usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 8i32));
            prv = cur;
            cur = load(unp_ptr.add(21usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 18i32));
            prv = cur;
            cur = load(unp_ptr.add(22usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 28i32));
            prv = cur;
            store(pck_ptr.add(6usize), smd_pck);
            smd_pck = rht(dlt, 4i32);
            cur = load(unp_ptr.add(23usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 6i32));
            prv = cur;
            cur = load(unp_ptr.add(24usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 16i32));
            prv = cur;
            cur = load(unp_ptr.add(25usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 26i32));
            prv = cur;
            store(pck_ptr.add(7usize), smd_pck);
            smd_pck = rht(dlt, 6i32);
            cur = load(unp_ptr.add(26usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 4i32));
            prv = cur;
            cur = load(unp_ptr.add(27usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 14i32));
            prv = cur;
            cur = load(unp_ptr.add(28usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 24i32));
            prv = cur;
            store(pck_ptr.add(8usize), smd_pck);
            smd_pck = rht(dlt, 8i32);
            cur = load(unp_ptr.add(29usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 2i32));
            prv = cur;
            cur = load(unp_ptr.add(30usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 12i32));
            prv = cur;
            store(
                pck_ptr.add(9usize),
                or(smd_pck, lft(sub(load(unp_ptr.add(31usize)), prv), 22i32)),
            );
        }
        11u8 => {
            let mut prv = set1(fst as i32);
            let mut cur = load(unp_ptr);
            let mut smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(1usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 11i32));
            prv = cur;
            cur = load(unp_ptr.add(2usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 22i32));
            prv = cur;
            store(pck_ptr.add(0usize), smd_pck);
            smd_pck = rht(dlt, 10i32);
            cur = load(unp_ptr.add(3usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 1i32));
            prv = cur;
            cur = load(unp_ptr.add(4usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 12i32));
            prv = cur;
            cur = load(unp_ptr.add(5usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 23i32));
            prv = cur;
            store(pck_ptr.add(1usize), smd_pck);
            smd_pck = rht(dlt, 9i32);
            cur = load(unp_ptr.add(6usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 2i32));
            prv = cur;
            cur = load(unp_ptr.add(7usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 13i32));
            prv = cur;
            cur = load(unp_ptr.add(8usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 24i32));
            prv = cur;
            store(pck_ptr.add(2usize), smd_pck);
            smd_pck = rht(dlt, 8i32);
            cur = load(unp_ptr.add(9usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 3i32));
            prv = cur;
            cur = load(unp_ptr.add(10usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 14i32));
            prv = cur;
            cur = load(unp_ptr.add(11usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 25i32));
            prv = cur;
            store(pck_ptr.add(3usize), smd_pck);
            smd_pck = rht(dlt, 7i32);
            cur = load(unp_ptr.add(12usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 4i32));
            prv = cur;
            cur = load(unp_ptr.add(13usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 15i32));
            prv = cur;
            cur = load(unp_ptr.add(14usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 26i32));
            prv = cur;
            store(pck_ptr.add(4usize), smd_pck);
            smd_pck = rht(dlt, 6i32);
            cur = load(unp_ptr.add(15usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 5i32));
            prv = cur;
            cur = load(unp_ptr.add(16usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 16i32));
            prv = cur;
            cur = load(unp_ptr.add(17usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 27i32));
            prv = cur;
            store(pck_ptr.add(5usize), smd_pck);
            smd_pck = rht(dlt, 5i32);
            cur = load(unp_ptr.add(18usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 6i32));
            prv = cur;
            cur = load(unp_ptr.add(19usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 17i32));
            prv = cur;
            cur = load(unp_ptr.add(20usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 28i32));
            prv = cur;
            store(pck_ptr.add(6usize), smd_pck);
            smd_pck = rht(dlt, 4i32);
            cur = load(unp_ptr.add(21usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 7i32));
            prv = cur;
            cur = load(unp_ptr.add(22usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 18i32));
            prv = cur;
            cur = load(unp_ptr.add(23usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 29i32));
            prv = cur;
            store(pck_ptr.add(7usize), smd_pck);
            smd_pck = rht(dlt, 3i32);
            cur = load(unp_ptr.add(24usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 8i32));
            prv = cur;
            cur = load(unp_ptr.add(25usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 19i32));
            prv = cur;
            cur = load(unp_ptr.add(26usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 30i32));
            prv = cur;
            store(pck_ptr.add(8usize), smd_pck);
            smd_pck = rht(dlt, 2i32);
            cur = load(unp_ptr.add(27usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 9i32));
            prv = cur;
            cur = load(unp_ptr.add(28usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 20i32));
            prv = cur;
            cur = load(unp_ptr.add(29usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 31i32));
            prv = cur;
            store(pck_ptr.add(9usize), smd_pck);
            smd_pck = rht(dlt, 1i32);
            cur = load(unp_ptr.add(30usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 10i32));
            prv = cur;
            store(
                pck_ptr.add(10usize),
                or(smd_pck, lft(sub(load(unp_ptr.add(31usize)), prv), 21i32)),
            );
        }
        12u8 => {
            let mut prv = set1(fst as i32);
            let mut cur = load(unp_ptr);
            let mut smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(1usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 12i32));
            prv = cur;
            cur = load(unp_ptr.add(2usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 24i32));
            prv = cur;
            store(pck_ptr.add(0usize), smd_pck);
            smd_pck = rht(dlt, 8i32);
            cur = load(unp_ptr.add(3usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 4i32));
            prv = cur;
            cur = load(unp_ptr.add(4usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 16i32));
            prv = cur;
            cur = load(unp_ptr.add(5usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 28i32));
            prv = cur;
            store(pck_ptr.add(1usize), smd_pck);
            smd_pck = rht(dlt, 4i32);
            cur = load(unp_ptr.add(6usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 8i32));
            prv = cur;
            cur = load(unp_ptr.add(7usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 20i32));
            prv = cur;
            store(pck_ptr.add(2usize), smd_pck);
            cur = load(unp_ptr.add(8usize));
            smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(9usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 12i32));
            prv = cur;
            cur = load(unp_ptr.add(10usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 24i32));
            prv = cur;
            store(pck_ptr.add(3usize), smd_pck);
            smd_pck = rht(dlt, 8i32);
            cur = load(unp_ptr.add(11usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 4i32));
            prv = cur;
            cur = load(unp_ptr.add(12usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 16i32));
            prv = cur;
            cur = load(unp_ptr.add(13usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 28i32));
            prv = cur;
            store(pck_ptr.add(4usize), smd_pck);
            smd_pck = rht(dlt, 4i32);
            cur = load(unp_ptr.add(14usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 8i32));
            prv = cur;
            cur = load(unp_ptr.add(15usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 20i32));
            prv = cur;
            store(pck_ptr.add(5usize), smd_pck);
            cur = load(unp_ptr.add(16usize));
            smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(17usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 12i32));
            prv = cur;
            cur = load(unp_ptr.add(18usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 24i32));
            prv = cur;
            store(pck_ptr.add(6usize), smd_pck);
            smd_pck = rht(dlt, 8i32);
            cur = load(unp_ptr.add(19usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 4i32));
            prv = cur;
            cur = load(unp_ptr.add(20usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 16i32));
            prv = cur;
            cur = load(unp_ptr.add(21usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 28i32));
            prv = cur;
            store(pck_ptr.add(7usize), smd_pck);
            smd_pck = rht(dlt, 4i32);
            cur = load(unp_ptr.add(22usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 8i32));
            prv = cur;
            cur = load(unp_ptr.add(23usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 20i32));
            prv = cur;
            store(pck_ptr.add(8usize), smd_pck);
            cur = load(unp_ptr.add(24usize));
            smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(25usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 12i32));
            prv = cur;
            cur = load(unp_ptr.add(26usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 24i32));
            prv = cur;
            store(pck_ptr.add(9usize), smd_pck);
            smd_pck = rht(dlt, 8i32);
            cur = load(unp_ptr.add(27usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 4i32));
            prv = cur;
            cur = load(unp_ptr.add(28usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 16i32));
            prv = cur;
            cur = load(unp_ptr.add(29usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 28i32));
            prv = cur;
            store(pck_ptr.add(10usize), smd_pck);
            smd_pck = rht(dlt, 4i32);
            cur = load(unp_ptr.add(30usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 8i32));
            prv = cur;
            store(
                pck_ptr.add(11usize),
                or(smd_pck, lft(sub(load(unp_ptr.add(31usize)), prv), 20i32)),
            );
        }
        13u8 => {
            let mut prv = set1(fst as i32);
            let mut cur = load(unp_ptr);
            let mut smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(1usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 13i32));
            prv = cur;
            cur = load(unp_ptr.add(2usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 26i32));
            prv = cur;
            store(pck_ptr.add(0usize), smd_pck);
            smd_pck = rht(dlt, 6i32);
            cur = load(unp_ptr.add(3usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 7i32));
            prv = cur;
            cur = load(unp_ptr.add(4usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 20i32));
            prv = cur;
            store(pck_ptr.add(1usize), smd_pck);
            smd_pck = rht(dlt, 12i32);
            cur = load(unp_ptr.add(5usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 1i32));
            prv = cur;
            cur = load(unp_ptr.add(6usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 14i32));
            prv = cur;
            cur = load(unp_ptr.add(7usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 27i32));
            prv = cur;
            store(pck_ptr.add(2usize), smd_pck);
            smd_pck = rht(dlt, 5i32);
            cur = load(unp_ptr.add(8usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 8i32));
            prv = cur;
            cur = load(unp_ptr.add(9usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 21i32));
            prv = cur;
            store(pck_ptr.add(3usize), smd_pck);
            smd_pck = rht(dlt, 11i32);
            cur = load(unp_ptr.add(10usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 2i32));
            prv = cur;
            cur = load(unp_ptr.add(11usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 15i32));
            prv = cur;
            cur = load(unp_ptr.add(12usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 28i32));
            prv = cur;
            store(pck_ptr.add(4usize), smd_pck);
            smd_pck = rht(dlt, 4i32);
            cur = load(unp_ptr.add(13usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 9i32));
            prv = cur;
            cur = load(unp_ptr.add(14usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 22i32));
            prv = cur;
            store(pck_ptr.add(5usize), smd_pck);
            smd_pck = rht(dlt, 10i32);
            cur = load(unp_ptr.add(15usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 3i32));
            prv = cur;
            cur = load(unp_ptr.add(16usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 16i32));
            prv = cur;
            cur = load(unp_ptr.add(17usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 29i32));
            prv = cur;
            store(pck_ptr.add(6usize), smd_pck);
            smd_pck = rht(dlt, 3i32);
            cur = load(unp_ptr.add(18usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 10i32));
            prv = cur;
            cur = load(unp_ptr.add(19usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 23i32));
            prv = cur;
            store(pck_ptr.add(7usize), smd_pck);
            smd_pck = rht(dlt, 9i32);
            cur = load(unp_ptr.add(20usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 4i32));
            prv = cur;
            cur = load(unp_ptr.add(21usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 17i32));
            prv = cur;
            cur = load(unp_ptr.add(22usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 30i32));
            prv = cur;
            store(pck_ptr.add(8usize), smd_pck);
            smd_pck = rht(dlt, 2i32);
            cur = load(unp_ptr.add(23usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 11i32));
            prv = cur;
            cur = load(unp_ptr.add(24usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 24i32));
            prv = cur;
            store(pck_ptr.add(9usize), smd_pck);
            smd_pck = rht(dlt, 8i32);
            cur = load(unp_ptr.add(25usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 5i32));
            prv = cur;
            cur = load(unp_ptr.add(26usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 18i32));
            prv = cur;
            cur = load(unp_ptr.add(27usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 31i32));
            prv = cur;
            store(pck_ptr.add(10usize), smd_pck);
            smd_pck = rht(dlt, 1i32);
            cur = load(unp_ptr.add(28usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 12i32));
            prv = cur;
            cur = load(unp_ptr.add(29usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 25i32));
            prv = cur;
            store(pck_ptr.add(11usize), smd_pck);
            smd_pck = rht(dlt, 7i32);
            cur = load(unp_ptr.add(30usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 6i32));
            prv = cur;
            store(
                pck_ptr.add(12usize),
                or(smd_pck, lft(sub(load(unp_ptr.add(31usize)), prv), 19i32)),
            );
        }
        14u8 => {
            let mut prv = set1(fst as i32);
            let mut cur = load(unp_ptr);
            let mut smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(1usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 14i32));
            prv = cur;
            cur = load(unp_ptr.add(2usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 28i32));
            prv = cur;
            store(pck_ptr.add(0usize), smd_pck);
            smd_pck = rht(dlt, 4i32);
            cur = load(unp_ptr.add(3usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 10i32));
            prv = cur;
            cur = load(unp_ptr.add(4usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 24i32));
            prv = cur;
            store(pck_ptr.add(1usize), smd_pck);
            smd_pck = rht(dlt, 8i32);
            cur = load(unp_ptr.add(5usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 6i32));
            prv = cur;
            cur = load(unp_ptr.add(6usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 20i32));
            prv = cur;
            store(pck_ptr.add(2usize), smd_pck);
            smd_pck = rht(dlt, 12i32);
            cur = load(unp_ptr.add(7usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 2i32));
            prv = cur;
            cur = load(unp_ptr.add(8usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 16i32));
            prv = cur;
            cur = load(unp_ptr.add(9usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 30i32));
            prv = cur;
            store(pck_ptr.add(3usize), smd_pck);
            smd_pck = rht(dlt, 2i32);
            cur = load(unp_ptr.add(10usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 12i32));
            prv = cur;
            cur = load(unp_ptr.add(11usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 26i32));
            prv = cur;
            store(pck_ptr.add(4usize), smd_pck);
            smd_pck = rht(dlt, 6i32);
            cur = load(unp_ptr.add(12usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 8i32));
            prv = cur;
            cur = load(unp_ptr.add(13usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 22i32));
            prv = cur;
            store(pck_ptr.add(5usize), smd_pck);
            smd_pck = rht(dlt, 10i32);
            cur = load(unp_ptr.add(14usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 4i32));
            prv = cur;
            cur = load(unp_ptr.add(15usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 18i32));
            prv = cur;
            store(pck_ptr.add(6usize), smd_pck);
            cur = load(unp_ptr.add(16usize));
            smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(17usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 14i32));
            prv = cur;
            cur = load(unp_ptr.add(18usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 28i32));
            prv = cur;
            store(pck_ptr.add(7usize), smd_pck);
            smd_pck = rht(dlt, 4i32);
            cur = load(unp_ptr.add(19usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 10i32));
            prv = cur;
            cur = load(unp_ptr.add(20usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 24i32));
            prv = cur;
            store(pck_ptr.add(8usize), smd_pck);
            smd_pck = rht(dlt, 8i32);
            cur = load(unp_ptr.add(21usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 6i32));
            prv = cur;
            cur = load(unp_ptr.add(22usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 20i32));
            prv = cur;
            store(pck_ptr.add(9usize), smd_pck);
            smd_pck = rht(dlt, 12i32);
            cur = load(unp_ptr.add(23usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 2i32));
            prv = cur;
            cur = load(unp_ptr.add(24usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 16i32));
            prv = cur;
            cur = load(unp_ptr.add(25usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 30i32));
            prv = cur;
            store(pck_ptr.add(10usize), smd_pck);
            smd_pck = rht(dlt, 2i32);
            cur = load(unp_ptr.add(26usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 12i32));
            prv = cur;
            cur = load(unp_ptr.add(27usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 26i32));
            prv = cur;
            store(pck_ptr.add(11usize), smd_pck);
            smd_pck = rht(dlt, 6i32);
            cur = load(unp_ptr.add(28usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 8i32));
            prv = cur;
            cur = load(unp_ptr.add(29usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 22i32));
            prv = cur;
            store(pck_ptr.add(12usize), smd_pck);
            smd_pck = rht(dlt, 10i32);
            cur = load(unp_ptr.add(30usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 4i32));
            prv = cur;
            store(
                pck_ptr.add(13usize),
                or(smd_pck, lft(sub(load(unp_ptr.add(31usize)), prv), 18i32)),
            );
        }
        15u8 => {
            let mut prv = set1(fst as i32);
            let mut cur = load(unp_ptr);
            let mut smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(1usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 15i32));
            prv = cur;
            cur = load(unp_ptr.add(2usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 30i32));
            prv = cur;
            store(pck_ptr.add(0usize), smd_pck);
            smd_pck = rht(dlt, 2i32);
            cur = load(unp_ptr.add(3usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 13i32));
            prv = cur;
            cur = load(unp_ptr.add(4usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 28i32));
            prv = cur;
            store(pck_ptr.add(1usize), smd_pck);
            smd_pck = rht(dlt, 4i32);
            cur = load(unp_ptr.add(5usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 11i32));
            prv = cur;
            cur = load(unp_ptr.add(6usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 26i32));
            prv = cur;
            store(pck_ptr.add(2usize), smd_pck);
            smd_pck = rht(dlt, 6i32);
            cur = load(unp_ptr.add(7usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 9i32));
            prv = cur;
            cur = load(unp_ptr.add(8usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 24i32));
            prv = cur;
            store(pck_ptr.add(3usize), smd_pck);
            smd_pck = rht(dlt, 8i32);
            cur = load(unp_ptr.add(9usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 7i32));
            prv = cur;
            cur = load(unp_ptr.add(10usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 22i32));
            prv = cur;
            store(pck_ptr.add(4usize), smd_pck);
            smd_pck = rht(dlt, 10i32);
            cur = load(unp_ptr.add(11usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 5i32));
            prv = cur;
            cur = load(unp_ptr.add(12usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 20i32));
            prv = cur;
            store(pck_ptr.add(5usize), smd_pck);
            smd_pck = rht(dlt, 12i32);
            cur = load(unp_ptr.add(13usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 3i32));
            prv = cur;
            cur = load(unp_ptr.add(14usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 18i32));
            prv = cur;
            store(pck_ptr.add(6usize), smd_pck);
            smd_pck = rht(dlt, 14i32);
            cur = load(unp_ptr.add(15usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 1i32));
            prv = cur;
            cur = load(unp_ptr.add(16usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 16i32));
            prv = cur;
            cur = load(unp_ptr.add(17usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 31i32));
            prv = cur;
            store(pck_ptr.add(7usize), smd_pck);
            smd_pck = rht(dlt, 1i32);
            cur = load(unp_ptr.add(18usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 14i32));
            prv = cur;
            cur = load(unp_ptr.add(19usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 29i32));
            prv = cur;
            store(pck_ptr.add(8usize), smd_pck);
            smd_pck = rht(dlt, 3i32);
            cur = load(unp_ptr.add(20usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 12i32));
            prv = cur;
            cur = load(unp_ptr.add(21usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 27i32));
            prv = cur;
            store(pck_ptr.add(9usize), smd_pck);
            smd_pck = rht(dlt, 5i32);
            cur = load(unp_ptr.add(22usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 10i32));
            prv = cur;
            cur = load(unp_ptr.add(23usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 25i32));
            prv = cur;
            store(pck_ptr.add(10usize), smd_pck);
            smd_pck = rht(dlt, 7i32);
            cur = load(unp_ptr.add(24usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 8i32));
            prv = cur;
            cur = load(unp_ptr.add(25usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 23i32));
            prv = cur;
            store(pck_ptr.add(11usize), smd_pck);
            smd_pck = rht(dlt, 9i32);
            cur = load(unp_ptr.add(26usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 6i32));
            prv = cur;
            cur = load(unp_ptr.add(27usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 21i32));
            prv = cur;
            store(pck_ptr.add(12usize), smd_pck);
            smd_pck = rht(dlt, 11i32);
            cur = load(unp_ptr.add(28usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 4i32));
            prv = cur;
            cur = load(unp_ptr.add(29usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 19i32));
            prv = cur;
            store(pck_ptr.add(13usize), smd_pck);
            smd_pck = rht(dlt, 13i32);
            cur = load(unp_ptr.add(30usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 2i32));
            prv = cur;
            store(
                pck_ptr.add(14usize),
                or(smd_pck, lft(sub(load(unp_ptr.add(31usize)), prv), 17i32)),
            );
        }
        16u8 => {
            let mut prv = set1(fst as i32);
            let mut cur = load(unp_ptr);
            let mut smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(1usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 16i32));
            prv = cur;
            store(pck_ptr.add(0usize), smd_pck);
            cur = load(unp_ptr.add(2usize));
            smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(3usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 16i32));
            prv = cur;
            store(pck_ptr.add(1usize), smd_pck);
            cur = load(unp_ptr.add(4usize));
            smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(5usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 16i32));
            prv = cur;
            store(pck_ptr.add(2usize), smd_pck);
            cur = load(unp_ptr.add(6usize));
            smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(7usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 16i32));
            prv = cur;
            store(pck_ptr.add(3usize), smd_pck);
            cur = load(unp_ptr.add(8usize));
            smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(9usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 16i32));
            prv = cur;
            store(pck_ptr.add(4usize), smd_pck);
            cur = load(unp_ptr.add(10usize));
            smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(11usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 16i32));
            prv = cur;
            store(pck_ptr.add(5usize), smd_pck);
            cur = load(unp_ptr.add(12usize));
            smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(13usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 16i32));
            prv = cur;
            store(pck_ptr.add(6usize), smd_pck);
            cur = load(unp_ptr.add(14usize));
            smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(15usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 16i32));
            prv = cur;
            store(pck_ptr.add(7usize), smd_pck);
            cur = load(unp_ptr.add(16usize));
            smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(17usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 16i32));
            prv = cur;
            store(pck_ptr.add(8usize), smd_pck);
            cur = load(unp_ptr.add(18usize));
            smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(19usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 16i32));
            prv = cur;
            store(pck_ptr.add(9usize), smd_pck);
            cur = load(unp_ptr.add(20usize));
            smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(21usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 16i32));
            prv = cur;
            store(pck_ptr.add(10usize), smd_pck);
            cur = load(unp_ptr.add(22usize));
            smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(23usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 16i32));
            prv = cur;
            store(pck_ptr.add(11usize), smd_pck);
            cur = load(unp_ptr.add(24usize));
            smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(25usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 16i32));
            prv = cur;
            store(pck_ptr.add(12usize), smd_pck);
            cur = load(unp_ptr.add(26usize));
            smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(27usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 16i32));
            prv = cur;
            store(pck_ptr.add(13usize), smd_pck);
            cur = load(unp_ptr.add(28usize));
            smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(29usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 16i32));
            prv = cur;
            store(pck_ptr.add(14usize), smd_pck);
            cur = load(unp_ptr.add(30usize));
            smd_pck = sub(cur, prv);
            prv = cur;
            store(
                pck_ptr.add(15usize),
                or(smd_pck, lft(sub(load(unp_ptr.add(31usize)), prv), 16i32)),
            );
        }
        17u8 => {
            let mut prv = set1(fst as i32);
            let mut cur = load(unp_ptr);
            let mut smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(1usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 17i32));
            prv = cur;
            store(pck_ptr.add(0usize), smd_pck);
            smd_pck = rht(dlt, 15i32);
            cur = load(unp_ptr.add(2usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 2i32));
            prv = cur;
            cur = load(unp_ptr.add(3usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 19i32));
            prv = cur;
            store(pck_ptr.add(1usize), smd_pck);
            smd_pck = rht(dlt, 13i32);
            cur = load(unp_ptr.add(4usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 4i32));
            prv = cur;
            cur = load(unp_ptr.add(5usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 21i32));
            prv = cur;
            store(pck_ptr.add(2usize), smd_pck);
            smd_pck = rht(dlt, 11i32);
            cur = load(unp_ptr.add(6usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 6i32));
            prv = cur;
            cur = load(unp_ptr.add(7usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 23i32));
            prv = cur;
            store(pck_ptr.add(3usize), smd_pck);
            smd_pck = rht(dlt, 9i32);
            cur = load(unp_ptr.add(8usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 8i32));
            prv = cur;
            cur = load(unp_ptr.add(9usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 25i32));
            prv = cur;
            store(pck_ptr.add(4usize), smd_pck);
            smd_pck = rht(dlt, 7i32);
            cur = load(unp_ptr.add(10usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 10i32));
            prv = cur;
            cur = load(unp_ptr.add(11usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 27i32));
            prv = cur;
            store(pck_ptr.add(5usize), smd_pck);
            smd_pck = rht(dlt, 5i32);
            cur = load(unp_ptr.add(12usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 12i32));
            prv = cur;
            cur = load(unp_ptr.add(13usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 29i32));
            prv = cur;
            store(pck_ptr.add(6usize), smd_pck);
            smd_pck = rht(dlt, 3i32);
            cur = load(unp_ptr.add(14usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 14i32));
            prv = cur;
            cur = load(unp_ptr.add(15usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 31i32));
            prv = cur;
            store(pck_ptr.add(7usize), smd_pck);
            smd_pck = rht(dlt, 1i32);
            cur = load(unp_ptr.add(16usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 16i32));
            prv = cur;
            store(pck_ptr.add(8usize), smd_pck);
            smd_pck = rht(dlt, 16i32);
            cur = load(unp_ptr.add(17usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 1i32));
            prv = cur;
            cur = load(unp_ptr.add(18usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 18i32));
            prv = cur;
            store(pck_ptr.add(9usize), smd_pck);
            smd_pck = rht(dlt, 14i32);
            cur = load(unp_ptr.add(19usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 3i32));
            prv = cur;
            cur = load(unp_ptr.add(20usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 20i32));
            prv = cur;
            store(pck_ptr.add(10usize), smd_pck);
            smd_pck = rht(dlt, 12i32);
            cur = load(unp_ptr.add(21usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 5i32));
            prv = cur;
            cur = load(unp_ptr.add(22usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 22i32));
            prv = cur;
            store(pck_ptr.add(11usize), smd_pck);
            smd_pck = rht(dlt, 10i32);
            cur = load(unp_ptr.add(23usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 7i32));
            prv = cur;
            cur = load(unp_ptr.add(24usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 24i32));
            prv = cur;
            store(pck_ptr.add(12usize), smd_pck);
            smd_pck = rht(dlt, 8i32);
            cur = load(unp_ptr.add(25usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 9i32));
            prv = cur;
            cur = load(unp_ptr.add(26usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 26i32));
            prv = cur;
            store(pck_ptr.add(13usize), smd_pck);
            smd_pck = rht(dlt, 6i32);
            cur = load(unp_ptr.add(27usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 11i32));
            prv = cur;
            cur = load(unp_ptr.add(28usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 28i32));
            prv = cur;
            store(pck_ptr.add(14usize), smd_pck);
            smd_pck = rht(dlt, 4i32);
            cur = load(unp_ptr.add(29usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 13i32));
            prv = cur;
            cur = load(unp_ptr.add(30usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 30i32));
            prv = cur;
            store(pck_ptr.add(15usize), smd_pck);
            smd_pck = rht(dlt, 2i32);
            store(
                pck_ptr.add(16usize),
                or(smd_pck, lft(sub(load(unp_ptr.add(31usize)), prv), 15i32)),
            );
        }
        18u8 => {
            let mut prv = set1(fst as i32);
            let mut cur = load(unp_ptr);
            let mut smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(1usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 18i32));
            prv = cur;
            store(pck_ptr.add(0usize), smd_pck);
            smd_pck = rht(dlt, 14i32);
            cur = load(unp_ptr.add(2usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 4i32));
            prv = cur;
            cur = load(unp_ptr.add(3usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 22i32));
            prv = cur;
            store(pck_ptr.add(1usize), smd_pck);
            smd_pck = rht(dlt, 10i32);
            cur = load(unp_ptr.add(4usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 8i32));
            prv = cur;
            cur = load(unp_ptr.add(5usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 26i32));
            prv = cur;
            store(pck_ptr.add(2usize), smd_pck);
            smd_pck = rht(dlt, 6i32);
            cur = load(unp_ptr.add(6usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 12i32));
            prv = cur;
            cur = load(unp_ptr.add(7usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 30i32));
            prv = cur;
            store(pck_ptr.add(3usize), smd_pck);
            smd_pck = rht(dlt, 2i32);
            cur = load(unp_ptr.add(8usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 16i32));
            prv = cur;
            store(pck_ptr.add(4usize), smd_pck);
            smd_pck = rht(dlt, 16i32);
            cur = load(unp_ptr.add(9usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 2i32));
            prv = cur;
            cur = load(unp_ptr.add(10usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 20i32));
            prv = cur;
            store(pck_ptr.add(5usize), smd_pck);
            smd_pck = rht(dlt, 12i32);
            cur = load(unp_ptr.add(11usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 6i32));
            prv = cur;
            cur = load(unp_ptr.add(12usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 24i32));
            prv = cur;
            store(pck_ptr.add(6usize), smd_pck);
            smd_pck = rht(dlt, 8i32);
            cur = load(unp_ptr.add(13usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 10i32));
            prv = cur;
            cur = load(unp_ptr.add(14usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 28i32));
            prv = cur;
            store(pck_ptr.add(7usize), smd_pck);
            smd_pck = rht(dlt, 4i32);
            cur = load(unp_ptr.add(15usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 14i32));
            prv = cur;
            store(pck_ptr.add(8usize), smd_pck);
            cur = load(unp_ptr.add(16usize));
            smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(17usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 18i32));
            prv = cur;
            store(pck_ptr.add(9usize), smd_pck);
            smd_pck = rht(dlt, 14i32);
            cur = load(unp_ptr.add(18usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 4i32));
            prv = cur;
            cur = load(unp_ptr.add(19usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 22i32));
            prv = cur;
            store(pck_ptr.add(10usize), smd_pck);
            smd_pck = rht(dlt, 10i32);
            cur = load(unp_ptr.add(20usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 8i32));
            prv = cur;
            cur = load(unp_ptr.add(21usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 26i32));
            prv = cur;
            store(pck_ptr.add(11usize), smd_pck);
            smd_pck = rht(dlt, 6i32);
            cur = load(unp_ptr.add(22usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 12i32));
            prv = cur;
            cur = load(unp_ptr.add(23usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 30i32));
            prv = cur;
            store(pck_ptr.add(12usize), smd_pck);
            smd_pck = rht(dlt, 2i32);
            cur = load(unp_ptr.add(24usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 16i32));
            prv = cur;
            store(pck_ptr.add(13usize), smd_pck);
            smd_pck = rht(dlt, 16i32);
            cur = load(unp_ptr.add(25usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 2i32));
            prv = cur;
            cur = load(unp_ptr.add(26usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 20i32));
            prv = cur;
            store(pck_ptr.add(14usize), smd_pck);
            smd_pck = rht(dlt, 12i32);
            cur = load(unp_ptr.add(27usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 6i32));
            prv = cur;
            cur = load(unp_ptr.add(28usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 24i32));
            prv = cur;
            store(pck_ptr.add(15usize), smd_pck);
            smd_pck = rht(dlt, 8i32);
            cur = load(unp_ptr.add(29usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 10i32));
            prv = cur;
            cur = load(unp_ptr.add(30usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 28i32));
            prv = cur;
            store(pck_ptr.add(16usize), smd_pck);
            smd_pck = rht(dlt, 4i32);
            store(
                pck_ptr.add(17usize),
                or(smd_pck, lft(sub(load(unp_ptr.add(31usize)), prv), 14i32)),
            );
        }
        19u8 => {
            let mut prv = set1(fst as i32);
            let mut cur = load(unp_ptr);
            let mut smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(1usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 19i32));
            prv = cur;
            store(pck_ptr.add(0usize), smd_pck);
            smd_pck = rht(dlt, 13i32);
            cur = load(unp_ptr.add(2usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 6i32));
            prv = cur;
            cur = load(unp_ptr.add(3usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 25i32));
            prv = cur;
            store(pck_ptr.add(1usize), smd_pck);
            smd_pck = rht(dlt, 7i32);
            cur = load(unp_ptr.add(4usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 12i32));
            prv = cur;
            cur = load(unp_ptr.add(5usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 31i32));
            prv = cur;
            store(pck_ptr.add(2usize), smd_pck);
            smd_pck = rht(dlt, 1i32);
            cur = load(unp_ptr.add(6usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 18i32));
            prv = cur;
            store(pck_ptr.add(3usize), smd_pck);
            smd_pck = rht(dlt, 14i32);
            cur = load(unp_ptr.add(7usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 5i32));
            prv = cur;
            cur = load(unp_ptr.add(8usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 24i32));
            prv = cur;
            store(pck_ptr.add(4usize), smd_pck);
            smd_pck = rht(dlt, 8i32);
            cur = load(unp_ptr.add(9usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 11i32));
            prv = cur;
            cur = load(unp_ptr.add(10usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 30i32));
            prv = cur;
            store(pck_ptr.add(5usize), smd_pck);
            smd_pck = rht(dlt, 2i32);
            cur = load(unp_ptr.add(11usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 17i32));
            prv = cur;
            store(pck_ptr.add(6usize), smd_pck);
            smd_pck = rht(dlt, 15i32);
            cur = load(unp_ptr.add(12usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 4i32));
            prv = cur;
            cur = load(unp_ptr.add(13usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 23i32));
            prv = cur;
            store(pck_ptr.add(7usize), smd_pck);
            smd_pck = rht(dlt, 9i32);
            cur = load(unp_ptr.add(14usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 10i32));
            prv = cur;
            cur = load(unp_ptr.add(15usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 29i32));
            prv = cur;
            store(pck_ptr.add(8usize), smd_pck);
            smd_pck = rht(dlt, 3i32);
            cur = load(unp_ptr.add(16usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 16i32));
            prv = cur;
            store(pck_ptr.add(9usize), smd_pck);
            smd_pck = rht(dlt, 16i32);
            cur = load(unp_ptr.add(17usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 3i32));
            prv = cur;
            cur = load(unp_ptr.add(18usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 22i32));
            prv = cur;
            store(pck_ptr.add(10usize), smd_pck);
            smd_pck = rht(dlt, 10i32);
            cur = load(unp_ptr.add(19usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 9i32));
            prv = cur;
            cur = load(unp_ptr.add(20usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 28i32));
            prv = cur;
            store(pck_ptr.add(11usize), smd_pck);
            smd_pck = rht(dlt, 4i32);
            cur = load(unp_ptr.add(21usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 15i32));
            prv = cur;
            store(pck_ptr.add(12usize), smd_pck);
            smd_pck = rht(dlt, 17i32);
            cur = load(unp_ptr.add(22usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 2i32));
            prv = cur;
            cur = load(unp_ptr.add(23usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 21i32));
            prv = cur;
            store(pck_ptr.add(13usize), smd_pck);
            smd_pck = rht(dlt, 11i32);
            cur = load(unp_ptr.add(24usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 8i32));
            prv = cur;
            cur = load(unp_ptr.add(25usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 27i32));
            prv = cur;
            store(pck_ptr.add(14usize), smd_pck);
            smd_pck = rht(dlt, 5i32);
            cur = load(unp_ptr.add(26usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 14i32));
            prv = cur;
            store(pck_ptr.add(15usize), smd_pck);
            smd_pck = rht(dlt, 18i32);
            cur = load(unp_ptr.add(27usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 1i32));
            prv = cur;
            cur = load(unp_ptr.add(28usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 20i32));
            prv = cur;
            store(pck_ptr.add(16usize), smd_pck);
            smd_pck = rht(dlt, 12i32);
            cur = load(unp_ptr.add(29usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 7i32));
            prv = cur;
            cur = load(unp_ptr.add(30usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 26i32));
            prv = cur;
            store(pck_ptr.add(17usize), smd_pck);
            smd_pck = rht(dlt, 6i32);
            store(
                pck_ptr.add(18usize),
                or(smd_pck, lft(sub(load(unp_ptr.add(31usize)), prv), 13i32)),
            );
        }
        20u8 => {
            let mut prv = set1(fst as i32);
            let mut cur = load(unp_ptr);
            let mut smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(1usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 20i32));
            prv = cur;
            store(pck_ptr.add(0usize), smd_pck);
            smd_pck = rht(dlt, 12i32);
            cur = load(unp_ptr.add(2usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 8i32));
            prv = cur;
            cur = load(unp_ptr.add(3usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 28i32));
            prv = cur;
            store(pck_ptr.add(1usize), smd_pck);
            smd_pck = rht(dlt, 4i32);
            cur = load(unp_ptr.add(4usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 16i32));
            prv = cur;
            store(pck_ptr.add(2usize), smd_pck);
            smd_pck = rht(dlt, 16i32);
            cur = load(unp_ptr.add(5usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 4i32));
            prv = cur;
            cur = load(unp_ptr.add(6usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 24i32));
            prv = cur;
            store(pck_ptr.add(3usize), smd_pck);
            smd_pck = rht(dlt, 8i32);
            cur = load(unp_ptr.add(7usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 12i32));
            prv = cur;
            store(pck_ptr.add(4usize), smd_pck);
            cur = load(unp_ptr.add(8usize));
            smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(9usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 20i32));
            prv = cur;
            store(pck_ptr.add(5usize), smd_pck);
            smd_pck = rht(dlt, 12i32);
            cur = load(unp_ptr.add(10usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 8i32));
            prv = cur;
            cur = load(unp_ptr.add(11usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 28i32));
            prv = cur;
            store(pck_ptr.add(6usize), smd_pck);
            smd_pck = rht(dlt, 4i32);
            cur = load(unp_ptr.add(12usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 16i32));
            prv = cur;
            store(pck_ptr.add(7usize), smd_pck);
            smd_pck = rht(dlt, 16i32);
            cur = load(unp_ptr.add(13usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 4i32));
            prv = cur;
            cur = load(unp_ptr.add(14usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 24i32));
            prv = cur;
            store(pck_ptr.add(8usize), smd_pck);
            smd_pck = rht(dlt, 8i32);
            cur = load(unp_ptr.add(15usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 12i32));
            prv = cur;
            store(pck_ptr.add(9usize), smd_pck);
            cur = load(unp_ptr.add(16usize));
            smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(17usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 20i32));
            prv = cur;
            store(pck_ptr.add(10usize), smd_pck);
            smd_pck = rht(dlt, 12i32);
            cur = load(unp_ptr.add(18usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 8i32));
            prv = cur;
            cur = load(unp_ptr.add(19usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 28i32));
            prv = cur;
            store(pck_ptr.add(11usize), smd_pck);
            smd_pck = rht(dlt, 4i32);
            cur = load(unp_ptr.add(20usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 16i32));
            prv = cur;
            store(pck_ptr.add(12usize), smd_pck);
            smd_pck = rht(dlt, 16i32);
            cur = load(unp_ptr.add(21usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 4i32));
            prv = cur;
            cur = load(unp_ptr.add(22usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 24i32));
            prv = cur;
            store(pck_ptr.add(13usize), smd_pck);
            smd_pck = rht(dlt, 8i32);
            cur = load(unp_ptr.add(23usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 12i32));
            prv = cur;
            store(pck_ptr.add(14usize), smd_pck);
            cur = load(unp_ptr.add(24usize));
            smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(25usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 20i32));
            prv = cur;
            store(pck_ptr.add(15usize), smd_pck);
            smd_pck = rht(dlt, 12i32);
            cur = load(unp_ptr.add(26usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 8i32));
            prv = cur;
            cur = load(unp_ptr.add(27usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 28i32));
            prv = cur;
            store(pck_ptr.add(16usize), smd_pck);
            smd_pck = rht(dlt, 4i32);
            cur = load(unp_ptr.add(28usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 16i32));
            prv = cur;
            store(pck_ptr.add(17usize), smd_pck);
            smd_pck = rht(dlt, 16i32);
            cur = load(unp_ptr.add(29usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 4i32));
            prv = cur;
            cur = load(unp_ptr.add(30usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 24i32));
            prv = cur;
            store(pck_ptr.add(18usize), smd_pck);
            smd_pck = rht(dlt, 8i32);
            store(
                pck_ptr.add(19usize),
                or(smd_pck, lft(sub(load(unp_ptr.add(31usize)), prv), 12i32)),
            );
        }
        21u8 => {
            let mut prv = set1(fst as i32);
            let mut cur = load(unp_ptr);
            let mut smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(1usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 21i32));
            prv = cur;
            store(pck_ptr.add(0usize), smd_pck);
            smd_pck = rht(dlt, 11i32);
            cur = load(unp_ptr.add(2usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 10i32));
            prv = cur;
            cur = load(unp_ptr.add(3usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 31i32));
            prv = cur;
            store(pck_ptr.add(1usize), smd_pck);
            smd_pck = rht(dlt, 1i32);
            cur = load(unp_ptr.add(4usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 20i32));
            prv = cur;
            store(pck_ptr.add(2usize), smd_pck);
            smd_pck = rht(dlt, 12i32);
            cur = load(unp_ptr.add(5usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 9i32));
            prv = cur;
            cur = load(unp_ptr.add(6usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 30i32));
            prv = cur;
            store(pck_ptr.add(3usize), smd_pck);
            smd_pck = rht(dlt, 2i32);
            cur = load(unp_ptr.add(7usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 19i32));
            prv = cur;
            store(pck_ptr.add(4usize), smd_pck);
            smd_pck = rht(dlt, 13i32);
            cur = load(unp_ptr.add(8usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 8i32));
            prv = cur;
            cur = load(unp_ptr.add(9usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 29i32));
            prv = cur;
            store(pck_ptr.add(5usize), smd_pck);
            smd_pck = rht(dlt, 3i32);
            cur = load(unp_ptr.add(10usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 18i32));
            prv = cur;
            store(pck_ptr.add(6usize), smd_pck);
            smd_pck = rht(dlt, 14i32);
            cur = load(unp_ptr.add(11usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 7i32));
            prv = cur;
            cur = load(unp_ptr.add(12usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 28i32));
            prv = cur;
            store(pck_ptr.add(7usize), smd_pck);
            smd_pck = rht(dlt, 4i32);
            cur = load(unp_ptr.add(13usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 17i32));
            prv = cur;
            store(pck_ptr.add(8usize), smd_pck);
            smd_pck = rht(dlt, 15i32);
            cur = load(unp_ptr.add(14usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 6i32));
            prv = cur;
            cur = load(unp_ptr.add(15usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 27i32));
            prv = cur;
            store(pck_ptr.add(9usize), smd_pck);
            smd_pck = rht(dlt, 5i32);
            cur = load(unp_ptr.add(16usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 16i32));
            prv = cur;
            store(pck_ptr.add(10usize), smd_pck);
            smd_pck = rht(dlt, 16i32);
            cur = load(unp_ptr.add(17usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 5i32));
            prv = cur;
            cur = load(unp_ptr.add(18usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 26i32));
            prv = cur;
            store(pck_ptr.add(11usize), smd_pck);
            smd_pck = rht(dlt, 6i32);
            cur = load(unp_ptr.add(19usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 15i32));
            prv = cur;
            store(pck_ptr.add(12usize), smd_pck);
            smd_pck = rht(dlt, 17i32);
            cur = load(unp_ptr.add(20usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 4i32));
            prv = cur;
            cur = load(unp_ptr.add(21usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 25i32));
            prv = cur;
            store(pck_ptr.add(13usize), smd_pck);
            smd_pck = rht(dlt, 7i32);
            cur = load(unp_ptr.add(22usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 14i32));
            prv = cur;
            store(pck_ptr.add(14usize), smd_pck);
            smd_pck = rht(dlt, 18i32);
            cur = load(unp_ptr.add(23usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 3i32));
            prv = cur;
            cur = load(unp_ptr.add(24usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 24i32));
            prv = cur;
            store(pck_ptr.add(15usize), smd_pck);
            smd_pck = rht(dlt, 8i32);
            cur = load(unp_ptr.add(25usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 13i32));
            prv = cur;
            store(pck_ptr.add(16usize), smd_pck);
            smd_pck = rht(dlt, 19i32);
            cur = load(unp_ptr.add(26usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 2i32));
            prv = cur;
            cur = load(unp_ptr.add(27usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 23i32));
            prv = cur;
            store(pck_ptr.add(17usize), smd_pck);
            smd_pck = rht(dlt, 9i32);
            cur = load(unp_ptr.add(28usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 12i32));
            prv = cur;
            store(pck_ptr.add(18usize), smd_pck);
            smd_pck = rht(dlt, 20i32);
            cur = load(unp_ptr.add(29usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 1i32));
            prv = cur;
            cur = load(unp_ptr.add(30usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 22i32));
            prv = cur;
            store(pck_ptr.add(19usize), smd_pck);
            smd_pck = rht(dlt, 10i32);
            store(
                pck_ptr.add(20usize),
                or(smd_pck, lft(sub(load(unp_ptr.add(31usize)), prv), 11i32)),
            );
        }
        22u8 => {
            let mut prv = set1(fst as i32);
            let mut cur = load(unp_ptr);
            let mut smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(1usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 22i32));
            prv = cur;
            store(pck_ptr.add(0usize), smd_pck);
            smd_pck = rht(dlt, 10i32);
            cur = load(unp_ptr.add(2usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 12i32));
            prv = cur;
            store(pck_ptr.add(1usize), smd_pck);
            smd_pck = rht(dlt, 20i32);
            cur = load(unp_ptr.add(3usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 2i32));
            prv = cur;
            cur = load(unp_ptr.add(4usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 24i32));
            prv = cur;
            store(pck_ptr.add(2usize), smd_pck);
            smd_pck = rht(dlt, 8i32);
            cur = load(unp_ptr.add(5usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 14i32));
            prv = cur;
            store(pck_ptr.add(3usize), smd_pck);
            smd_pck = rht(dlt, 18i32);
            cur = load(unp_ptr.add(6usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 4i32));
            prv = cur;
            cur = load(unp_ptr.add(7usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 26i32));
            prv = cur;
            store(pck_ptr.add(4usize), smd_pck);
            smd_pck = rht(dlt, 6i32);
            cur = load(unp_ptr.add(8usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 16i32));
            prv = cur;
            store(pck_ptr.add(5usize), smd_pck);
            smd_pck = rht(dlt, 16i32);
            cur = load(unp_ptr.add(9usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 6i32));
            prv = cur;
            cur = load(unp_ptr.add(10usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 28i32));
            prv = cur;
            store(pck_ptr.add(6usize), smd_pck);
            smd_pck = rht(dlt, 4i32);
            cur = load(unp_ptr.add(11usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 18i32));
            prv = cur;
            store(pck_ptr.add(7usize), smd_pck);
            smd_pck = rht(dlt, 14i32);
            cur = load(unp_ptr.add(12usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 8i32));
            prv = cur;
            cur = load(unp_ptr.add(13usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 30i32));
            prv = cur;
            store(pck_ptr.add(8usize), smd_pck);
            smd_pck = rht(dlt, 2i32);
            cur = load(unp_ptr.add(14usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 20i32));
            prv = cur;
            store(pck_ptr.add(9usize), smd_pck);
            smd_pck = rht(dlt, 12i32);
            cur = load(unp_ptr.add(15usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 10i32));
            prv = cur;
            store(pck_ptr.add(10usize), smd_pck);
            cur = load(unp_ptr.add(16usize));
            smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(17usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 22i32));
            prv = cur;
            store(pck_ptr.add(11usize), smd_pck);
            smd_pck = rht(dlt, 10i32);
            cur = load(unp_ptr.add(18usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 12i32));
            prv = cur;
            store(pck_ptr.add(12usize), smd_pck);
            smd_pck = rht(dlt, 20i32);
            cur = load(unp_ptr.add(19usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 2i32));
            prv = cur;
            cur = load(unp_ptr.add(20usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 24i32));
            prv = cur;
            store(pck_ptr.add(13usize), smd_pck);
            smd_pck = rht(dlt, 8i32);
            cur = load(unp_ptr.add(21usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 14i32));
            prv = cur;
            store(pck_ptr.add(14usize), smd_pck);
            smd_pck = rht(dlt, 18i32);
            cur = load(unp_ptr.add(22usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 4i32));
            prv = cur;
            cur = load(unp_ptr.add(23usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 26i32));
            prv = cur;
            store(pck_ptr.add(15usize), smd_pck);
            smd_pck = rht(dlt, 6i32);
            cur = load(unp_ptr.add(24usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 16i32));
            prv = cur;
            store(pck_ptr.add(16usize), smd_pck);
            smd_pck = rht(dlt, 16i32);
            cur = load(unp_ptr.add(25usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 6i32));
            prv = cur;
            cur = load(unp_ptr.add(26usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 28i32));
            prv = cur;
            store(pck_ptr.add(17usize), smd_pck);
            smd_pck = rht(dlt, 4i32);
            cur = load(unp_ptr.add(27usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 18i32));
            prv = cur;
            store(pck_ptr.add(18usize), smd_pck);
            smd_pck = rht(dlt, 14i32);
            cur = load(unp_ptr.add(28usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 8i32));
            prv = cur;
            cur = load(unp_ptr.add(29usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 30i32));
            prv = cur;
            store(pck_ptr.add(19usize), smd_pck);
            smd_pck = rht(dlt, 2i32);
            cur = load(unp_ptr.add(30usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 20i32));
            prv = cur;
            store(pck_ptr.add(20usize), smd_pck);
            smd_pck = rht(dlt, 12i32);
            store(
                pck_ptr.add(21usize),
                or(smd_pck, lft(sub(load(unp_ptr.add(31usize)), prv), 10i32)),
            );
        }
        23u8 => {
            let mut prv = set1(fst as i32);
            let mut cur = load(unp_ptr);
            let mut smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(1usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 23i32));
            prv = cur;
            store(pck_ptr.add(0usize), smd_pck);
            smd_pck = rht(dlt, 9i32);
            cur = load(unp_ptr.add(2usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 14i32));
            prv = cur;
            store(pck_ptr.add(1usize), smd_pck);
            smd_pck = rht(dlt, 18i32);
            cur = load(unp_ptr.add(3usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 5i32));
            prv = cur;
            cur = load(unp_ptr.add(4usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 28i32));
            prv = cur;
            store(pck_ptr.add(2usize), smd_pck);
            smd_pck = rht(dlt, 4i32);
            cur = load(unp_ptr.add(5usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 19i32));
            prv = cur;
            store(pck_ptr.add(3usize), smd_pck);
            smd_pck = rht(dlt, 13i32);
            cur = load(unp_ptr.add(6usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 10i32));
            prv = cur;
            store(pck_ptr.add(4usize), smd_pck);
            smd_pck = rht(dlt, 22i32);
            cur = load(unp_ptr.add(7usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 1i32));
            prv = cur;
            cur = load(unp_ptr.add(8usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 24i32));
            prv = cur;
            store(pck_ptr.add(5usize), smd_pck);
            smd_pck = rht(dlt, 8i32);
            cur = load(unp_ptr.add(9usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 15i32));
            prv = cur;
            store(pck_ptr.add(6usize), smd_pck);
            smd_pck = rht(dlt, 17i32);
            cur = load(unp_ptr.add(10usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 6i32));
            prv = cur;
            cur = load(unp_ptr.add(11usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 29i32));
            prv = cur;
            store(pck_ptr.add(7usize), smd_pck);
            smd_pck = rht(dlt, 3i32);
            cur = load(unp_ptr.add(12usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 20i32));
            prv = cur;
            store(pck_ptr.add(8usize), smd_pck);
            smd_pck = rht(dlt, 12i32);
            cur = load(unp_ptr.add(13usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 11i32));
            prv = cur;
            store(pck_ptr.add(9usize), smd_pck);
            smd_pck = rht(dlt, 21i32);
            cur = load(unp_ptr.add(14usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 2i32));
            prv = cur;
            cur = load(unp_ptr.add(15usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 25i32));
            prv = cur;
            store(pck_ptr.add(10usize), smd_pck);
            smd_pck = rht(dlt, 7i32);
            cur = load(unp_ptr.add(16usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 16i32));
            prv = cur;
            store(pck_ptr.add(11usize), smd_pck);
            smd_pck = rht(dlt, 16i32);
            cur = load(unp_ptr.add(17usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 7i32));
            prv = cur;
            cur = load(unp_ptr.add(18usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 30i32));
            prv = cur;
            store(pck_ptr.add(12usize), smd_pck);
            smd_pck = rht(dlt, 2i32);
            cur = load(unp_ptr.add(19usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 21i32));
            prv = cur;
            store(pck_ptr.add(13usize), smd_pck);
            smd_pck = rht(dlt, 11i32);
            cur = load(unp_ptr.add(20usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 12i32));
            prv = cur;
            store(pck_ptr.add(14usize), smd_pck);
            smd_pck = rht(dlt, 20i32);
            cur = load(unp_ptr.add(21usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 3i32));
            prv = cur;
            cur = load(unp_ptr.add(22usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 26i32));
            prv = cur;
            store(pck_ptr.add(15usize), smd_pck);
            smd_pck = rht(dlt, 6i32);
            cur = load(unp_ptr.add(23usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 17i32));
            prv = cur;
            store(pck_ptr.add(16usize), smd_pck);
            smd_pck = rht(dlt, 15i32);
            cur = load(unp_ptr.add(24usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 8i32));
            prv = cur;
            cur = load(unp_ptr.add(25usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 31i32));
            prv = cur;
            store(pck_ptr.add(17usize), smd_pck);
            smd_pck = rht(dlt, 1i32);
            cur = load(unp_ptr.add(26usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 22i32));
            prv = cur;
            store(pck_ptr.add(18usize), smd_pck);
            smd_pck = rht(dlt, 10i32);
            cur = load(unp_ptr.add(27usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 13i32));
            prv = cur;
            store(pck_ptr.add(19usize), smd_pck);
            smd_pck = rht(dlt, 19i32);
            cur = load(unp_ptr.add(28usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 4i32));
            prv = cur;
            cur = load(unp_ptr.add(29usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 27i32));
            prv = cur;
            store(pck_ptr.add(20usize), smd_pck);
            smd_pck = rht(dlt, 5i32);
            cur = load(unp_ptr.add(30usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 18i32));
            prv = cur;
            store(pck_ptr.add(21usize), smd_pck);
            smd_pck = rht(dlt, 14i32);
            store(
                pck_ptr.add(22usize),
                or(smd_pck, lft(sub(load(unp_ptr.add(31usize)), prv), 9i32)),
            );
        }
        24u8 => {
            let mut prv = set1(fst as i32);
            let mut cur = load(unp_ptr);
            let mut smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(1usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 24i32));
            prv = cur;
            store(pck_ptr.add(0usize), smd_pck);
            smd_pck = rht(dlt, 8i32);
            cur = load(unp_ptr.add(2usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 16i32));
            prv = cur;
            store(pck_ptr.add(1usize), smd_pck);
            smd_pck = rht(dlt, 16i32);
            cur = load(unp_ptr.add(3usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 8i32));
            prv = cur;
            store(pck_ptr.add(2usize), smd_pck);
            cur = load(unp_ptr.add(4usize));
            smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(5usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 24i32));
            prv = cur;
            store(pck_ptr.add(3usize), smd_pck);
            smd_pck = rht(dlt, 8i32);
            cur = load(unp_ptr.add(6usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 16i32));
            prv = cur;
            store(pck_ptr.add(4usize), smd_pck);
            smd_pck = rht(dlt, 16i32);
            cur = load(unp_ptr.add(7usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 8i32));
            prv = cur;
            store(pck_ptr.add(5usize), smd_pck);
            cur = load(unp_ptr.add(8usize));
            smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(9usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 24i32));
            prv = cur;
            store(pck_ptr.add(6usize), smd_pck);
            smd_pck = rht(dlt, 8i32);
            cur = load(unp_ptr.add(10usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 16i32));
            prv = cur;
            store(pck_ptr.add(7usize), smd_pck);
            smd_pck = rht(dlt, 16i32);
            cur = load(unp_ptr.add(11usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 8i32));
            prv = cur;
            store(pck_ptr.add(8usize), smd_pck);
            cur = load(unp_ptr.add(12usize));
            smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(13usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 24i32));
            prv = cur;
            store(pck_ptr.add(9usize), smd_pck);
            smd_pck = rht(dlt, 8i32);
            cur = load(unp_ptr.add(14usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 16i32));
            prv = cur;
            store(pck_ptr.add(10usize), smd_pck);
            smd_pck = rht(dlt, 16i32);
            cur = load(unp_ptr.add(15usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 8i32));
            prv = cur;
            store(pck_ptr.add(11usize), smd_pck);
            cur = load(unp_ptr.add(16usize));
            smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(17usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 24i32));
            prv = cur;
            store(pck_ptr.add(12usize), smd_pck);
            smd_pck = rht(dlt, 8i32);
            cur = load(unp_ptr.add(18usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 16i32));
            prv = cur;
            store(pck_ptr.add(13usize), smd_pck);
            smd_pck = rht(dlt, 16i32);
            cur = load(unp_ptr.add(19usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 8i32));
            prv = cur;
            store(pck_ptr.add(14usize), smd_pck);
            cur = load(unp_ptr.add(20usize));
            smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(21usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 24i32));
            prv = cur;
            store(pck_ptr.add(15usize), smd_pck);
            smd_pck = rht(dlt, 8i32);
            cur = load(unp_ptr.add(22usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 16i32));
            prv = cur;
            store(pck_ptr.add(16usize), smd_pck);
            smd_pck = rht(dlt, 16i32);
            cur = load(unp_ptr.add(23usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 8i32));
            prv = cur;
            store(pck_ptr.add(17usize), smd_pck);
            cur = load(unp_ptr.add(24usize));
            smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(25usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 24i32));
            prv = cur;
            store(pck_ptr.add(18usize), smd_pck);
            smd_pck = rht(dlt, 8i32);
            cur = load(unp_ptr.add(26usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 16i32));
            prv = cur;
            store(pck_ptr.add(19usize), smd_pck);
            smd_pck = rht(dlt, 16i32);
            cur = load(unp_ptr.add(27usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 8i32));
            prv = cur;
            store(pck_ptr.add(20usize), smd_pck);
            cur = load(unp_ptr.add(28usize));
            smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(29usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 24i32));
            prv = cur;
            store(pck_ptr.add(21usize), smd_pck);
            smd_pck = rht(dlt, 8i32);
            cur = load(unp_ptr.add(30usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 16i32));
            prv = cur;
            store(pck_ptr.add(22usize), smd_pck);
            smd_pck = rht(dlt, 16i32);
            store(
                pck_ptr.add(23usize),
                or(smd_pck, lft(sub(load(unp_ptr.add(31usize)), prv), 8i32)),
            );
        }
        25u8 => {
            let mut prv = set1(fst as i32);
            let mut cur = load(unp_ptr);
            let mut smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(1usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 25i32));
            prv = cur;
            store(pck_ptr.add(0usize), smd_pck);
            smd_pck = rht(dlt, 7i32);
            cur = load(unp_ptr.add(2usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 18i32));
            prv = cur;
            store(pck_ptr.add(1usize), smd_pck);
            smd_pck = rht(dlt, 14i32);
            cur = load(unp_ptr.add(3usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 11i32));
            prv = cur;
            store(pck_ptr.add(2usize), smd_pck);
            smd_pck = rht(dlt, 21i32);
            cur = load(unp_ptr.add(4usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 4i32));
            prv = cur;
            cur = load(unp_ptr.add(5usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 29i32));
            prv = cur;
            store(pck_ptr.add(3usize), smd_pck);
            smd_pck = rht(dlt, 3i32);
            cur = load(unp_ptr.add(6usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 22i32));
            prv = cur;
            store(pck_ptr.add(4usize), smd_pck);
            smd_pck = rht(dlt, 10i32);
            cur = load(unp_ptr.add(7usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 15i32));
            prv = cur;
            store(pck_ptr.add(5usize), smd_pck);
            smd_pck = rht(dlt, 17i32);
            cur = load(unp_ptr.add(8usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 8i32));
            prv = cur;
            store(pck_ptr.add(6usize), smd_pck);
            smd_pck = rht(dlt, 24i32);
            cur = load(unp_ptr.add(9usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 1i32));
            prv = cur;
            cur = load(unp_ptr.add(10usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 26i32));
            prv = cur;
            store(pck_ptr.add(7usize), smd_pck);
            smd_pck = rht(dlt, 6i32);
            cur = load(unp_ptr.add(11usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 19i32));
            prv = cur;
            store(pck_ptr.add(8usize), smd_pck);
            smd_pck = rht(dlt, 13i32);
            cur = load(unp_ptr.add(12usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 12i32));
            prv = cur;
            store(pck_ptr.add(9usize), smd_pck);
            smd_pck = rht(dlt, 20i32);
            cur = load(unp_ptr.add(13usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 5i32));
            prv = cur;
            cur = load(unp_ptr.add(14usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 30i32));
            prv = cur;
            store(pck_ptr.add(10usize), smd_pck);
            smd_pck = rht(dlt, 2i32);
            cur = load(unp_ptr.add(15usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 23i32));
            prv = cur;
            store(pck_ptr.add(11usize), smd_pck);
            smd_pck = rht(dlt, 9i32);
            cur = load(unp_ptr.add(16usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 16i32));
            prv = cur;
            store(pck_ptr.add(12usize), smd_pck);
            smd_pck = rht(dlt, 16i32);
            cur = load(unp_ptr.add(17usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 9i32));
            prv = cur;
            store(pck_ptr.add(13usize), smd_pck);
            smd_pck = rht(dlt, 23i32);
            cur = load(unp_ptr.add(18usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 2i32));
            prv = cur;
            cur = load(unp_ptr.add(19usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 27i32));
            prv = cur;
            store(pck_ptr.add(14usize), smd_pck);
            smd_pck = rht(dlt, 5i32);
            cur = load(unp_ptr.add(20usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 20i32));
            prv = cur;
            store(pck_ptr.add(15usize), smd_pck);
            smd_pck = rht(dlt, 12i32);
            cur = load(unp_ptr.add(21usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 13i32));
            prv = cur;
            store(pck_ptr.add(16usize), smd_pck);
            smd_pck = rht(dlt, 19i32);
            cur = load(unp_ptr.add(22usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 6i32));
            prv = cur;
            cur = load(unp_ptr.add(23usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 31i32));
            prv = cur;
            store(pck_ptr.add(17usize), smd_pck);
            smd_pck = rht(dlt, 1i32);
            cur = load(unp_ptr.add(24usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 24i32));
            prv = cur;
            store(pck_ptr.add(18usize), smd_pck);
            smd_pck = rht(dlt, 8i32);
            cur = load(unp_ptr.add(25usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 17i32));
            prv = cur;
            store(pck_ptr.add(19usize), smd_pck);
            smd_pck = rht(dlt, 15i32);
            cur = load(unp_ptr.add(26usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 10i32));
            prv = cur;
            store(pck_ptr.add(20usize), smd_pck);
            smd_pck = rht(dlt, 22i32);
            cur = load(unp_ptr.add(27usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 3i32));
            prv = cur;
            cur = load(unp_ptr.add(28usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 28i32));
            prv = cur;
            store(pck_ptr.add(21usize), smd_pck);
            smd_pck = rht(dlt, 4i32);
            cur = load(unp_ptr.add(29usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 21i32));
            prv = cur;
            store(pck_ptr.add(22usize), smd_pck);
            smd_pck = rht(dlt, 11i32);
            cur = load(unp_ptr.add(30usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 14i32));
            prv = cur;
            store(pck_ptr.add(23usize), smd_pck);
            smd_pck = rht(dlt, 18i32);
            store(
                pck_ptr.add(24usize),
                or(smd_pck, lft(sub(load(unp_ptr.add(31usize)), prv), 7i32)),
            );
        }
        26u8 => {
            let mut prv = set1(fst as i32);
            let mut cur = load(unp_ptr);
            let mut smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(1usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 26i32));
            prv = cur;
            store(pck_ptr.add(0usize), smd_pck);
            smd_pck = rht(dlt, 6i32);
            cur = load(unp_ptr.add(2usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 20i32));
            prv = cur;
            store(pck_ptr.add(1usize), smd_pck);
            smd_pck = rht(dlt, 12i32);
            cur = load(unp_ptr.add(3usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 14i32));
            prv = cur;
            store(pck_ptr.add(2usize), smd_pck);
            smd_pck = rht(dlt, 18i32);
            cur = load(unp_ptr.add(4usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 8i32));
            prv = cur;
            store(pck_ptr.add(3usize), smd_pck);
            smd_pck = rht(dlt, 24i32);
            cur = load(unp_ptr.add(5usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 2i32));
            prv = cur;
            cur = load(unp_ptr.add(6usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 28i32));
            prv = cur;
            store(pck_ptr.add(4usize), smd_pck);
            smd_pck = rht(dlt, 4i32);
            cur = load(unp_ptr.add(7usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 22i32));
            prv = cur;
            store(pck_ptr.add(5usize), smd_pck);
            smd_pck = rht(dlt, 10i32);
            cur = load(unp_ptr.add(8usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 16i32));
            prv = cur;
            store(pck_ptr.add(6usize), smd_pck);
            smd_pck = rht(dlt, 16i32);
            cur = load(unp_ptr.add(9usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 10i32));
            prv = cur;
            store(pck_ptr.add(7usize), smd_pck);
            smd_pck = rht(dlt, 22i32);
            cur = load(unp_ptr.add(10usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 4i32));
            prv = cur;
            cur = load(unp_ptr.add(11usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 30i32));
            prv = cur;
            store(pck_ptr.add(8usize), smd_pck);
            smd_pck = rht(dlt, 2i32);
            cur = load(unp_ptr.add(12usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 24i32));
            prv = cur;
            store(pck_ptr.add(9usize), smd_pck);
            smd_pck = rht(dlt, 8i32);
            cur = load(unp_ptr.add(13usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 18i32));
            prv = cur;
            store(pck_ptr.add(10usize), smd_pck);
            smd_pck = rht(dlt, 14i32);
            cur = load(unp_ptr.add(14usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 12i32));
            prv = cur;
            store(pck_ptr.add(11usize), smd_pck);
            smd_pck = rht(dlt, 20i32);
            cur = load(unp_ptr.add(15usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 6i32));
            prv = cur;
            store(pck_ptr.add(12usize), smd_pck);
            cur = load(unp_ptr.add(16usize));
            smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(17usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 26i32));
            prv = cur;
            store(pck_ptr.add(13usize), smd_pck);
            smd_pck = rht(dlt, 6i32);
            cur = load(unp_ptr.add(18usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 20i32));
            prv = cur;
            store(pck_ptr.add(14usize), smd_pck);
            smd_pck = rht(dlt, 12i32);
            cur = load(unp_ptr.add(19usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 14i32));
            prv = cur;
            store(pck_ptr.add(15usize), smd_pck);
            smd_pck = rht(dlt, 18i32);
            cur = load(unp_ptr.add(20usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 8i32));
            prv = cur;
            store(pck_ptr.add(16usize), smd_pck);
            smd_pck = rht(dlt, 24i32);
            cur = load(unp_ptr.add(21usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 2i32));
            prv = cur;
            cur = load(unp_ptr.add(22usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 28i32));
            prv = cur;
            store(pck_ptr.add(17usize), smd_pck);
            smd_pck = rht(dlt, 4i32);
            cur = load(unp_ptr.add(23usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 22i32));
            prv = cur;
            store(pck_ptr.add(18usize), smd_pck);
            smd_pck = rht(dlt, 10i32);
            cur = load(unp_ptr.add(24usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 16i32));
            prv = cur;
            store(pck_ptr.add(19usize), smd_pck);
            smd_pck = rht(dlt, 16i32);
            cur = load(unp_ptr.add(25usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 10i32));
            prv = cur;
            store(pck_ptr.add(20usize), smd_pck);
            smd_pck = rht(dlt, 22i32);
            cur = load(unp_ptr.add(26usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 4i32));
            prv = cur;
            cur = load(unp_ptr.add(27usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 30i32));
            prv = cur;
            store(pck_ptr.add(21usize), smd_pck);
            smd_pck = rht(dlt, 2i32);
            cur = load(unp_ptr.add(28usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 24i32));
            prv = cur;
            store(pck_ptr.add(22usize), smd_pck);
            smd_pck = rht(dlt, 8i32);
            cur = load(unp_ptr.add(29usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 18i32));
            prv = cur;
            store(pck_ptr.add(23usize), smd_pck);
            smd_pck = rht(dlt, 14i32);
            cur = load(unp_ptr.add(30usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 12i32));
            prv = cur;
            store(pck_ptr.add(24usize), smd_pck);
            smd_pck = rht(dlt, 20i32);
            store(
                pck_ptr.add(25usize),
                or(smd_pck, lft(sub(load(unp_ptr.add(31usize)), prv), 6i32)),
            );
        }
        27u8 => {
            let mut prv = set1(fst as i32);
            let mut cur = load(unp_ptr);
            let mut smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(1usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 27i32));
            prv = cur;
            store(pck_ptr.add(0usize), smd_pck);
            smd_pck = rht(dlt, 5i32);
            cur = load(unp_ptr.add(2usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 22i32));
            prv = cur;
            store(pck_ptr.add(1usize), smd_pck);
            smd_pck = rht(dlt, 10i32);
            cur = load(unp_ptr.add(3usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 17i32));
            prv = cur;
            store(pck_ptr.add(2usize), smd_pck);
            smd_pck = rht(dlt, 15i32);
            cur = load(unp_ptr.add(4usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 12i32));
            prv = cur;
            store(pck_ptr.add(3usize), smd_pck);
            smd_pck = rht(dlt, 20i32);
            cur = load(unp_ptr.add(5usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 7i32));
            prv = cur;
            store(pck_ptr.add(4usize), smd_pck);
            smd_pck = rht(dlt, 25i32);
            cur = load(unp_ptr.add(6usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 2i32));
            prv = cur;
            cur = load(unp_ptr.add(7usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 29i32));
            prv = cur;
            store(pck_ptr.add(5usize), smd_pck);
            smd_pck = rht(dlt, 3i32);
            cur = load(unp_ptr.add(8usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 24i32));
            prv = cur;
            store(pck_ptr.add(6usize), smd_pck);
            smd_pck = rht(dlt, 8i32);
            cur = load(unp_ptr.add(9usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 19i32));
            prv = cur;
            store(pck_ptr.add(7usize), smd_pck);
            smd_pck = rht(dlt, 13i32);
            cur = load(unp_ptr.add(10usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 14i32));
            prv = cur;
            store(pck_ptr.add(8usize), smd_pck);
            smd_pck = rht(dlt, 18i32);
            cur = load(unp_ptr.add(11usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 9i32));
            prv = cur;
            store(pck_ptr.add(9usize), smd_pck);
            smd_pck = rht(dlt, 23i32);
            cur = load(unp_ptr.add(12usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 4i32));
            prv = cur;
            cur = load(unp_ptr.add(13usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 31i32));
            prv = cur;
            store(pck_ptr.add(10usize), smd_pck);
            smd_pck = rht(dlt, 1i32);
            cur = load(unp_ptr.add(14usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 26i32));
            prv = cur;
            store(pck_ptr.add(11usize), smd_pck);
            smd_pck = rht(dlt, 6i32);
            cur = load(unp_ptr.add(15usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 21i32));
            prv = cur;
            store(pck_ptr.add(12usize), smd_pck);
            smd_pck = rht(dlt, 11i32);
            cur = load(unp_ptr.add(16usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 16i32));
            prv = cur;
            store(pck_ptr.add(13usize), smd_pck);
            smd_pck = rht(dlt, 16i32);
            cur = load(unp_ptr.add(17usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 11i32));
            prv = cur;
            store(pck_ptr.add(14usize), smd_pck);
            smd_pck = rht(dlt, 21i32);
            cur = load(unp_ptr.add(18usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 6i32));
            prv = cur;
            store(pck_ptr.add(15usize), smd_pck);
            smd_pck = rht(dlt, 26i32);
            cur = load(unp_ptr.add(19usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 1i32));
            prv = cur;
            cur = load(unp_ptr.add(20usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 28i32));
            prv = cur;
            store(pck_ptr.add(16usize), smd_pck);
            smd_pck = rht(dlt, 4i32);
            cur = load(unp_ptr.add(21usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 23i32));
            prv = cur;
            store(pck_ptr.add(17usize), smd_pck);
            smd_pck = rht(dlt, 9i32);
            cur = load(unp_ptr.add(22usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 18i32));
            prv = cur;
            store(pck_ptr.add(18usize), smd_pck);
            smd_pck = rht(dlt, 14i32);
            cur = load(unp_ptr.add(23usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 13i32));
            prv = cur;
            store(pck_ptr.add(19usize), smd_pck);
            smd_pck = rht(dlt, 19i32);
            cur = load(unp_ptr.add(24usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 8i32));
            prv = cur;
            store(pck_ptr.add(20usize), smd_pck);
            smd_pck = rht(dlt, 24i32);
            cur = load(unp_ptr.add(25usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 3i32));
            prv = cur;
            cur = load(unp_ptr.add(26usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 30i32));
            prv = cur;
            store(pck_ptr.add(21usize), smd_pck);
            smd_pck = rht(dlt, 2i32);
            cur = load(unp_ptr.add(27usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 25i32));
            prv = cur;
            store(pck_ptr.add(22usize), smd_pck);
            smd_pck = rht(dlt, 7i32);
            cur = load(unp_ptr.add(28usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 20i32));
            prv = cur;
            store(pck_ptr.add(23usize), smd_pck);
            smd_pck = rht(dlt, 12i32);
            cur = load(unp_ptr.add(29usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 15i32));
            prv = cur;
            store(pck_ptr.add(24usize), smd_pck);
            smd_pck = rht(dlt, 17i32);
            cur = load(unp_ptr.add(30usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 10i32));
            prv = cur;
            store(pck_ptr.add(25usize), smd_pck);
            smd_pck = rht(dlt, 22i32);
            store(
                pck_ptr.add(26usize),
                or(smd_pck, lft(sub(load(unp_ptr.add(31usize)), prv), 5i32)),
            );
        }
        28u8 => {
            let mut prv = set1(fst as i32);
            let mut cur = load(unp_ptr);
            let mut smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(1usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 28i32));
            prv = cur;
            store(pck_ptr.add(0usize), smd_pck);
            smd_pck = rht(dlt, 4i32);
            cur = load(unp_ptr.add(2usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 24i32));
            prv = cur;
            store(pck_ptr.add(1usize), smd_pck);
            smd_pck = rht(dlt, 8i32);
            cur = load(unp_ptr.add(3usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 20i32));
            prv = cur;
            store(pck_ptr.add(2usize), smd_pck);
            smd_pck = rht(dlt, 12i32);
            cur = load(unp_ptr.add(4usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 16i32));
            prv = cur;
            store(pck_ptr.add(3usize), smd_pck);
            smd_pck = rht(dlt, 16i32);
            cur = load(unp_ptr.add(5usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 12i32));
            prv = cur;
            store(pck_ptr.add(4usize), smd_pck);
            smd_pck = rht(dlt, 20i32);
            cur = load(unp_ptr.add(6usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 8i32));
            prv = cur;
            store(pck_ptr.add(5usize), smd_pck);
            smd_pck = rht(dlt, 24i32);
            cur = load(unp_ptr.add(7usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 4i32));
            prv = cur;
            store(pck_ptr.add(6usize), smd_pck);
            cur = load(unp_ptr.add(8usize));
            smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(9usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 28i32));
            prv = cur;
            store(pck_ptr.add(7usize), smd_pck);
            smd_pck = rht(dlt, 4i32);
            cur = load(unp_ptr.add(10usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 24i32));
            prv = cur;
            store(pck_ptr.add(8usize), smd_pck);
            smd_pck = rht(dlt, 8i32);
            cur = load(unp_ptr.add(11usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 20i32));
            prv = cur;
            store(pck_ptr.add(9usize), smd_pck);
            smd_pck = rht(dlt, 12i32);
            cur = load(unp_ptr.add(12usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 16i32));
            prv = cur;
            store(pck_ptr.add(10usize), smd_pck);
            smd_pck = rht(dlt, 16i32);
            cur = load(unp_ptr.add(13usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 12i32));
            prv = cur;
            store(pck_ptr.add(11usize), smd_pck);
            smd_pck = rht(dlt, 20i32);
            cur = load(unp_ptr.add(14usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 8i32));
            prv = cur;
            store(pck_ptr.add(12usize), smd_pck);
            smd_pck = rht(dlt, 24i32);
            cur = load(unp_ptr.add(15usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 4i32));
            prv = cur;
            store(pck_ptr.add(13usize), smd_pck);
            cur = load(unp_ptr.add(16usize));
            smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(17usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 28i32));
            prv = cur;
            store(pck_ptr.add(14usize), smd_pck);
            smd_pck = rht(dlt, 4i32);
            cur = load(unp_ptr.add(18usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 24i32));
            prv = cur;
            store(pck_ptr.add(15usize), smd_pck);
            smd_pck = rht(dlt, 8i32);
            cur = load(unp_ptr.add(19usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 20i32));
            prv = cur;
            store(pck_ptr.add(16usize), smd_pck);
            smd_pck = rht(dlt, 12i32);
            cur = load(unp_ptr.add(20usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 16i32));
            prv = cur;
            store(pck_ptr.add(17usize), smd_pck);
            smd_pck = rht(dlt, 16i32);
            cur = load(unp_ptr.add(21usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 12i32));
            prv = cur;
            store(pck_ptr.add(18usize), smd_pck);
            smd_pck = rht(dlt, 20i32);
            cur = load(unp_ptr.add(22usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 8i32));
            prv = cur;
            store(pck_ptr.add(19usize), smd_pck);
            smd_pck = rht(dlt, 24i32);
            cur = load(unp_ptr.add(23usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 4i32));
            prv = cur;
            store(pck_ptr.add(20usize), smd_pck);
            cur = load(unp_ptr.add(24usize));
            smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(25usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 28i32));
            prv = cur;
            store(pck_ptr.add(21usize), smd_pck);
            smd_pck = rht(dlt, 4i32);
            cur = load(unp_ptr.add(26usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 24i32));
            prv = cur;
            store(pck_ptr.add(22usize), smd_pck);
            smd_pck = rht(dlt, 8i32);
            cur = load(unp_ptr.add(27usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 20i32));
            prv = cur;
            store(pck_ptr.add(23usize), smd_pck);
            smd_pck = rht(dlt, 12i32);
            cur = load(unp_ptr.add(28usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 16i32));
            prv = cur;
            store(pck_ptr.add(24usize), smd_pck);
            smd_pck = rht(dlt, 16i32);
            cur = load(unp_ptr.add(29usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 12i32));
            prv = cur;
            store(pck_ptr.add(25usize), smd_pck);
            smd_pck = rht(dlt, 20i32);
            cur = load(unp_ptr.add(30usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 8i32));
            prv = cur;
            store(pck_ptr.add(26usize), smd_pck);
            smd_pck = rht(dlt, 24i32);
            store(
                pck_ptr.add(27usize),
                or(smd_pck, lft(sub(load(unp_ptr.add(31usize)), prv), 4i32)),
            );
        }
        29u8 => {
            let mut prv = set1(fst as i32);
            let mut cur = load(unp_ptr);
            let mut smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(1usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 29i32));
            prv = cur;
            store(pck_ptr.add(0usize), smd_pck);
            smd_pck = rht(dlt, 3i32);
            cur = load(unp_ptr.add(2usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 26i32));
            prv = cur;
            store(pck_ptr.add(1usize), smd_pck);
            smd_pck = rht(dlt, 6i32);
            cur = load(unp_ptr.add(3usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 23i32));
            prv = cur;
            store(pck_ptr.add(2usize), smd_pck);
            smd_pck = rht(dlt, 9i32);
            cur = load(unp_ptr.add(4usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 20i32));
            prv = cur;
            store(pck_ptr.add(3usize), smd_pck);
            smd_pck = rht(dlt, 12i32);
            cur = load(unp_ptr.add(5usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 17i32));
            prv = cur;
            store(pck_ptr.add(4usize), smd_pck);
            smd_pck = rht(dlt, 15i32);
            cur = load(unp_ptr.add(6usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 14i32));
            prv = cur;
            store(pck_ptr.add(5usize), smd_pck);
            smd_pck = rht(dlt, 18i32);
            cur = load(unp_ptr.add(7usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 11i32));
            prv = cur;
            store(pck_ptr.add(6usize), smd_pck);
            smd_pck = rht(dlt, 21i32);
            cur = load(unp_ptr.add(8usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 8i32));
            prv = cur;
            store(pck_ptr.add(7usize), smd_pck);
            smd_pck = rht(dlt, 24i32);
            cur = load(unp_ptr.add(9usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 5i32));
            prv = cur;
            store(pck_ptr.add(8usize), smd_pck);
            smd_pck = rht(dlt, 27i32);
            cur = load(unp_ptr.add(10usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 2i32));
            prv = cur;
            cur = load(unp_ptr.add(11usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 31i32));
            prv = cur;
            store(pck_ptr.add(9usize), smd_pck);
            smd_pck = rht(dlt, 1i32);
            cur = load(unp_ptr.add(12usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 28i32));
            prv = cur;
            store(pck_ptr.add(10usize), smd_pck);
            smd_pck = rht(dlt, 4i32);
            cur = load(unp_ptr.add(13usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 25i32));
            prv = cur;
            store(pck_ptr.add(11usize), smd_pck);
            smd_pck = rht(dlt, 7i32);
            cur = load(unp_ptr.add(14usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 22i32));
            prv = cur;
            store(pck_ptr.add(12usize), smd_pck);
            smd_pck = rht(dlt, 10i32);
            cur = load(unp_ptr.add(15usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 19i32));
            prv = cur;
            store(pck_ptr.add(13usize), smd_pck);
            smd_pck = rht(dlt, 13i32);
            cur = load(unp_ptr.add(16usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 16i32));
            prv = cur;
            store(pck_ptr.add(14usize), smd_pck);
            smd_pck = rht(dlt, 16i32);
            cur = load(unp_ptr.add(17usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 13i32));
            prv = cur;
            store(pck_ptr.add(15usize), smd_pck);
            smd_pck = rht(dlt, 19i32);
            cur = load(unp_ptr.add(18usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 10i32));
            prv = cur;
            store(pck_ptr.add(16usize), smd_pck);
            smd_pck = rht(dlt, 22i32);
            cur = load(unp_ptr.add(19usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 7i32));
            prv = cur;
            store(pck_ptr.add(17usize), smd_pck);
            smd_pck = rht(dlt, 25i32);
            cur = load(unp_ptr.add(20usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 4i32));
            prv = cur;
            store(pck_ptr.add(18usize), smd_pck);
            smd_pck = rht(dlt, 28i32);
            cur = load(unp_ptr.add(21usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 1i32));
            prv = cur;
            cur = load(unp_ptr.add(22usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 30i32));
            prv = cur;
            store(pck_ptr.add(19usize), smd_pck);
            smd_pck = rht(dlt, 2i32);
            cur = load(unp_ptr.add(23usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 27i32));
            prv = cur;
            store(pck_ptr.add(20usize), smd_pck);
            smd_pck = rht(dlt, 5i32);
            cur = load(unp_ptr.add(24usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 24i32));
            prv = cur;
            store(pck_ptr.add(21usize), smd_pck);
            smd_pck = rht(dlt, 8i32);
            cur = load(unp_ptr.add(25usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 21i32));
            prv = cur;
            store(pck_ptr.add(22usize), smd_pck);
            smd_pck = rht(dlt, 11i32);
            cur = load(unp_ptr.add(26usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 18i32));
            prv = cur;
            store(pck_ptr.add(23usize), smd_pck);
            smd_pck = rht(dlt, 14i32);
            cur = load(unp_ptr.add(27usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 15i32));
            prv = cur;
            store(pck_ptr.add(24usize), smd_pck);
            smd_pck = rht(dlt, 17i32);
            cur = load(unp_ptr.add(28usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 12i32));
            prv = cur;
            store(pck_ptr.add(25usize), smd_pck);
            smd_pck = rht(dlt, 20i32);
            cur = load(unp_ptr.add(29usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 9i32));
            prv = cur;
            store(pck_ptr.add(26usize), smd_pck);
            smd_pck = rht(dlt, 23i32);
            cur = load(unp_ptr.add(30usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 6i32));
            prv = cur;
            store(pck_ptr.add(27usize), smd_pck);
            smd_pck = rht(dlt, 26i32);
            store(
                pck_ptr.add(28usize),
                or(smd_pck, lft(sub(load(unp_ptr.add(31usize)), prv), 3i32)),
            );
        }
        30u8 => {
            let mut prv = set1(fst as i32);
            let mut cur = load(unp_ptr);
            let mut smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(1usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 30i32));
            prv = cur;
            store(pck_ptr.add(0usize), smd_pck);
            smd_pck = rht(dlt, 2i32);
            cur = load(unp_ptr.add(2usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 28i32));
            prv = cur;
            store(pck_ptr.add(1usize), smd_pck);
            smd_pck = rht(dlt, 4i32);
            cur = load(unp_ptr.add(3usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 26i32));
            prv = cur;
            store(pck_ptr.add(2usize), smd_pck);
            smd_pck = rht(dlt, 6i32);
            cur = load(unp_ptr.add(4usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 24i32));
            prv = cur;
            store(pck_ptr.add(3usize), smd_pck);
            smd_pck = rht(dlt, 8i32);
            cur = load(unp_ptr.add(5usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 22i32));
            prv = cur;
            store(pck_ptr.add(4usize), smd_pck);
            smd_pck = rht(dlt, 10i32);
            cur = load(unp_ptr.add(6usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 20i32));
            prv = cur;
            store(pck_ptr.add(5usize), smd_pck);
            smd_pck = rht(dlt, 12i32);
            cur = load(unp_ptr.add(7usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 18i32));
            prv = cur;
            store(pck_ptr.add(6usize), smd_pck);
            smd_pck = rht(dlt, 14i32);
            cur = load(unp_ptr.add(8usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 16i32));
            prv = cur;
            store(pck_ptr.add(7usize), smd_pck);
            smd_pck = rht(dlt, 16i32);
            cur = load(unp_ptr.add(9usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 14i32));
            prv = cur;
            store(pck_ptr.add(8usize), smd_pck);
            smd_pck = rht(dlt, 18i32);
            cur = load(unp_ptr.add(10usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 12i32));
            prv = cur;
            store(pck_ptr.add(9usize), smd_pck);
            smd_pck = rht(dlt, 20i32);
            cur = load(unp_ptr.add(11usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 10i32));
            prv = cur;
            store(pck_ptr.add(10usize), smd_pck);
            smd_pck = rht(dlt, 22i32);
            cur = load(unp_ptr.add(12usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 8i32));
            prv = cur;
            store(pck_ptr.add(11usize), smd_pck);
            smd_pck = rht(dlt, 24i32);
            cur = load(unp_ptr.add(13usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 6i32));
            prv = cur;
            store(pck_ptr.add(12usize), smd_pck);
            smd_pck = rht(dlt, 26i32);
            cur = load(unp_ptr.add(14usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 4i32));
            prv = cur;
            store(pck_ptr.add(13usize), smd_pck);
            smd_pck = rht(dlt, 28i32);
            cur = load(unp_ptr.add(15usize));
            smd_pck = or(smd_pck, lft(sub(cur, prv), 2i32));
            prv = cur;
            store(pck_ptr.add(14usize), smd_pck);
            cur = load(unp_ptr.add(16usize));
            smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(17usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 30i32));
            prv = cur;
            store(pck_ptr.add(15usize), smd_pck);
            smd_pck = rht(dlt, 2i32);
            cur = load(unp_ptr.add(18usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 28i32));
            prv = cur;
            store(pck_ptr.add(16usize), smd_pck);
            smd_pck = rht(dlt, 4i32);
            cur = load(unp_ptr.add(19usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 26i32));
            prv = cur;
            store(pck_ptr.add(17usize), smd_pck);
            smd_pck = rht(dlt, 6i32);
            cur = load(unp_ptr.add(20usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 24i32));
            prv = cur;
            store(pck_ptr.add(18usize), smd_pck);
            smd_pck = rht(dlt, 8i32);
            cur = load(unp_ptr.add(21usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 22i32));
            prv = cur;
            store(pck_ptr.add(19usize), smd_pck);
            smd_pck = rht(dlt, 10i32);
            cur = load(unp_ptr.add(22usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 20i32));
            prv = cur;
            store(pck_ptr.add(20usize), smd_pck);
            smd_pck = rht(dlt, 12i32);
            cur = load(unp_ptr.add(23usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 18i32));
            prv = cur;
            store(pck_ptr.add(21usize), smd_pck);
            smd_pck = rht(dlt, 14i32);
            cur = load(unp_ptr.add(24usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 16i32));
            prv = cur;
            store(pck_ptr.add(22usize), smd_pck);
            smd_pck = rht(dlt, 16i32);
            cur = load(unp_ptr.add(25usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 14i32));
            prv = cur;
            store(pck_ptr.add(23usize), smd_pck);
            smd_pck = rht(dlt, 18i32);
            cur = load(unp_ptr.add(26usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 12i32));
            prv = cur;
            store(pck_ptr.add(24usize), smd_pck);
            smd_pck = rht(dlt, 20i32);
            cur = load(unp_ptr.add(27usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 10i32));
            prv = cur;
            store(pck_ptr.add(25usize), smd_pck);
            smd_pck = rht(dlt, 22i32);
            cur = load(unp_ptr.add(28usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 8i32));
            prv = cur;
            store(pck_ptr.add(26usize), smd_pck);
            smd_pck = rht(dlt, 24i32);
            cur = load(unp_ptr.add(29usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 6i32));
            prv = cur;
            store(pck_ptr.add(27usize), smd_pck);
            smd_pck = rht(dlt, 26i32);
            cur = load(unp_ptr.add(30usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 4i32));
            prv = cur;
            store(pck_ptr.add(28usize), smd_pck);
            smd_pck = rht(dlt, 28i32);
            store(
                pck_ptr.add(29usize),
                or(smd_pck, lft(sub(load(unp_ptr.add(31usize)), prv), 2i32)),
            );
        }
        31u8 => {
            let mut prv = set1(fst as i32);
            let mut cur = load(unp_ptr);
            let mut smd_pck = sub(cur, prv);
            prv = cur;
            cur = load(unp_ptr.add(1usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 31i32));
            prv = cur;
            store(pck_ptr.add(0usize), smd_pck);
            smd_pck = rht(dlt, 1i32);
            cur = load(unp_ptr.add(2usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 30i32));
            prv = cur;
            store(pck_ptr.add(1usize), smd_pck);
            smd_pck = rht(dlt, 2i32);
            cur = load(unp_ptr.add(3usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 29i32));
            prv = cur;
            store(pck_ptr.add(2usize), smd_pck);
            smd_pck = rht(dlt, 3i32);
            cur = load(unp_ptr.add(4usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 28i32));
            prv = cur;
            store(pck_ptr.add(3usize), smd_pck);
            smd_pck = rht(dlt, 4i32);
            cur = load(unp_ptr.add(5usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 27i32));
            prv = cur;
            store(pck_ptr.add(4usize), smd_pck);
            smd_pck = rht(dlt, 5i32);
            cur = load(unp_ptr.add(6usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 26i32));
            prv = cur;
            store(pck_ptr.add(5usize), smd_pck);
            smd_pck = rht(dlt, 6i32);
            cur = load(unp_ptr.add(7usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 25i32));
            prv = cur;
            store(pck_ptr.add(6usize), smd_pck);
            smd_pck = rht(dlt, 7i32);
            cur = load(unp_ptr.add(8usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 24i32));
            prv = cur;
            store(pck_ptr.add(7usize), smd_pck);
            smd_pck = rht(dlt, 8i32);
            cur = load(unp_ptr.add(9usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 23i32));
            prv = cur;
            store(pck_ptr.add(8usize), smd_pck);
            smd_pck = rht(dlt, 9i32);
            cur = load(unp_ptr.add(10usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 22i32));
            prv = cur;
            store(pck_ptr.add(9usize), smd_pck);
            smd_pck = rht(dlt, 10i32);
            cur = load(unp_ptr.add(11usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 21i32));
            prv = cur;
            store(pck_ptr.add(10usize), smd_pck);
            smd_pck = rht(dlt, 11i32);
            cur = load(unp_ptr.add(12usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 20i32));
            prv = cur;
            store(pck_ptr.add(11usize), smd_pck);
            smd_pck = rht(dlt, 12i32);
            cur = load(unp_ptr.add(13usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 19i32));
            prv = cur;
            store(pck_ptr.add(12usize), smd_pck);
            smd_pck = rht(dlt, 13i32);
            cur = load(unp_ptr.add(14usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 18i32));
            prv = cur;
            store(pck_ptr.add(13usize), smd_pck);
            smd_pck = rht(dlt, 14i32);
            cur = load(unp_ptr.add(15usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 17i32));
            prv = cur;
            store(pck_ptr.add(14usize), smd_pck);
            smd_pck = rht(dlt, 15i32);
            cur = load(unp_ptr.add(16usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 16i32));
            prv = cur;
            store(pck_ptr.add(15usize), smd_pck);
            smd_pck = rht(dlt, 16i32);
            cur = load(unp_ptr.add(17usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 15i32));
            prv = cur;
            store(pck_ptr.add(16usize), smd_pck);
            smd_pck = rht(dlt, 17i32);
            cur = load(unp_ptr.add(18usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 14i32));
            prv = cur;
            store(pck_ptr.add(17usize), smd_pck);
            smd_pck = rht(dlt, 18i32);
            cur = load(unp_ptr.add(19usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 13i32));
            prv = cur;
            store(pck_ptr.add(18usize), smd_pck);
            smd_pck = rht(dlt, 19i32);
            cur = load(unp_ptr.add(20usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 12i32));
            prv = cur;
            store(pck_ptr.add(19usize), smd_pck);
            smd_pck = rht(dlt, 20i32);
            cur = load(unp_ptr.add(21usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 11i32));
            prv = cur;
            store(pck_ptr.add(20usize), smd_pck);
            smd_pck = rht(dlt, 21i32);
            cur = load(unp_ptr.add(22usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 10i32));
            prv = cur;
            store(pck_ptr.add(21usize), smd_pck);
            smd_pck = rht(dlt, 22i32);
            cur = load(unp_ptr.add(23usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 9i32));
            prv = cur;
            store(pck_ptr.add(22usize), smd_pck);
            smd_pck = rht(dlt, 23i32);
            cur = load(unp_ptr.add(24usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 8i32));
            prv = cur;
            store(pck_ptr.add(23usize), smd_pck);
            smd_pck = rht(dlt, 24i32);
            cur = load(unp_ptr.add(25usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 7i32));
            prv = cur;
            store(pck_ptr.add(24usize), smd_pck);
            smd_pck = rht(dlt, 25i32);
            cur = load(unp_ptr.add(26usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 6i32));
            prv = cur;
            store(pck_ptr.add(25usize), smd_pck);
            smd_pck = rht(dlt, 26i32);
            cur = load(unp_ptr.add(27usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 5i32));
            prv = cur;
            store(pck_ptr.add(26usize), smd_pck);
            smd_pck = rht(dlt, 27i32);
            cur = load(unp_ptr.add(28usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 4i32));
            prv = cur;
            store(pck_ptr.add(27usize), smd_pck);
            smd_pck = rht(dlt, 28i32);
            cur = load(unp_ptr.add(29usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 3i32));
            prv = cur;
            store(pck_ptr.add(28usize), smd_pck);
            smd_pck = rht(dlt, 29i32);
            cur = load(unp_ptr.add(30usize));
            let dlt = sub(cur, prv);
            smd_pck = or(smd_pck, lft(dlt, 2i32));
            prv = cur;
            store(pck_ptr.add(29usize), smd_pck);
            smd_pck = rht(dlt, 30i32);
            store(
                pck_ptr.add(30usize),
                or(smd_pck, lft(sub(load(unp_ptr.add(31usize)), prv), 1i32)),
            );
        }
        32u8 => {
            ptr::copy_nonoverlapping(unp.as_ptr() as *const u8, pck.as_mut_ptr(), pck.len());
        }
        _ => ::std::rt::panic_fmt(::core::fmt::Arguments::new_v1(
            &["unsupported bit-length "],
            &[::core::fmt::ArgumentV1::new_display(&elm_bit_len)],
        )),
    }
}
pub unsafe fn u32x256_unp(elm_bit_len: u8, fst: u32, pck: &[u8], unp: &mut [u32]) {
    let pck_ptr = pck.as_ptr() as *const m256;
    let unp_ptr = unp.as_mut_ptr() as *mut m256;
    match elm_bit_len {
        0u8 => {
            unp.fill(0);
        }
        1u8 => {
            let msk = set1(((1u32 << 1u32) - 1u32) as i32);
            let mut smd_pck = load(pck_ptr);
            let mut prv = set1(fst as i32);
            let mut cur = add(prv, and(smd_pck, msk));
            store(unp_ptr, cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 1i32), msk));
            store(unp_ptr.add(1usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 2i32), msk));
            store(unp_ptr.add(2usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 3i32), msk));
            store(unp_ptr.add(3usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 4i32), msk));
            store(unp_ptr.add(4usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 5i32), msk));
            store(unp_ptr.add(5usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 6i32), msk));
            store(unp_ptr.add(6usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 7i32), msk));
            store(unp_ptr.add(7usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 8i32), msk));
            store(unp_ptr.add(8usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 9i32), msk));
            store(unp_ptr.add(9usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 10i32), msk));
            store(unp_ptr.add(10usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 11i32), msk));
            store(unp_ptr.add(11usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 12i32), msk));
            store(unp_ptr.add(12usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 13i32), msk));
            store(unp_ptr.add(13usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 14i32), msk));
            store(unp_ptr.add(14usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 15i32), msk));
            store(unp_ptr.add(15usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 16i32), msk));
            store(unp_ptr.add(16usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 17i32), msk));
            store(unp_ptr.add(17usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 18i32), msk));
            store(unp_ptr.add(18usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 19i32), msk));
            store(unp_ptr.add(19usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 20i32), msk));
            store(unp_ptr.add(20usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 21i32), msk));
            store(unp_ptr.add(21usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 22i32), msk));
            store(unp_ptr.add(22usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 23i32), msk));
            store(unp_ptr.add(23usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 24i32), msk));
            store(unp_ptr.add(24usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 25i32), msk));
            store(unp_ptr.add(25usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 26i32), msk));
            store(unp_ptr.add(26usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 27i32), msk));
            store(unp_ptr.add(27usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 28i32), msk));
            store(unp_ptr.add(28usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 29i32), msk));
            store(unp_ptr.add(29usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 30i32), msk));
            store(unp_ptr.add(30usize), cur);
            prv = cur;
            store(
                unp_ptr.add(31usize),
                add(prv, and(rht(smd_pck, 31i32), msk)),
            );
        }
        2u8 => {
            let msk = set1(((1u32 << 2u32) - 1u32) as i32);
            let mut smd_pck = load(pck_ptr);
            let mut prv = set1(fst as i32);
            let mut cur = add(prv, and(smd_pck, msk));
            store(unp_ptr, cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 2i32), msk));
            store(unp_ptr.add(1usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 4i32), msk));
            store(unp_ptr.add(2usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 6i32), msk));
            store(unp_ptr.add(3usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 8i32), msk));
            store(unp_ptr.add(4usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 10i32), msk));
            store(unp_ptr.add(5usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 12i32), msk));
            store(unp_ptr.add(6usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 14i32), msk));
            store(unp_ptr.add(7usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 16i32), msk));
            store(unp_ptr.add(8usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 18i32), msk));
            store(unp_ptr.add(9usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 20i32), msk));
            store(unp_ptr.add(10usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 22i32), msk));
            store(unp_ptr.add(11usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 24i32), msk));
            store(unp_ptr.add(12usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 26i32), msk));
            store(unp_ptr.add(13usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 28i32), msk));
            store(unp_ptr.add(14usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 30i32), msk));
            store(unp_ptr.add(15usize), cur);
            prv = cur;
            smd_pck = load(pck_ptr.add(1usize));
            cur = add(prv, and(smd_pck, msk));
            store(unp_ptr.add(16usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 2i32), msk));
            store(unp_ptr.add(17usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 4i32), msk));
            store(unp_ptr.add(18usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 6i32), msk));
            store(unp_ptr.add(19usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 8i32), msk));
            store(unp_ptr.add(20usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 10i32), msk));
            store(unp_ptr.add(21usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 12i32), msk));
            store(unp_ptr.add(22usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 14i32), msk));
            store(unp_ptr.add(23usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 16i32), msk));
            store(unp_ptr.add(24usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 18i32), msk));
            store(unp_ptr.add(25usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 20i32), msk));
            store(unp_ptr.add(26usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 22i32), msk));
            store(unp_ptr.add(27usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 24i32), msk));
            store(unp_ptr.add(28usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 26i32), msk));
            store(unp_ptr.add(29usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 28i32), msk));
            store(unp_ptr.add(30usize), cur);
            prv = cur;
            store(
                unp_ptr.add(31usize),
                add(prv, and(rht(smd_pck, 30i32), msk)),
            );
        }
        3u8 => {
            let msk = set1(((1u32 << 3u32) - 1u32) as i32);
            let mut smd_pck = load(pck_ptr);
            let mut prv = set1(fst as i32);
            let mut cur = add(prv, and(smd_pck, msk));
            store(unp_ptr, cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 3i32), msk));
            store(unp_ptr.add(1usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 6i32), msk));
            store(unp_ptr.add(2usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 9i32), msk));
            store(unp_ptr.add(3usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 12i32), msk));
            store(unp_ptr.add(4usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 15i32), msk));
            store(unp_ptr.add(5usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 18i32), msk));
            store(unp_ptr.add(6usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 21i32), msk));
            store(unp_ptr.add(7usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 24i32), msk));
            store(unp_ptr.add(8usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 27i32), msk));
            store(unp_ptr.add(9usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 30i32), msk);
            smd_pck = load(pck_ptr.add(1usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 2i32), msk)));
            store(unp_ptr.add(10usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 1i32), msk));
            store(unp_ptr.add(11usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 4i32), msk));
            store(unp_ptr.add(12usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 7i32), msk));
            store(unp_ptr.add(13usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 10i32), msk));
            store(unp_ptr.add(14usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 13i32), msk));
            store(unp_ptr.add(15usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 16i32), msk));
            store(unp_ptr.add(16usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 19i32), msk));
            store(unp_ptr.add(17usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 22i32), msk));
            store(unp_ptr.add(18usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 25i32), msk));
            store(unp_ptr.add(19usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 28i32), msk));
            store(unp_ptr.add(20usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 31i32), msk);
            smd_pck = load(pck_ptr.add(2usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 1i32), msk)));
            store(unp_ptr.add(21usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 2i32), msk));
            store(unp_ptr.add(22usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 5i32), msk));
            store(unp_ptr.add(23usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 8i32), msk));
            store(unp_ptr.add(24usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 11i32), msk));
            store(unp_ptr.add(25usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 14i32), msk));
            store(unp_ptr.add(26usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 17i32), msk));
            store(unp_ptr.add(27usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 20i32), msk));
            store(unp_ptr.add(28usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 23i32), msk));
            store(unp_ptr.add(29usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 26i32), msk));
            store(unp_ptr.add(30usize), cur);
            prv = cur;
            store(
                unp_ptr.add(31usize),
                add(prv, and(rht(smd_pck, 29i32), msk)),
            );
        }
        4u8 => {
            let msk = set1(((1u32 << 4u32) - 1u32) as i32);
            let mut smd_pck = load(pck_ptr);
            let mut prv = set1(fst as i32);
            let mut cur = add(prv, and(smd_pck, msk));
            store(unp_ptr, cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 4i32), msk));
            store(unp_ptr.add(1usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 8i32), msk));
            store(unp_ptr.add(2usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 12i32), msk));
            store(unp_ptr.add(3usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 16i32), msk));
            store(unp_ptr.add(4usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 20i32), msk));
            store(unp_ptr.add(5usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 24i32), msk));
            store(unp_ptr.add(6usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 28i32), msk));
            store(unp_ptr.add(7usize), cur);
            prv = cur;
            smd_pck = load(pck_ptr.add(1usize));
            cur = add(prv, and(smd_pck, msk));
            store(unp_ptr.add(8usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 4i32), msk));
            store(unp_ptr.add(9usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 8i32), msk));
            store(unp_ptr.add(10usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 12i32), msk));
            store(unp_ptr.add(11usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 16i32), msk));
            store(unp_ptr.add(12usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 20i32), msk));
            store(unp_ptr.add(13usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 24i32), msk));
            store(unp_ptr.add(14usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 28i32), msk));
            store(unp_ptr.add(15usize), cur);
            prv = cur;
            smd_pck = load(pck_ptr.add(2usize));
            cur = add(prv, and(smd_pck, msk));
            store(unp_ptr.add(16usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 4i32), msk));
            store(unp_ptr.add(17usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 8i32), msk));
            store(unp_ptr.add(18usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 12i32), msk));
            store(unp_ptr.add(19usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 16i32), msk));
            store(unp_ptr.add(20usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 20i32), msk));
            store(unp_ptr.add(21usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 24i32), msk));
            store(unp_ptr.add(22usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 28i32), msk));
            store(unp_ptr.add(23usize), cur);
            prv = cur;
            smd_pck = load(pck_ptr.add(3usize));
            cur = add(prv, and(smd_pck, msk));
            store(unp_ptr.add(24usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 4i32), msk));
            store(unp_ptr.add(25usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 8i32), msk));
            store(unp_ptr.add(26usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 12i32), msk));
            store(unp_ptr.add(27usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 16i32), msk));
            store(unp_ptr.add(28usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 20i32), msk));
            store(unp_ptr.add(29usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 24i32), msk));
            store(unp_ptr.add(30usize), cur);
            prv = cur;
            store(
                unp_ptr.add(31usize),
                add(prv, and(rht(smd_pck, 28i32), msk)),
            );
        }
        5u8 => {
            let msk = set1(((1u32 << 5u32) - 1u32) as i32);
            let mut smd_pck = load(pck_ptr);
            let mut prv = set1(fst as i32);
            let mut cur = add(prv, and(smd_pck, msk));
            store(unp_ptr, cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 5i32), msk));
            store(unp_ptr.add(1usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 10i32), msk));
            store(unp_ptr.add(2usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 15i32), msk));
            store(unp_ptr.add(3usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 20i32), msk));
            store(unp_ptr.add(4usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 25i32), msk));
            store(unp_ptr.add(5usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 30i32), msk);
            smd_pck = load(pck_ptr.add(1usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 2i32), msk)));
            store(unp_ptr.add(6usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 3i32), msk));
            store(unp_ptr.add(7usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 8i32), msk));
            store(unp_ptr.add(8usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 13i32), msk));
            store(unp_ptr.add(9usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 18i32), msk));
            store(unp_ptr.add(10usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 23i32), msk));
            store(unp_ptr.add(11usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 28i32), msk);
            smd_pck = load(pck_ptr.add(2usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 4i32), msk)));
            store(unp_ptr.add(12usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 1i32), msk));
            store(unp_ptr.add(13usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 6i32), msk));
            store(unp_ptr.add(14usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 11i32), msk));
            store(unp_ptr.add(15usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 16i32), msk));
            store(unp_ptr.add(16usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 21i32), msk));
            store(unp_ptr.add(17usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 26i32), msk));
            store(unp_ptr.add(18usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 31i32), msk);
            smd_pck = load(pck_ptr.add(3usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 1i32), msk)));
            store(unp_ptr.add(19usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 4i32), msk));
            store(unp_ptr.add(20usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 9i32), msk));
            store(unp_ptr.add(21usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 14i32), msk));
            store(unp_ptr.add(22usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 19i32), msk));
            store(unp_ptr.add(23usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 24i32), msk));
            store(unp_ptr.add(24usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 29i32), msk);
            smd_pck = load(pck_ptr.add(4usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 3i32), msk)));
            store(unp_ptr.add(25usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 2i32), msk));
            store(unp_ptr.add(26usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 7i32), msk));
            store(unp_ptr.add(27usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 12i32), msk));
            store(unp_ptr.add(28usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 17i32), msk));
            store(unp_ptr.add(29usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 22i32), msk));
            store(unp_ptr.add(30usize), cur);
            prv = cur;
            store(
                unp_ptr.add(31usize),
                add(prv, and(rht(smd_pck, 27i32), msk)),
            );
        }
        6u8 => {
            let msk = set1(((1u32 << 6u32) - 1u32) as i32);
            let mut smd_pck = load(pck_ptr);
            let mut prv = set1(fst as i32);
            let mut cur = add(prv, and(smd_pck, msk));
            store(unp_ptr, cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 6i32), msk));
            store(unp_ptr.add(1usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 12i32), msk));
            store(unp_ptr.add(2usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 18i32), msk));
            store(unp_ptr.add(3usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 24i32), msk));
            store(unp_ptr.add(4usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 30i32), msk);
            smd_pck = load(pck_ptr.add(1usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 2i32), msk)));
            store(unp_ptr.add(5usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 4i32), msk));
            store(unp_ptr.add(6usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 10i32), msk));
            store(unp_ptr.add(7usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 16i32), msk));
            store(unp_ptr.add(8usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 22i32), msk));
            store(unp_ptr.add(9usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 28i32), msk);
            smd_pck = load(pck_ptr.add(2usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 4i32), msk)));
            store(unp_ptr.add(10usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 2i32), msk));
            store(unp_ptr.add(11usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 8i32), msk));
            store(unp_ptr.add(12usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 14i32), msk));
            store(unp_ptr.add(13usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 20i32), msk));
            store(unp_ptr.add(14usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 26i32), msk));
            store(unp_ptr.add(15usize), cur);
            prv = cur;
            smd_pck = load(pck_ptr.add(3usize));
            cur = add(prv, and(smd_pck, msk));
            store(unp_ptr.add(16usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 6i32), msk));
            store(unp_ptr.add(17usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 12i32), msk));
            store(unp_ptr.add(18usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 18i32), msk));
            store(unp_ptr.add(19usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 24i32), msk));
            store(unp_ptr.add(20usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 30i32), msk);
            smd_pck = load(pck_ptr.add(4usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 2i32), msk)));
            store(unp_ptr.add(21usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 4i32), msk));
            store(unp_ptr.add(22usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 10i32), msk));
            store(unp_ptr.add(23usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 16i32), msk));
            store(unp_ptr.add(24usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 22i32), msk));
            store(unp_ptr.add(25usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 28i32), msk);
            smd_pck = load(pck_ptr.add(5usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 4i32), msk)));
            store(unp_ptr.add(26usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 2i32), msk));
            store(unp_ptr.add(27usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 8i32), msk));
            store(unp_ptr.add(28usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 14i32), msk));
            store(unp_ptr.add(29usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 20i32), msk));
            store(unp_ptr.add(30usize), cur);
            prv = cur;
            store(
                unp_ptr.add(31usize),
                add(prv, and(rht(smd_pck, 26i32), msk)),
            );
        }
        7u8 => {
            let msk = set1(((1u32 << 7u32) - 1u32) as i32);
            let mut smd_pck = load(pck_ptr);
            let mut prv = set1(fst as i32);
            let mut cur = add(prv, and(smd_pck, msk));
            store(unp_ptr, cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 7i32), msk));
            store(unp_ptr.add(1usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 14i32), msk));
            store(unp_ptr.add(2usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 21i32), msk));
            store(unp_ptr.add(3usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 28i32), msk);
            smd_pck = load(pck_ptr.add(1usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 4i32), msk)));
            store(unp_ptr.add(4usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 3i32), msk));
            store(unp_ptr.add(5usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 10i32), msk));
            store(unp_ptr.add(6usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 17i32), msk));
            store(unp_ptr.add(7usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 24i32), msk));
            store(unp_ptr.add(8usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 31i32), msk);
            smd_pck = load(pck_ptr.add(2usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 1i32), msk)));
            store(unp_ptr.add(9usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 6i32), msk));
            store(unp_ptr.add(10usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 13i32), msk));
            store(unp_ptr.add(11usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 20i32), msk));
            store(unp_ptr.add(12usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 27i32), msk);
            smd_pck = load(pck_ptr.add(3usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 5i32), msk)));
            store(unp_ptr.add(13usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 2i32), msk));
            store(unp_ptr.add(14usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 9i32), msk));
            store(unp_ptr.add(15usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 16i32), msk));
            store(unp_ptr.add(16usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 23i32), msk));
            store(unp_ptr.add(17usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 30i32), msk);
            smd_pck = load(pck_ptr.add(4usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 2i32), msk)));
            store(unp_ptr.add(18usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 5i32), msk));
            store(unp_ptr.add(19usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 12i32), msk));
            store(unp_ptr.add(20usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 19i32), msk));
            store(unp_ptr.add(21usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 26i32), msk);
            smd_pck = load(pck_ptr.add(5usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 6i32), msk)));
            store(unp_ptr.add(22usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 1i32), msk));
            store(unp_ptr.add(23usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 8i32), msk));
            store(unp_ptr.add(24usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 15i32), msk));
            store(unp_ptr.add(25usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 22i32), msk));
            store(unp_ptr.add(26usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 29i32), msk);
            smd_pck = load(pck_ptr.add(6usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 3i32), msk)));
            store(unp_ptr.add(27usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 4i32), msk));
            store(unp_ptr.add(28usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 11i32), msk));
            store(unp_ptr.add(29usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 18i32), msk));
            store(unp_ptr.add(30usize), cur);
            prv = cur;
            store(
                unp_ptr.add(31usize),
                add(prv, and(rht(smd_pck, 25i32), msk)),
            );
        }
        8u8 => {
            let msk = set1(((1u32 << 8u32) - 1u32) as i32);
            let mut smd_pck = load(pck_ptr);
            let mut prv = set1(fst as i32);
            let mut cur = add(prv, and(smd_pck, msk));
            store(unp_ptr, cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 8i32), msk));
            store(unp_ptr.add(1usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 16i32), msk));
            store(unp_ptr.add(2usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 24i32), msk));
            store(unp_ptr.add(3usize), cur);
            prv = cur;
            smd_pck = load(pck_ptr.add(1usize));
            cur = add(prv, and(smd_pck, msk));
            store(unp_ptr.add(4usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 8i32), msk));
            store(unp_ptr.add(5usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 16i32), msk));
            store(unp_ptr.add(6usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 24i32), msk));
            store(unp_ptr.add(7usize), cur);
            prv = cur;
            smd_pck = load(pck_ptr.add(2usize));
            cur = add(prv, and(smd_pck, msk));
            store(unp_ptr.add(8usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 8i32), msk));
            store(unp_ptr.add(9usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 16i32), msk));
            store(unp_ptr.add(10usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 24i32), msk));
            store(unp_ptr.add(11usize), cur);
            prv = cur;
            smd_pck = load(pck_ptr.add(3usize));
            cur = add(prv, and(smd_pck, msk));
            store(unp_ptr.add(12usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 8i32), msk));
            store(unp_ptr.add(13usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 16i32), msk));
            store(unp_ptr.add(14usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 24i32), msk));
            store(unp_ptr.add(15usize), cur);
            prv = cur;
            smd_pck = load(pck_ptr.add(4usize));
            cur = add(prv, and(smd_pck, msk));
            store(unp_ptr.add(16usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 8i32), msk));
            store(unp_ptr.add(17usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 16i32), msk));
            store(unp_ptr.add(18usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 24i32), msk));
            store(unp_ptr.add(19usize), cur);
            prv = cur;
            smd_pck = load(pck_ptr.add(5usize));
            cur = add(prv, and(smd_pck, msk));
            store(unp_ptr.add(20usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 8i32), msk));
            store(unp_ptr.add(21usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 16i32), msk));
            store(unp_ptr.add(22usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 24i32), msk));
            store(unp_ptr.add(23usize), cur);
            prv = cur;
            smd_pck = load(pck_ptr.add(6usize));
            cur = add(prv, and(smd_pck, msk));
            store(unp_ptr.add(24usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 8i32), msk));
            store(unp_ptr.add(25usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 16i32), msk));
            store(unp_ptr.add(26usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 24i32), msk));
            store(unp_ptr.add(27usize), cur);
            prv = cur;
            smd_pck = load(pck_ptr.add(7usize));
            cur = add(prv, and(smd_pck, msk));
            store(unp_ptr.add(28usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 8i32), msk));
            store(unp_ptr.add(29usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 16i32), msk));
            store(unp_ptr.add(30usize), cur);
            prv = cur;
            store(
                unp_ptr.add(31usize),
                add(prv, and(rht(smd_pck, 24i32), msk)),
            );
        }
        9u8 => {
            let msk = set1(((1u32 << 9u32) - 1u32) as i32);
            let mut smd_pck = load(pck_ptr);
            let mut prv = set1(fst as i32);
            let mut cur = add(prv, and(smd_pck, msk));
            store(unp_ptr, cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 9i32), msk));
            store(unp_ptr.add(1usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 18i32), msk));
            store(unp_ptr.add(2usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 27i32), msk);
            smd_pck = load(pck_ptr.add(1usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 5i32), msk)));
            store(unp_ptr.add(3usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 4i32), msk));
            store(unp_ptr.add(4usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 13i32), msk));
            store(unp_ptr.add(5usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 22i32), msk));
            store(unp_ptr.add(6usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 31i32), msk);
            smd_pck = load(pck_ptr.add(2usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 1i32), msk)));
            store(unp_ptr.add(7usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 8i32), msk));
            store(unp_ptr.add(8usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 17i32), msk));
            store(unp_ptr.add(9usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 26i32), msk);
            smd_pck = load(pck_ptr.add(3usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 6i32), msk)));
            store(unp_ptr.add(10usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 3i32), msk));
            store(unp_ptr.add(11usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 12i32), msk));
            store(unp_ptr.add(12usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 21i32), msk));
            store(unp_ptr.add(13usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 30i32), msk);
            smd_pck = load(pck_ptr.add(4usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 2i32), msk)));
            store(unp_ptr.add(14usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 7i32), msk));
            store(unp_ptr.add(15usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 16i32), msk));
            store(unp_ptr.add(16usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 25i32), msk);
            smd_pck = load(pck_ptr.add(5usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 7i32), msk)));
            store(unp_ptr.add(17usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 2i32), msk));
            store(unp_ptr.add(18usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 11i32), msk));
            store(unp_ptr.add(19usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 20i32), msk));
            store(unp_ptr.add(20usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 29i32), msk);
            smd_pck = load(pck_ptr.add(6usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 3i32), msk)));
            store(unp_ptr.add(21usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 6i32), msk));
            store(unp_ptr.add(22usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 15i32), msk));
            store(unp_ptr.add(23usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 24i32), msk);
            smd_pck = load(pck_ptr.add(7usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 8i32), msk)));
            store(unp_ptr.add(24usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 1i32), msk));
            store(unp_ptr.add(25usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 10i32), msk));
            store(unp_ptr.add(26usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 19i32), msk));
            store(unp_ptr.add(27usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 28i32), msk);
            smd_pck = load(pck_ptr.add(8usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 4i32), msk)));
            store(unp_ptr.add(28usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 5i32), msk));
            store(unp_ptr.add(29usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 14i32), msk));
            store(unp_ptr.add(30usize), cur);
            prv = cur;
            store(
                unp_ptr.add(31usize),
                add(prv, and(rht(smd_pck, 23i32), msk)),
            );
        }
        10u8 => {
            let msk = set1(((1u32 << 10u32) - 1u32) as i32);
            let mut smd_pck = load(pck_ptr);
            let mut prv = set1(fst as i32);
            let mut cur = add(prv, and(smd_pck, msk));
            store(unp_ptr, cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 10i32), msk));
            store(unp_ptr.add(1usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 20i32), msk));
            store(unp_ptr.add(2usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 30i32), msk);
            smd_pck = load(pck_ptr.add(1usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 2i32), msk)));
            store(unp_ptr.add(3usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 8i32), msk));
            store(unp_ptr.add(4usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 18i32), msk));
            store(unp_ptr.add(5usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 28i32), msk);
            smd_pck = load(pck_ptr.add(2usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 4i32), msk)));
            store(unp_ptr.add(6usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 6i32), msk));
            store(unp_ptr.add(7usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 16i32), msk));
            store(unp_ptr.add(8usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 26i32), msk);
            smd_pck = load(pck_ptr.add(3usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 6i32), msk)));
            store(unp_ptr.add(9usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 4i32), msk));
            store(unp_ptr.add(10usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 14i32), msk));
            store(unp_ptr.add(11usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 24i32), msk);
            smd_pck = load(pck_ptr.add(4usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 8i32), msk)));
            store(unp_ptr.add(12usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 2i32), msk));
            store(unp_ptr.add(13usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 12i32), msk));
            store(unp_ptr.add(14usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 22i32), msk));
            store(unp_ptr.add(15usize), cur);
            prv = cur;
            smd_pck = load(pck_ptr.add(5usize));
            cur = add(prv, and(smd_pck, msk));
            store(unp_ptr.add(16usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 10i32), msk));
            store(unp_ptr.add(17usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 20i32), msk));
            store(unp_ptr.add(18usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 30i32), msk);
            smd_pck = load(pck_ptr.add(6usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 2i32), msk)));
            store(unp_ptr.add(19usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 8i32), msk));
            store(unp_ptr.add(20usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 18i32), msk));
            store(unp_ptr.add(21usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 28i32), msk);
            smd_pck = load(pck_ptr.add(7usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 4i32), msk)));
            store(unp_ptr.add(22usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 6i32), msk));
            store(unp_ptr.add(23usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 16i32), msk));
            store(unp_ptr.add(24usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 26i32), msk);
            smd_pck = load(pck_ptr.add(8usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 6i32), msk)));
            store(unp_ptr.add(25usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 4i32), msk));
            store(unp_ptr.add(26usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 14i32), msk));
            store(unp_ptr.add(27usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 24i32), msk);
            smd_pck = load(pck_ptr.add(9usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 8i32), msk)));
            store(unp_ptr.add(28usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 2i32), msk));
            store(unp_ptr.add(29usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 12i32), msk));
            store(unp_ptr.add(30usize), cur);
            prv = cur;
            store(
                unp_ptr.add(31usize),
                add(prv, and(rht(smd_pck, 22i32), msk)),
            );
        }
        11u8 => {
            let msk = set1(((1u32 << 11u32) - 1u32) as i32);
            let mut smd_pck = load(pck_ptr);
            let mut prv = set1(fst as i32);
            let mut cur = add(prv, and(smd_pck, msk));
            store(unp_ptr, cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 11i32), msk));
            store(unp_ptr.add(1usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 22i32), msk);
            smd_pck = load(pck_ptr.add(1usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 10i32), msk)));
            store(unp_ptr.add(2usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 1i32), msk));
            store(unp_ptr.add(3usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 12i32), msk));
            store(unp_ptr.add(4usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 23i32), msk);
            smd_pck = load(pck_ptr.add(2usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 9i32), msk)));
            store(unp_ptr.add(5usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 2i32), msk));
            store(unp_ptr.add(6usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 13i32), msk));
            store(unp_ptr.add(7usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 24i32), msk);
            smd_pck = load(pck_ptr.add(3usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 8i32), msk)));
            store(unp_ptr.add(8usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 3i32), msk));
            store(unp_ptr.add(9usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 14i32), msk));
            store(unp_ptr.add(10usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 25i32), msk);
            smd_pck = load(pck_ptr.add(4usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 7i32), msk)));
            store(unp_ptr.add(11usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 4i32), msk));
            store(unp_ptr.add(12usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 15i32), msk));
            store(unp_ptr.add(13usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 26i32), msk);
            smd_pck = load(pck_ptr.add(5usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 6i32), msk)));
            store(unp_ptr.add(14usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 5i32), msk));
            store(unp_ptr.add(15usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 16i32), msk));
            store(unp_ptr.add(16usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 27i32), msk);
            smd_pck = load(pck_ptr.add(6usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 5i32), msk)));
            store(unp_ptr.add(17usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 6i32), msk));
            store(unp_ptr.add(18usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 17i32), msk));
            store(unp_ptr.add(19usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 28i32), msk);
            smd_pck = load(pck_ptr.add(7usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 4i32), msk)));
            store(unp_ptr.add(20usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 7i32), msk));
            store(unp_ptr.add(21usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 18i32), msk));
            store(unp_ptr.add(22usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 29i32), msk);
            smd_pck = load(pck_ptr.add(8usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 3i32), msk)));
            store(unp_ptr.add(23usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 8i32), msk));
            store(unp_ptr.add(24usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 19i32), msk));
            store(unp_ptr.add(25usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 30i32), msk);
            smd_pck = load(pck_ptr.add(9usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 2i32), msk)));
            store(unp_ptr.add(26usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 9i32), msk));
            store(unp_ptr.add(27usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 20i32), msk));
            store(unp_ptr.add(28usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 31i32), msk);
            smd_pck = load(pck_ptr.add(10usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 1i32), msk)));
            store(unp_ptr.add(29usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 10i32), msk));
            store(unp_ptr.add(30usize), cur);
            prv = cur;
            store(
                unp_ptr.add(31usize),
                add(prv, and(rht(smd_pck, 21i32), msk)),
            );
        }
        12u8 => {
            let msk = set1(((1u32 << 12u32) - 1u32) as i32);
            let mut smd_pck = load(pck_ptr);
            let mut prv = set1(fst as i32);
            let mut cur = add(prv, and(smd_pck, msk));
            store(unp_ptr, cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 12i32), msk));
            store(unp_ptr.add(1usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 24i32), msk);
            smd_pck = load(pck_ptr.add(1usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 8i32), msk)));
            store(unp_ptr.add(2usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 4i32), msk));
            store(unp_ptr.add(3usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 16i32), msk));
            store(unp_ptr.add(4usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 28i32), msk);
            smd_pck = load(pck_ptr.add(2usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 4i32), msk)));
            store(unp_ptr.add(5usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 8i32), msk));
            store(unp_ptr.add(6usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 20i32), msk));
            store(unp_ptr.add(7usize), cur);
            prv = cur;
            smd_pck = load(pck_ptr.add(3usize));
            cur = add(prv, and(smd_pck, msk));
            store(unp_ptr.add(8usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 12i32), msk));
            store(unp_ptr.add(9usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 24i32), msk);
            smd_pck = load(pck_ptr.add(4usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 8i32), msk)));
            store(unp_ptr.add(10usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 4i32), msk));
            store(unp_ptr.add(11usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 16i32), msk));
            store(unp_ptr.add(12usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 28i32), msk);
            smd_pck = load(pck_ptr.add(5usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 4i32), msk)));
            store(unp_ptr.add(13usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 8i32), msk));
            store(unp_ptr.add(14usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 20i32), msk));
            store(unp_ptr.add(15usize), cur);
            prv = cur;
            smd_pck = load(pck_ptr.add(6usize));
            cur = add(prv, and(smd_pck, msk));
            store(unp_ptr.add(16usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 12i32), msk));
            store(unp_ptr.add(17usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 24i32), msk);
            smd_pck = load(pck_ptr.add(7usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 8i32), msk)));
            store(unp_ptr.add(18usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 4i32), msk));
            store(unp_ptr.add(19usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 16i32), msk));
            store(unp_ptr.add(20usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 28i32), msk);
            smd_pck = load(pck_ptr.add(8usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 4i32), msk)));
            store(unp_ptr.add(21usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 8i32), msk));
            store(unp_ptr.add(22usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 20i32), msk));
            store(unp_ptr.add(23usize), cur);
            prv = cur;
            smd_pck = load(pck_ptr.add(9usize));
            cur = add(prv, and(smd_pck, msk));
            store(unp_ptr.add(24usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 12i32), msk));
            store(unp_ptr.add(25usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 24i32), msk);
            smd_pck = load(pck_ptr.add(10usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 8i32), msk)));
            store(unp_ptr.add(26usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 4i32), msk));
            store(unp_ptr.add(27usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 16i32), msk));
            store(unp_ptr.add(28usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 28i32), msk);
            smd_pck = load(pck_ptr.add(11usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 4i32), msk)));
            store(unp_ptr.add(29usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 8i32), msk));
            store(unp_ptr.add(30usize), cur);
            prv = cur;
            store(
                unp_ptr.add(31usize),
                add(prv, and(rht(smd_pck, 20i32), msk)),
            );
        }
        13u8 => {
            let msk = set1(((1u32 << 13u32) - 1u32) as i32);
            let mut smd_pck = load(pck_ptr);
            let mut prv = set1(fst as i32);
            let mut cur = add(prv, and(smd_pck, msk));
            store(unp_ptr, cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 13i32), msk));
            store(unp_ptr.add(1usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 26i32), msk);
            smd_pck = load(pck_ptr.add(1usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 6i32), msk)));
            store(unp_ptr.add(2usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 7i32), msk));
            store(unp_ptr.add(3usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 20i32), msk);
            smd_pck = load(pck_ptr.add(2usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 12i32), msk)));
            store(unp_ptr.add(4usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 1i32), msk));
            store(unp_ptr.add(5usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 14i32), msk));
            store(unp_ptr.add(6usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 27i32), msk);
            smd_pck = load(pck_ptr.add(3usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 5i32), msk)));
            store(unp_ptr.add(7usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 8i32), msk));
            store(unp_ptr.add(8usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 21i32), msk);
            smd_pck = load(pck_ptr.add(4usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 11i32), msk)));
            store(unp_ptr.add(9usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 2i32), msk));
            store(unp_ptr.add(10usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 15i32), msk));
            store(unp_ptr.add(11usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 28i32), msk);
            smd_pck = load(pck_ptr.add(5usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 4i32), msk)));
            store(unp_ptr.add(12usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 9i32), msk));
            store(unp_ptr.add(13usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 22i32), msk);
            smd_pck = load(pck_ptr.add(6usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 10i32), msk)));
            store(unp_ptr.add(14usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 3i32), msk));
            store(unp_ptr.add(15usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 16i32), msk));
            store(unp_ptr.add(16usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 29i32), msk);
            smd_pck = load(pck_ptr.add(7usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 3i32), msk)));
            store(unp_ptr.add(17usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 10i32), msk));
            store(unp_ptr.add(18usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 23i32), msk);
            smd_pck = load(pck_ptr.add(8usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 9i32), msk)));
            store(unp_ptr.add(19usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 4i32), msk));
            store(unp_ptr.add(20usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 17i32), msk));
            store(unp_ptr.add(21usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 30i32), msk);
            smd_pck = load(pck_ptr.add(9usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 2i32), msk)));
            store(unp_ptr.add(22usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 11i32), msk));
            store(unp_ptr.add(23usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 24i32), msk);
            smd_pck = load(pck_ptr.add(10usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 8i32), msk)));
            store(unp_ptr.add(24usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 5i32), msk));
            store(unp_ptr.add(25usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 18i32), msk));
            store(unp_ptr.add(26usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 31i32), msk);
            smd_pck = load(pck_ptr.add(11usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 1i32), msk)));
            store(unp_ptr.add(27usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 12i32), msk));
            store(unp_ptr.add(28usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 25i32), msk);
            smd_pck = load(pck_ptr.add(12usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 7i32), msk)));
            store(unp_ptr.add(29usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 6i32), msk));
            store(unp_ptr.add(30usize), cur);
            prv = cur;
            store(
                unp_ptr.add(31usize),
                add(prv, and(rht(smd_pck, 19i32), msk)),
            );
        }
        14u8 => {
            let msk = set1(((1u32 << 14u32) - 1u32) as i32);
            let mut smd_pck = load(pck_ptr);
            let mut prv = set1(fst as i32);
            let mut cur = add(prv, and(smd_pck, msk));
            store(unp_ptr, cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 14i32), msk));
            store(unp_ptr.add(1usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 28i32), msk);
            smd_pck = load(pck_ptr.add(1usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 4i32), msk)));
            store(unp_ptr.add(2usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 10i32), msk));
            store(unp_ptr.add(3usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 24i32), msk);
            smd_pck = load(pck_ptr.add(2usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 8i32), msk)));
            store(unp_ptr.add(4usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 6i32), msk));
            store(unp_ptr.add(5usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 20i32), msk);
            smd_pck = load(pck_ptr.add(3usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 12i32), msk)));
            store(unp_ptr.add(6usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 2i32), msk));
            store(unp_ptr.add(7usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 16i32), msk));
            store(unp_ptr.add(8usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 30i32), msk);
            smd_pck = load(pck_ptr.add(4usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 2i32), msk)));
            store(unp_ptr.add(9usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 12i32), msk));
            store(unp_ptr.add(10usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 26i32), msk);
            smd_pck = load(pck_ptr.add(5usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 6i32), msk)));
            store(unp_ptr.add(11usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 8i32), msk));
            store(unp_ptr.add(12usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 22i32), msk);
            smd_pck = load(pck_ptr.add(6usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 10i32), msk)));
            store(unp_ptr.add(13usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 4i32), msk));
            store(unp_ptr.add(14usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 18i32), msk));
            store(unp_ptr.add(15usize), cur);
            prv = cur;
            smd_pck = load(pck_ptr.add(7usize));
            cur = add(prv, and(smd_pck, msk));
            store(unp_ptr.add(16usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 14i32), msk));
            store(unp_ptr.add(17usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 28i32), msk);
            smd_pck = load(pck_ptr.add(8usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 4i32), msk)));
            store(unp_ptr.add(18usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 10i32), msk));
            store(unp_ptr.add(19usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 24i32), msk);
            smd_pck = load(pck_ptr.add(9usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 8i32), msk)));
            store(unp_ptr.add(20usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 6i32), msk));
            store(unp_ptr.add(21usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 20i32), msk);
            smd_pck = load(pck_ptr.add(10usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 12i32), msk)));
            store(unp_ptr.add(22usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 2i32), msk));
            store(unp_ptr.add(23usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 16i32), msk));
            store(unp_ptr.add(24usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 30i32), msk);
            smd_pck = load(pck_ptr.add(11usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 2i32), msk)));
            store(unp_ptr.add(25usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 12i32), msk));
            store(unp_ptr.add(26usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 26i32), msk);
            smd_pck = load(pck_ptr.add(12usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 6i32), msk)));
            store(unp_ptr.add(27usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 8i32), msk));
            store(unp_ptr.add(28usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 22i32), msk);
            smd_pck = load(pck_ptr.add(13usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 10i32), msk)));
            store(unp_ptr.add(29usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 4i32), msk));
            store(unp_ptr.add(30usize), cur);
            prv = cur;
            store(
                unp_ptr.add(31usize),
                add(prv, and(rht(smd_pck, 18i32), msk)),
            );
        }
        15u8 => {
            let msk = set1(((1u32 << 15u32) - 1u32) as i32);
            let mut smd_pck = load(pck_ptr);
            let mut prv = set1(fst as i32);
            let mut cur = add(prv, and(smd_pck, msk));
            store(unp_ptr, cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 15i32), msk));
            store(unp_ptr.add(1usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 30i32), msk);
            smd_pck = load(pck_ptr.add(1usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 2i32), msk)));
            store(unp_ptr.add(2usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 13i32), msk));
            store(unp_ptr.add(3usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 28i32), msk);
            smd_pck = load(pck_ptr.add(2usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 4i32), msk)));
            store(unp_ptr.add(4usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 11i32), msk));
            store(unp_ptr.add(5usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 26i32), msk);
            smd_pck = load(pck_ptr.add(3usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 6i32), msk)));
            store(unp_ptr.add(6usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 9i32), msk));
            store(unp_ptr.add(7usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 24i32), msk);
            smd_pck = load(pck_ptr.add(4usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 8i32), msk)));
            store(unp_ptr.add(8usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 7i32), msk));
            store(unp_ptr.add(9usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 22i32), msk);
            smd_pck = load(pck_ptr.add(5usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 10i32), msk)));
            store(unp_ptr.add(10usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 5i32), msk));
            store(unp_ptr.add(11usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 20i32), msk);
            smd_pck = load(pck_ptr.add(6usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 12i32), msk)));
            store(unp_ptr.add(12usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 3i32), msk));
            store(unp_ptr.add(13usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 18i32), msk);
            smd_pck = load(pck_ptr.add(7usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 14i32), msk)));
            store(unp_ptr.add(14usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 1i32), msk));
            store(unp_ptr.add(15usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 16i32), msk));
            store(unp_ptr.add(16usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 31i32), msk);
            smd_pck = load(pck_ptr.add(8usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 1i32), msk)));
            store(unp_ptr.add(17usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 14i32), msk));
            store(unp_ptr.add(18usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 29i32), msk);
            smd_pck = load(pck_ptr.add(9usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 3i32), msk)));
            store(unp_ptr.add(19usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 12i32), msk));
            store(unp_ptr.add(20usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 27i32), msk);
            smd_pck = load(pck_ptr.add(10usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 5i32), msk)));
            store(unp_ptr.add(21usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 10i32), msk));
            store(unp_ptr.add(22usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 25i32), msk);
            smd_pck = load(pck_ptr.add(11usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 7i32), msk)));
            store(unp_ptr.add(23usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 8i32), msk));
            store(unp_ptr.add(24usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 23i32), msk);
            smd_pck = load(pck_ptr.add(12usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 9i32), msk)));
            store(unp_ptr.add(25usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 6i32), msk));
            store(unp_ptr.add(26usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 21i32), msk);
            smd_pck = load(pck_ptr.add(13usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 11i32), msk)));
            store(unp_ptr.add(27usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 4i32), msk));
            store(unp_ptr.add(28usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 19i32), msk);
            smd_pck = load(pck_ptr.add(14usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 13i32), msk)));
            store(unp_ptr.add(29usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 2i32), msk));
            store(unp_ptr.add(30usize), cur);
            prv = cur;
            store(
                unp_ptr.add(31usize),
                add(prv, and(rht(smd_pck, 17i32), msk)),
            );
        }
        16u8 => {
            let msk = set1(((1u32 << 16u32) - 1u32) as i32);
            let mut smd_pck = load(pck_ptr);
            let mut prv = set1(fst as i32);
            let mut cur = add(prv, and(smd_pck, msk));
            store(unp_ptr, cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 16i32), msk));
            store(unp_ptr.add(1usize), cur);
            prv = cur;
            smd_pck = load(pck_ptr.add(1usize));
            cur = add(prv, and(smd_pck, msk));
            store(unp_ptr.add(2usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 16i32), msk));
            store(unp_ptr.add(3usize), cur);
            prv = cur;
            smd_pck = load(pck_ptr.add(2usize));
            cur = add(prv, and(smd_pck, msk));
            store(unp_ptr.add(4usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 16i32), msk));
            store(unp_ptr.add(5usize), cur);
            prv = cur;
            smd_pck = load(pck_ptr.add(3usize));
            cur = add(prv, and(smd_pck, msk));
            store(unp_ptr.add(6usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 16i32), msk));
            store(unp_ptr.add(7usize), cur);
            prv = cur;
            smd_pck = load(pck_ptr.add(4usize));
            cur = add(prv, and(smd_pck, msk));
            store(unp_ptr.add(8usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 16i32), msk));
            store(unp_ptr.add(9usize), cur);
            prv = cur;
            smd_pck = load(pck_ptr.add(5usize));
            cur = add(prv, and(smd_pck, msk));
            store(unp_ptr.add(10usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 16i32), msk));
            store(unp_ptr.add(11usize), cur);
            prv = cur;
            smd_pck = load(pck_ptr.add(6usize));
            cur = add(prv, and(smd_pck, msk));
            store(unp_ptr.add(12usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 16i32), msk));
            store(unp_ptr.add(13usize), cur);
            prv = cur;
            smd_pck = load(pck_ptr.add(7usize));
            cur = add(prv, and(smd_pck, msk));
            store(unp_ptr.add(14usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 16i32), msk));
            store(unp_ptr.add(15usize), cur);
            prv = cur;
            smd_pck = load(pck_ptr.add(8usize));
            cur = add(prv, and(smd_pck, msk));
            store(unp_ptr.add(16usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 16i32), msk));
            store(unp_ptr.add(17usize), cur);
            prv = cur;
            smd_pck = load(pck_ptr.add(9usize));
            cur = add(prv, and(smd_pck, msk));
            store(unp_ptr.add(18usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 16i32), msk));
            store(unp_ptr.add(19usize), cur);
            prv = cur;
            smd_pck = load(pck_ptr.add(10usize));
            cur = add(prv, and(smd_pck, msk));
            store(unp_ptr.add(20usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 16i32), msk));
            store(unp_ptr.add(21usize), cur);
            prv = cur;
            smd_pck = load(pck_ptr.add(11usize));
            cur = add(prv, and(smd_pck, msk));
            store(unp_ptr.add(22usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 16i32), msk));
            store(unp_ptr.add(23usize), cur);
            prv = cur;
            smd_pck = load(pck_ptr.add(12usize));
            cur = add(prv, and(smd_pck, msk));
            store(unp_ptr.add(24usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 16i32), msk));
            store(unp_ptr.add(25usize), cur);
            prv = cur;
            smd_pck = load(pck_ptr.add(13usize));
            cur = add(prv, and(smd_pck, msk));
            store(unp_ptr.add(26usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 16i32), msk));
            store(unp_ptr.add(27usize), cur);
            prv = cur;
            smd_pck = load(pck_ptr.add(14usize));
            cur = add(prv, and(smd_pck, msk));
            store(unp_ptr.add(28usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 16i32), msk));
            store(unp_ptr.add(29usize), cur);
            prv = cur;
            smd_pck = load(pck_ptr.add(15usize));
            cur = add(prv, and(smd_pck, msk));
            store(unp_ptr.add(30usize), cur);
            prv = cur;
            store(
                unp_ptr.add(31usize),
                add(prv, and(rht(smd_pck, 16i32), msk)),
            );
        }
        17u8 => {
            let msk = set1(((1u32 << 17u32) - 1u32) as i32);
            let mut smd_pck = load(pck_ptr);
            let mut prv = set1(fst as i32);
            let mut cur = add(prv, and(smd_pck, msk));
            store(unp_ptr, cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 17i32), msk);
            smd_pck = load(pck_ptr.add(1usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 15i32), msk)));
            store(unp_ptr.add(1usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 2i32), msk));
            store(unp_ptr.add(2usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 19i32), msk);
            smd_pck = load(pck_ptr.add(2usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 13i32), msk)));
            store(unp_ptr.add(3usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 4i32), msk));
            store(unp_ptr.add(4usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 21i32), msk);
            smd_pck = load(pck_ptr.add(3usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 11i32), msk)));
            store(unp_ptr.add(5usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 6i32), msk));
            store(unp_ptr.add(6usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 23i32), msk);
            smd_pck = load(pck_ptr.add(4usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 9i32), msk)));
            store(unp_ptr.add(7usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 8i32), msk));
            store(unp_ptr.add(8usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 25i32), msk);
            smd_pck = load(pck_ptr.add(5usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 7i32), msk)));
            store(unp_ptr.add(9usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 10i32), msk));
            store(unp_ptr.add(10usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 27i32), msk);
            smd_pck = load(pck_ptr.add(6usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 5i32), msk)));
            store(unp_ptr.add(11usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 12i32), msk));
            store(unp_ptr.add(12usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 29i32), msk);
            smd_pck = load(pck_ptr.add(7usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 3i32), msk)));
            store(unp_ptr.add(13usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 14i32), msk));
            store(unp_ptr.add(14usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 31i32), msk);
            smd_pck = load(pck_ptr.add(8usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 1i32), msk)));
            store(unp_ptr.add(15usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 16i32), msk);
            smd_pck = load(pck_ptr.add(9usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 16i32), msk)));
            store(unp_ptr.add(16usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 1i32), msk));
            store(unp_ptr.add(17usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 18i32), msk);
            smd_pck = load(pck_ptr.add(10usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 14i32), msk)));
            store(unp_ptr.add(18usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 3i32), msk));
            store(unp_ptr.add(19usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 20i32), msk);
            smd_pck = load(pck_ptr.add(11usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 12i32), msk)));
            store(unp_ptr.add(20usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 5i32), msk));
            store(unp_ptr.add(21usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 22i32), msk);
            smd_pck = load(pck_ptr.add(12usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 10i32), msk)));
            store(unp_ptr.add(22usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 7i32), msk));
            store(unp_ptr.add(23usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 24i32), msk);
            smd_pck = load(pck_ptr.add(13usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 8i32), msk)));
            store(unp_ptr.add(24usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 9i32), msk));
            store(unp_ptr.add(25usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 26i32), msk);
            smd_pck = load(pck_ptr.add(14usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 6i32), msk)));
            store(unp_ptr.add(26usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 11i32), msk));
            store(unp_ptr.add(27usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 28i32), msk);
            smd_pck = load(pck_ptr.add(15usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 4i32), msk)));
            store(unp_ptr.add(28usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 13i32), msk));
            store(unp_ptr.add(29usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 30i32), msk);
            smd_pck = load(pck_ptr.add(16usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 2i32), msk)));
            store(unp_ptr.add(30usize), cur);
            prv = cur;
            store(
                unp_ptr.add(31usize),
                add(prv, and(rht(smd_pck, 15i32), msk)),
            );
        }
        18u8 => {
            let msk = set1(((1u32 << 18u32) - 1u32) as i32);
            let mut smd_pck = load(pck_ptr);
            let mut prv = set1(fst as i32);
            let mut cur = add(prv, and(smd_pck, msk));
            store(unp_ptr, cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 18i32), msk);
            smd_pck = load(pck_ptr.add(1usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 14i32), msk)));
            store(unp_ptr.add(1usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 4i32), msk));
            store(unp_ptr.add(2usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 22i32), msk);
            smd_pck = load(pck_ptr.add(2usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 10i32), msk)));
            store(unp_ptr.add(3usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 8i32), msk));
            store(unp_ptr.add(4usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 26i32), msk);
            smd_pck = load(pck_ptr.add(3usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 6i32), msk)));
            store(unp_ptr.add(5usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 12i32), msk));
            store(unp_ptr.add(6usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 30i32), msk);
            smd_pck = load(pck_ptr.add(4usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 2i32), msk)));
            store(unp_ptr.add(7usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 16i32), msk);
            smd_pck = load(pck_ptr.add(5usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 16i32), msk)));
            store(unp_ptr.add(8usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 2i32), msk));
            store(unp_ptr.add(9usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 20i32), msk);
            smd_pck = load(pck_ptr.add(6usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 12i32), msk)));
            store(unp_ptr.add(10usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 6i32), msk));
            store(unp_ptr.add(11usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 24i32), msk);
            smd_pck = load(pck_ptr.add(7usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 8i32), msk)));
            store(unp_ptr.add(12usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 10i32), msk));
            store(unp_ptr.add(13usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 28i32), msk);
            smd_pck = load(pck_ptr.add(8usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 4i32), msk)));
            store(unp_ptr.add(14usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 14i32), msk));
            store(unp_ptr.add(15usize), cur);
            prv = cur;
            smd_pck = load(pck_ptr.add(9usize));
            cur = add(prv, and(smd_pck, msk));
            store(unp_ptr.add(16usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 18i32), msk);
            smd_pck = load(pck_ptr.add(10usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 14i32), msk)));
            store(unp_ptr.add(17usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 4i32), msk));
            store(unp_ptr.add(18usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 22i32), msk);
            smd_pck = load(pck_ptr.add(11usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 10i32), msk)));
            store(unp_ptr.add(19usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 8i32), msk));
            store(unp_ptr.add(20usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 26i32), msk);
            smd_pck = load(pck_ptr.add(12usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 6i32), msk)));
            store(unp_ptr.add(21usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 12i32), msk));
            store(unp_ptr.add(22usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 30i32), msk);
            smd_pck = load(pck_ptr.add(13usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 2i32), msk)));
            store(unp_ptr.add(23usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 16i32), msk);
            smd_pck = load(pck_ptr.add(14usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 16i32), msk)));
            store(unp_ptr.add(24usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 2i32), msk));
            store(unp_ptr.add(25usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 20i32), msk);
            smd_pck = load(pck_ptr.add(15usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 12i32), msk)));
            store(unp_ptr.add(26usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 6i32), msk));
            store(unp_ptr.add(27usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 24i32), msk);
            smd_pck = load(pck_ptr.add(16usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 8i32), msk)));
            store(unp_ptr.add(28usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 10i32), msk));
            store(unp_ptr.add(29usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 28i32), msk);
            smd_pck = load(pck_ptr.add(17usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 4i32), msk)));
            store(unp_ptr.add(30usize), cur);
            prv = cur;
            store(
                unp_ptr.add(31usize),
                add(prv, and(rht(smd_pck, 14i32), msk)),
            );
        }
        19u8 => {
            let msk = set1(((1u32 << 19u32) - 1u32) as i32);
            let mut smd_pck = load(pck_ptr);
            let mut prv = set1(fst as i32);
            let mut cur = add(prv, and(smd_pck, msk));
            store(unp_ptr, cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 19i32), msk);
            smd_pck = load(pck_ptr.add(1usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 13i32), msk)));
            store(unp_ptr.add(1usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 6i32), msk));
            store(unp_ptr.add(2usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 25i32), msk);
            smd_pck = load(pck_ptr.add(2usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 7i32), msk)));
            store(unp_ptr.add(3usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 12i32), msk));
            store(unp_ptr.add(4usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 31i32), msk);
            smd_pck = load(pck_ptr.add(3usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 1i32), msk)));
            store(unp_ptr.add(5usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 18i32), msk);
            smd_pck = load(pck_ptr.add(4usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 14i32), msk)));
            store(unp_ptr.add(6usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 5i32), msk));
            store(unp_ptr.add(7usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 24i32), msk);
            smd_pck = load(pck_ptr.add(5usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 8i32), msk)));
            store(unp_ptr.add(8usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 11i32), msk));
            store(unp_ptr.add(9usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 30i32), msk);
            smd_pck = load(pck_ptr.add(6usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 2i32), msk)));
            store(unp_ptr.add(10usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 17i32), msk);
            smd_pck = load(pck_ptr.add(7usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 15i32), msk)));
            store(unp_ptr.add(11usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 4i32), msk));
            store(unp_ptr.add(12usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 23i32), msk);
            smd_pck = load(pck_ptr.add(8usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 9i32), msk)));
            store(unp_ptr.add(13usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 10i32), msk));
            store(unp_ptr.add(14usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 29i32), msk);
            smd_pck = load(pck_ptr.add(9usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 3i32), msk)));
            store(unp_ptr.add(15usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 16i32), msk);
            smd_pck = load(pck_ptr.add(10usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 16i32), msk)));
            store(unp_ptr.add(16usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 3i32), msk));
            store(unp_ptr.add(17usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 22i32), msk);
            smd_pck = load(pck_ptr.add(11usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 10i32), msk)));
            store(unp_ptr.add(18usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 9i32), msk));
            store(unp_ptr.add(19usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 28i32), msk);
            smd_pck = load(pck_ptr.add(12usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 4i32), msk)));
            store(unp_ptr.add(20usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 15i32), msk);
            smd_pck = load(pck_ptr.add(13usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 17i32), msk)));
            store(unp_ptr.add(21usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 2i32), msk));
            store(unp_ptr.add(22usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 21i32), msk);
            smd_pck = load(pck_ptr.add(14usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 11i32), msk)));
            store(unp_ptr.add(23usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 8i32), msk));
            store(unp_ptr.add(24usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 27i32), msk);
            smd_pck = load(pck_ptr.add(15usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 5i32), msk)));
            store(unp_ptr.add(25usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 14i32), msk);
            smd_pck = load(pck_ptr.add(16usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 18i32), msk)));
            store(unp_ptr.add(26usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 1i32), msk));
            store(unp_ptr.add(27usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 20i32), msk);
            smd_pck = load(pck_ptr.add(17usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 12i32), msk)));
            store(unp_ptr.add(28usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 7i32), msk));
            store(unp_ptr.add(29usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 26i32), msk);
            smd_pck = load(pck_ptr.add(18usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 6i32), msk)));
            store(unp_ptr.add(30usize), cur);
            prv = cur;
            store(
                unp_ptr.add(31usize),
                add(prv, and(rht(smd_pck, 13i32), msk)),
            );
        }
        20u8 => {
            let msk = set1(((1u32 << 20u32) - 1u32) as i32);
            let mut smd_pck = load(pck_ptr);
            let mut prv = set1(fst as i32);
            let mut cur = add(prv, and(smd_pck, msk));
            store(unp_ptr, cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 20i32), msk);
            smd_pck = load(pck_ptr.add(1usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 12i32), msk)));
            store(unp_ptr.add(1usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 8i32), msk));
            store(unp_ptr.add(2usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 28i32), msk);
            smd_pck = load(pck_ptr.add(2usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 4i32), msk)));
            store(unp_ptr.add(3usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 16i32), msk);
            smd_pck = load(pck_ptr.add(3usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 16i32), msk)));
            store(unp_ptr.add(4usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 4i32), msk));
            store(unp_ptr.add(5usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 24i32), msk);
            smd_pck = load(pck_ptr.add(4usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 8i32), msk)));
            store(unp_ptr.add(6usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 12i32), msk));
            store(unp_ptr.add(7usize), cur);
            prv = cur;
            smd_pck = load(pck_ptr.add(5usize));
            cur = add(prv, and(smd_pck, msk));
            store(unp_ptr.add(8usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 20i32), msk);
            smd_pck = load(pck_ptr.add(6usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 12i32), msk)));
            store(unp_ptr.add(9usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 8i32), msk));
            store(unp_ptr.add(10usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 28i32), msk);
            smd_pck = load(pck_ptr.add(7usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 4i32), msk)));
            store(unp_ptr.add(11usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 16i32), msk);
            smd_pck = load(pck_ptr.add(8usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 16i32), msk)));
            store(unp_ptr.add(12usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 4i32), msk));
            store(unp_ptr.add(13usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 24i32), msk);
            smd_pck = load(pck_ptr.add(9usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 8i32), msk)));
            store(unp_ptr.add(14usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 12i32), msk));
            store(unp_ptr.add(15usize), cur);
            prv = cur;
            smd_pck = load(pck_ptr.add(10usize));
            cur = add(prv, and(smd_pck, msk));
            store(unp_ptr.add(16usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 20i32), msk);
            smd_pck = load(pck_ptr.add(11usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 12i32), msk)));
            store(unp_ptr.add(17usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 8i32), msk));
            store(unp_ptr.add(18usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 28i32), msk);
            smd_pck = load(pck_ptr.add(12usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 4i32), msk)));
            store(unp_ptr.add(19usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 16i32), msk);
            smd_pck = load(pck_ptr.add(13usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 16i32), msk)));
            store(unp_ptr.add(20usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 4i32), msk));
            store(unp_ptr.add(21usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 24i32), msk);
            smd_pck = load(pck_ptr.add(14usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 8i32), msk)));
            store(unp_ptr.add(22usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 12i32), msk));
            store(unp_ptr.add(23usize), cur);
            prv = cur;
            smd_pck = load(pck_ptr.add(15usize));
            cur = add(prv, and(smd_pck, msk));
            store(unp_ptr.add(24usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 20i32), msk);
            smd_pck = load(pck_ptr.add(16usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 12i32), msk)));
            store(unp_ptr.add(25usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 8i32), msk));
            store(unp_ptr.add(26usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 28i32), msk);
            smd_pck = load(pck_ptr.add(17usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 4i32), msk)));
            store(unp_ptr.add(27usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 16i32), msk);
            smd_pck = load(pck_ptr.add(18usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 16i32), msk)));
            store(unp_ptr.add(28usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 4i32), msk));
            store(unp_ptr.add(29usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 24i32), msk);
            smd_pck = load(pck_ptr.add(19usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 8i32), msk)));
            store(unp_ptr.add(30usize), cur);
            prv = cur;
            store(
                unp_ptr.add(31usize),
                add(prv, and(rht(smd_pck, 12i32), msk)),
            );
        }
        21u8 => {
            let msk = set1(((1u32 << 21u32) - 1u32) as i32);
            let mut smd_pck = load(pck_ptr);
            let mut prv = set1(fst as i32);
            let mut cur = add(prv, and(smd_pck, msk));
            store(unp_ptr, cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 21i32), msk);
            smd_pck = load(pck_ptr.add(1usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 11i32), msk)));
            store(unp_ptr.add(1usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 10i32), msk));
            store(unp_ptr.add(2usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 31i32), msk);
            smd_pck = load(pck_ptr.add(2usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 1i32), msk)));
            store(unp_ptr.add(3usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 20i32), msk);
            smd_pck = load(pck_ptr.add(3usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 12i32), msk)));
            store(unp_ptr.add(4usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 9i32), msk));
            store(unp_ptr.add(5usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 30i32), msk);
            smd_pck = load(pck_ptr.add(4usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 2i32), msk)));
            store(unp_ptr.add(6usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 19i32), msk);
            smd_pck = load(pck_ptr.add(5usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 13i32), msk)));
            store(unp_ptr.add(7usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 8i32), msk));
            store(unp_ptr.add(8usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 29i32), msk);
            smd_pck = load(pck_ptr.add(6usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 3i32), msk)));
            store(unp_ptr.add(9usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 18i32), msk);
            smd_pck = load(pck_ptr.add(7usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 14i32), msk)));
            store(unp_ptr.add(10usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 7i32), msk));
            store(unp_ptr.add(11usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 28i32), msk);
            smd_pck = load(pck_ptr.add(8usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 4i32), msk)));
            store(unp_ptr.add(12usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 17i32), msk);
            smd_pck = load(pck_ptr.add(9usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 15i32), msk)));
            store(unp_ptr.add(13usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 6i32), msk));
            store(unp_ptr.add(14usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 27i32), msk);
            smd_pck = load(pck_ptr.add(10usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 5i32), msk)));
            store(unp_ptr.add(15usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 16i32), msk);
            smd_pck = load(pck_ptr.add(11usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 16i32), msk)));
            store(unp_ptr.add(16usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 5i32), msk));
            store(unp_ptr.add(17usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 26i32), msk);
            smd_pck = load(pck_ptr.add(12usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 6i32), msk)));
            store(unp_ptr.add(18usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 15i32), msk);
            smd_pck = load(pck_ptr.add(13usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 17i32), msk)));
            store(unp_ptr.add(19usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 4i32), msk));
            store(unp_ptr.add(20usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 25i32), msk);
            smd_pck = load(pck_ptr.add(14usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 7i32), msk)));
            store(unp_ptr.add(21usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 14i32), msk);
            smd_pck = load(pck_ptr.add(15usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 18i32), msk)));
            store(unp_ptr.add(22usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 3i32), msk));
            store(unp_ptr.add(23usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 24i32), msk);
            smd_pck = load(pck_ptr.add(16usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 8i32), msk)));
            store(unp_ptr.add(24usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 13i32), msk);
            smd_pck = load(pck_ptr.add(17usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 19i32), msk)));
            store(unp_ptr.add(25usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 2i32), msk));
            store(unp_ptr.add(26usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 23i32), msk);
            smd_pck = load(pck_ptr.add(18usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 9i32), msk)));
            store(unp_ptr.add(27usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 12i32), msk);
            smd_pck = load(pck_ptr.add(19usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 20i32), msk)));
            store(unp_ptr.add(28usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 1i32), msk));
            store(unp_ptr.add(29usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 22i32), msk);
            smd_pck = load(pck_ptr.add(20usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 10i32), msk)));
            store(unp_ptr.add(30usize), cur);
            prv = cur;
            store(
                unp_ptr.add(31usize),
                add(prv, and(rht(smd_pck, 11i32), msk)),
            );
        }
        22u8 => {
            let msk = set1(((1u32 << 22u32) - 1u32) as i32);
            let mut smd_pck = load(pck_ptr);
            let mut prv = set1(fst as i32);
            let mut cur = add(prv, and(smd_pck, msk));
            store(unp_ptr, cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 22i32), msk);
            smd_pck = load(pck_ptr.add(1usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 10i32), msk)));
            store(unp_ptr.add(1usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 12i32), msk);
            smd_pck = load(pck_ptr.add(2usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 20i32), msk)));
            store(unp_ptr.add(2usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 2i32), msk));
            store(unp_ptr.add(3usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 24i32), msk);
            smd_pck = load(pck_ptr.add(3usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 8i32), msk)));
            store(unp_ptr.add(4usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 14i32), msk);
            smd_pck = load(pck_ptr.add(4usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 18i32), msk)));
            store(unp_ptr.add(5usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 4i32), msk));
            store(unp_ptr.add(6usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 26i32), msk);
            smd_pck = load(pck_ptr.add(5usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 6i32), msk)));
            store(unp_ptr.add(7usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 16i32), msk);
            smd_pck = load(pck_ptr.add(6usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 16i32), msk)));
            store(unp_ptr.add(8usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 6i32), msk));
            store(unp_ptr.add(9usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 28i32), msk);
            smd_pck = load(pck_ptr.add(7usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 4i32), msk)));
            store(unp_ptr.add(10usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 18i32), msk);
            smd_pck = load(pck_ptr.add(8usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 14i32), msk)));
            store(unp_ptr.add(11usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 8i32), msk));
            store(unp_ptr.add(12usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 30i32), msk);
            smd_pck = load(pck_ptr.add(9usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 2i32), msk)));
            store(unp_ptr.add(13usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 20i32), msk);
            smd_pck = load(pck_ptr.add(10usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 12i32), msk)));
            store(unp_ptr.add(14usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 10i32), msk));
            store(unp_ptr.add(15usize), cur);
            prv = cur;
            smd_pck = load(pck_ptr.add(11usize));
            cur = add(prv, and(smd_pck, msk));
            store(unp_ptr.add(16usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 22i32), msk);
            smd_pck = load(pck_ptr.add(12usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 10i32), msk)));
            store(unp_ptr.add(17usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 12i32), msk);
            smd_pck = load(pck_ptr.add(13usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 20i32), msk)));
            store(unp_ptr.add(18usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 2i32), msk));
            store(unp_ptr.add(19usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 24i32), msk);
            smd_pck = load(pck_ptr.add(14usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 8i32), msk)));
            store(unp_ptr.add(20usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 14i32), msk);
            smd_pck = load(pck_ptr.add(15usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 18i32), msk)));
            store(unp_ptr.add(21usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 4i32), msk));
            store(unp_ptr.add(22usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 26i32), msk);
            smd_pck = load(pck_ptr.add(16usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 6i32), msk)));
            store(unp_ptr.add(23usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 16i32), msk);
            smd_pck = load(pck_ptr.add(17usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 16i32), msk)));
            store(unp_ptr.add(24usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 6i32), msk));
            store(unp_ptr.add(25usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 28i32), msk);
            smd_pck = load(pck_ptr.add(18usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 4i32), msk)));
            store(unp_ptr.add(26usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 18i32), msk);
            smd_pck = load(pck_ptr.add(19usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 14i32), msk)));
            store(unp_ptr.add(27usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 8i32), msk));
            store(unp_ptr.add(28usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 30i32), msk);
            smd_pck = load(pck_ptr.add(20usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 2i32), msk)));
            store(unp_ptr.add(29usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 20i32), msk);
            smd_pck = load(pck_ptr.add(21usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 12i32), msk)));
            store(unp_ptr.add(30usize), cur);
            prv = cur;
            store(
                unp_ptr.add(31usize),
                add(prv, and(rht(smd_pck, 10i32), msk)),
            );
        }
        23u8 => {
            let msk = set1(((1u32 << 23u32) - 1u32) as i32);
            let mut smd_pck = load(pck_ptr);
            let mut prv = set1(fst as i32);
            let mut cur = add(prv, and(smd_pck, msk));
            store(unp_ptr, cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 23i32), msk);
            smd_pck = load(pck_ptr.add(1usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 9i32), msk)));
            store(unp_ptr.add(1usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 14i32), msk);
            smd_pck = load(pck_ptr.add(2usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 18i32), msk)));
            store(unp_ptr.add(2usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 5i32), msk));
            store(unp_ptr.add(3usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 28i32), msk);
            smd_pck = load(pck_ptr.add(3usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 4i32), msk)));
            store(unp_ptr.add(4usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 19i32), msk);
            smd_pck = load(pck_ptr.add(4usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 13i32), msk)));
            store(unp_ptr.add(5usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 10i32), msk);
            smd_pck = load(pck_ptr.add(5usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 22i32), msk)));
            store(unp_ptr.add(6usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 1i32), msk));
            store(unp_ptr.add(7usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 24i32), msk);
            smd_pck = load(pck_ptr.add(6usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 8i32), msk)));
            store(unp_ptr.add(8usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 15i32), msk);
            smd_pck = load(pck_ptr.add(7usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 17i32), msk)));
            store(unp_ptr.add(9usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 6i32), msk));
            store(unp_ptr.add(10usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 29i32), msk);
            smd_pck = load(pck_ptr.add(8usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 3i32), msk)));
            store(unp_ptr.add(11usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 20i32), msk);
            smd_pck = load(pck_ptr.add(9usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 12i32), msk)));
            store(unp_ptr.add(12usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 11i32), msk);
            smd_pck = load(pck_ptr.add(10usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 21i32), msk)));
            store(unp_ptr.add(13usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 2i32), msk));
            store(unp_ptr.add(14usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 25i32), msk);
            smd_pck = load(pck_ptr.add(11usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 7i32), msk)));
            store(unp_ptr.add(15usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 16i32), msk);
            smd_pck = load(pck_ptr.add(12usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 16i32), msk)));
            store(unp_ptr.add(16usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 7i32), msk));
            store(unp_ptr.add(17usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 30i32), msk);
            smd_pck = load(pck_ptr.add(13usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 2i32), msk)));
            store(unp_ptr.add(18usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 21i32), msk);
            smd_pck = load(pck_ptr.add(14usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 11i32), msk)));
            store(unp_ptr.add(19usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 12i32), msk);
            smd_pck = load(pck_ptr.add(15usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 20i32), msk)));
            store(unp_ptr.add(20usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 3i32), msk));
            store(unp_ptr.add(21usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 26i32), msk);
            smd_pck = load(pck_ptr.add(16usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 6i32), msk)));
            store(unp_ptr.add(22usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 17i32), msk);
            smd_pck = load(pck_ptr.add(17usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 15i32), msk)));
            store(unp_ptr.add(23usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 8i32), msk));
            store(unp_ptr.add(24usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 31i32), msk);
            smd_pck = load(pck_ptr.add(18usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 1i32), msk)));
            store(unp_ptr.add(25usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 22i32), msk);
            smd_pck = load(pck_ptr.add(19usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 10i32), msk)));
            store(unp_ptr.add(26usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 13i32), msk);
            smd_pck = load(pck_ptr.add(20usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 19i32), msk)));
            store(unp_ptr.add(27usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 4i32), msk));
            store(unp_ptr.add(28usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 27i32), msk);
            smd_pck = load(pck_ptr.add(21usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 5i32), msk)));
            store(unp_ptr.add(29usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 18i32), msk);
            smd_pck = load(pck_ptr.add(22usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 14i32), msk)));
            store(unp_ptr.add(30usize), cur);
            prv = cur;
            store(unp_ptr.add(31usize), add(prv, and(rht(smd_pck, 9i32), msk)));
        }
        24u8 => {
            let msk = set1(((1u32 << 24u32) - 1u32) as i32);
            let mut smd_pck = load(pck_ptr);
            let mut prv = set1(fst as i32);
            let mut cur = add(prv, and(smd_pck, msk));
            store(unp_ptr, cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 24i32), msk);
            smd_pck = load(pck_ptr.add(1usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 8i32), msk)));
            store(unp_ptr.add(1usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 16i32), msk);
            smd_pck = load(pck_ptr.add(2usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 16i32), msk)));
            store(unp_ptr.add(2usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 8i32), msk));
            store(unp_ptr.add(3usize), cur);
            prv = cur;
            smd_pck = load(pck_ptr.add(3usize));
            cur = add(prv, and(smd_pck, msk));
            store(unp_ptr.add(4usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 24i32), msk);
            smd_pck = load(pck_ptr.add(4usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 8i32), msk)));
            store(unp_ptr.add(5usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 16i32), msk);
            smd_pck = load(pck_ptr.add(5usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 16i32), msk)));
            store(unp_ptr.add(6usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 8i32), msk));
            store(unp_ptr.add(7usize), cur);
            prv = cur;
            smd_pck = load(pck_ptr.add(6usize));
            cur = add(prv, and(smd_pck, msk));
            store(unp_ptr.add(8usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 24i32), msk);
            smd_pck = load(pck_ptr.add(7usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 8i32), msk)));
            store(unp_ptr.add(9usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 16i32), msk);
            smd_pck = load(pck_ptr.add(8usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 16i32), msk)));
            store(unp_ptr.add(10usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 8i32), msk));
            store(unp_ptr.add(11usize), cur);
            prv = cur;
            smd_pck = load(pck_ptr.add(9usize));
            cur = add(prv, and(smd_pck, msk));
            store(unp_ptr.add(12usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 24i32), msk);
            smd_pck = load(pck_ptr.add(10usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 8i32), msk)));
            store(unp_ptr.add(13usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 16i32), msk);
            smd_pck = load(pck_ptr.add(11usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 16i32), msk)));
            store(unp_ptr.add(14usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 8i32), msk));
            store(unp_ptr.add(15usize), cur);
            prv = cur;
            smd_pck = load(pck_ptr.add(12usize));
            cur = add(prv, and(smd_pck, msk));
            store(unp_ptr.add(16usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 24i32), msk);
            smd_pck = load(pck_ptr.add(13usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 8i32), msk)));
            store(unp_ptr.add(17usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 16i32), msk);
            smd_pck = load(pck_ptr.add(14usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 16i32), msk)));
            store(unp_ptr.add(18usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 8i32), msk));
            store(unp_ptr.add(19usize), cur);
            prv = cur;
            smd_pck = load(pck_ptr.add(15usize));
            cur = add(prv, and(smd_pck, msk));
            store(unp_ptr.add(20usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 24i32), msk);
            smd_pck = load(pck_ptr.add(16usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 8i32), msk)));
            store(unp_ptr.add(21usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 16i32), msk);
            smd_pck = load(pck_ptr.add(17usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 16i32), msk)));
            store(unp_ptr.add(22usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 8i32), msk));
            store(unp_ptr.add(23usize), cur);
            prv = cur;
            smd_pck = load(pck_ptr.add(18usize));
            cur = add(prv, and(smd_pck, msk));
            store(unp_ptr.add(24usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 24i32), msk);
            smd_pck = load(pck_ptr.add(19usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 8i32), msk)));
            store(unp_ptr.add(25usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 16i32), msk);
            smd_pck = load(pck_ptr.add(20usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 16i32), msk)));
            store(unp_ptr.add(26usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 8i32), msk));
            store(unp_ptr.add(27usize), cur);
            prv = cur;
            smd_pck = load(pck_ptr.add(21usize));
            cur = add(prv, and(smd_pck, msk));
            store(unp_ptr.add(28usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 24i32), msk);
            smd_pck = load(pck_ptr.add(22usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 8i32), msk)));
            store(unp_ptr.add(29usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 16i32), msk);
            smd_pck = load(pck_ptr.add(23usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 16i32), msk)));
            store(unp_ptr.add(30usize), cur);
            prv = cur;
            store(unp_ptr.add(31usize), add(prv, and(rht(smd_pck, 8i32), msk)));
        }
        25u8 => {
            let msk = set1(((1u32 << 25u32) - 1u32) as i32);
            let mut smd_pck = load(pck_ptr);
            let mut prv = set1(fst as i32);
            let mut cur = add(prv, and(smd_pck, msk));
            store(unp_ptr, cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 25i32), msk);
            smd_pck = load(pck_ptr.add(1usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 7i32), msk)));
            store(unp_ptr.add(1usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 18i32), msk);
            smd_pck = load(pck_ptr.add(2usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 14i32), msk)));
            store(unp_ptr.add(2usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 11i32), msk);
            smd_pck = load(pck_ptr.add(3usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 21i32), msk)));
            store(unp_ptr.add(3usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 4i32), msk));
            store(unp_ptr.add(4usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 29i32), msk);
            smd_pck = load(pck_ptr.add(4usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 3i32), msk)));
            store(unp_ptr.add(5usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 22i32), msk);
            smd_pck = load(pck_ptr.add(5usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 10i32), msk)));
            store(unp_ptr.add(6usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 15i32), msk);
            smd_pck = load(pck_ptr.add(6usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 17i32), msk)));
            store(unp_ptr.add(7usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 8i32), msk);
            smd_pck = load(pck_ptr.add(7usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 24i32), msk)));
            store(unp_ptr.add(8usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 1i32), msk));
            store(unp_ptr.add(9usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 26i32), msk);
            smd_pck = load(pck_ptr.add(8usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 6i32), msk)));
            store(unp_ptr.add(10usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 19i32), msk);
            smd_pck = load(pck_ptr.add(9usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 13i32), msk)));
            store(unp_ptr.add(11usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 12i32), msk);
            smd_pck = load(pck_ptr.add(10usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 20i32), msk)));
            store(unp_ptr.add(12usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 5i32), msk));
            store(unp_ptr.add(13usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 30i32), msk);
            smd_pck = load(pck_ptr.add(11usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 2i32), msk)));
            store(unp_ptr.add(14usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 23i32), msk);
            smd_pck = load(pck_ptr.add(12usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 9i32), msk)));
            store(unp_ptr.add(15usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 16i32), msk);
            smd_pck = load(pck_ptr.add(13usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 16i32), msk)));
            store(unp_ptr.add(16usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 9i32), msk);
            smd_pck = load(pck_ptr.add(14usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 23i32), msk)));
            store(unp_ptr.add(17usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 2i32), msk));
            store(unp_ptr.add(18usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 27i32), msk);
            smd_pck = load(pck_ptr.add(15usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 5i32), msk)));
            store(unp_ptr.add(19usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 20i32), msk);
            smd_pck = load(pck_ptr.add(16usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 12i32), msk)));
            store(unp_ptr.add(20usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 13i32), msk);
            smd_pck = load(pck_ptr.add(17usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 19i32), msk)));
            store(unp_ptr.add(21usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 6i32), msk));
            store(unp_ptr.add(22usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 31i32), msk);
            smd_pck = load(pck_ptr.add(18usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 1i32), msk)));
            store(unp_ptr.add(23usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 24i32), msk);
            smd_pck = load(pck_ptr.add(19usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 8i32), msk)));
            store(unp_ptr.add(24usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 17i32), msk);
            smd_pck = load(pck_ptr.add(20usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 15i32), msk)));
            store(unp_ptr.add(25usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 10i32), msk);
            smd_pck = load(pck_ptr.add(21usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 22i32), msk)));
            store(unp_ptr.add(26usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 3i32), msk));
            store(unp_ptr.add(27usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 28i32), msk);
            smd_pck = load(pck_ptr.add(22usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 4i32), msk)));
            store(unp_ptr.add(28usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 21i32), msk);
            smd_pck = load(pck_ptr.add(23usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 11i32), msk)));
            store(unp_ptr.add(29usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 14i32), msk);
            smd_pck = load(pck_ptr.add(24usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 18i32), msk)));
            store(unp_ptr.add(30usize), cur);
            prv = cur;
            store(unp_ptr.add(31usize), add(prv, and(rht(smd_pck, 7i32), msk)));
        }
        26u8 => {
            let msk = set1(((1u32 << 26u32) - 1u32) as i32);
            let mut smd_pck = load(pck_ptr);
            let mut prv = set1(fst as i32);
            let mut cur = add(prv, and(smd_pck, msk));
            store(unp_ptr, cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 26i32), msk);
            smd_pck = load(pck_ptr.add(1usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 6i32), msk)));
            store(unp_ptr.add(1usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 20i32), msk);
            smd_pck = load(pck_ptr.add(2usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 12i32), msk)));
            store(unp_ptr.add(2usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 14i32), msk);
            smd_pck = load(pck_ptr.add(3usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 18i32), msk)));
            store(unp_ptr.add(3usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 8i32), msk);
            smd_pck = load(pck_ptr.add(4usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 24i32), msk)));
            store(unp_ptr.add(4usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 2i32), msk));
            store(unp_ptr.add(5usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 28i32), msk);
            smd_pck = load(pck_ptr.add(5usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 4i32), msk)));
            store(unp_ptr.add(6usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 22i32), msk);
            smd_pck = load(pck_ptr.add(6usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 10i32), msk)));
            store(unp_ptr.add(7usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 16i32), msk);
            smd_pck = load(pck_ptr.add(7usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 16i32), msk)));
            store(unp_ptr.add(8usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 10i32), msk);
            smd_pck = load(pck_ptr.add(8usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 22i32), msk)));
            store(unp_ptr.add(9usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 4i32), msk));
            store(unp_ptr.add(10usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 30i32), msk);
            smd_pck = load(pck_ptr.add(9usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 2i32), msk)));
            store(unp_ptr.add(11usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 24i32), msk);
            smd_pck = load(pck_ptr.add(10usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 8i32), msk)));
            store(unp_ptr.add(12usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 18i32), msk);
            smd_pck = load(pck_ptr.add(11usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 14i32), msk)));
            store(unp_ptr.add(13usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 12i32), msk);
            smd_pck = load(pck_ptr.add(12usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 20i32), msk)));
            store(unp_ptr.add(14usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 6i32), msk));
            store(unp_ptr.add(15usize), cur);
            prv = cur;
            smd_pck = load(pck_ptr.add(13usize));
            cur = add(prv, and(smd_pck, msk));
            store(unp_ptr.add(16usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 26i32), msk);
            smd_pck = load(pck_ptr.add(14usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 6i32), msk)));
            store(unp_ptr.add(17usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 20i32), msk);
            smd_pck = load(pck_ptr.add(15usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 12i32), msk)));
            store(unp_ptr.add(18usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 14i32), msk);
            smd_pck = load(pck_ptr.add(16usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 18i32), msk)));
            store(unp_ptr.add(19usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 8i32), msk);
            smd_pck = load(pck_ptr.add(17usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 24i32), msk)));
            store(unp_ptr.add(20usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 2i32), msk));
            store(unp_ptr.add(21usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 28i32), msk);
            smd_pck = load(pck_ptr.add(18usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 4i32), msk)));
            store(unp_ptr.add(22usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 22i32), msk);
            smd_pck = load(pck_ptr.add(19usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 10i32), msk)));
            store(unp_ptr.add(23usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 16i32), msk);
            smd_pck = load(pck_ptr.add(20usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 16i32), msk)));
            store(unp_ptr.add(24usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 10i32), msk);
            smd_pck = load(pck_ptr.add(21usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 22i32), msk)));
            store(unp_ptr.add(25usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 4i32), msk));
            store(unp_ptr.add(26usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 30i32), msk);
            smd_pck = load(pck_ptr.add(22usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 2i32), msk)));
            store(unp_ptr.add(27usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 24i32), msk);
            smd_pck = load(pck_ptr.add(23usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 8i32), msk)));
            store(unp_ptr.add(28usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 18i32), msk);
            smd_pck = load(pck_ptr.add(24usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 14i32), msk)));
            store(unp_ptr.add(29usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 12i32), msk);
            smd_pck = load(pck_ptr.add(25usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 20i32), msk)));
            store(unp_ptr.add(30usize), cur);
            prv = cur;
            store(unp_ptr.add(31usize), add(prv, and(rht(smd_pck, 6i32), msk)));
        }
        27u8 => {
            let msk = set1(((1u32 << 27u32) - 1u32) as i32);
            let mut smd_pck = load(pck_ptr);
            let mut prv = set1(fst as i32);
            let mut cur = add(prv, and(smd_pck, msk));
            store(unp_ptr, cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 27i32), msk);
            smd_pck = load(pck_ptr.add(1usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 5i32), msk)));
            store(unp_ptr.add(1usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 22i32), msk);
            smd_pck = load(pck_ptr.add(2usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 10i32), msk)));
            store(unp_ptr.add(2usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 17i32), msk);
            smd_pck = load(pck_ptr.add(3usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 15i32), msk)));
            store(unp_ptr.add(3usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 12i32), msk);
            smd_pck = load(pck_ptr.add(4usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 20i32), msk)));
            store(unp_ptr.add(4usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 7i32), msk);
            smd_pck = load(pck_ptr.add(5usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 25i32), msk)));
            store(unp_ptr.add(5usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 2i32), msk));
            store(unp_ptr.add(6usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 29i32), msk);
            smd_pck = load(pck_ptr.add(6usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 3i32), msk)));
            store(unp_ptr.add(7usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 24i32), msk);
            smd_pck = load(pck_ptr.add(7usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 8i32), msk)));
            store(unp_ptr.add(8usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 19i32), msk);
            smd_pck = load(pck_ptr.add(8usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 13i32), msk)));
            store(unp_ptr.add(9usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 14i32), msk);
            smd_pck = load(pck_ptr.add(9usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 18i32), msk)));
            store(unp_ptr.add(10usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 9i32), msk);
            smd_pck = load(pck_ptr.add(10usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 23i32), msk)));
            store(unp_ptr.add(11usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 4i32), msk));
            store(unp_ptr.add(12usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 31i32), msk);
            smd_pck = load(pck_ptr.add(11usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 1i32), msk)));
            store(unp_ptr.add(13usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 26i32), msk);
            smd_pck = load(pck_ptr.add(12usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 6i32), msk)));
            store(unp_ptr.add(14usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 21i32), msk);
            smd_pck = load(pck_ptr.add(13usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 11i32), msk)));
            store(unp_ptr.add(15usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 16i32), msk);
            smd_pck = load(pck_ptr.add(14usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 16i32), msk)));
            store(unp_ptr.add(16usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 11i32), msk);
            smd_pck = load(pck_ptr.add(15usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 21i32), msk)));
            store(unp_ptr.add(17usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 6i32), msk);
            smd_pck = load(pck_ptr.add(16usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 26i32), msk)));
            store(unp_ptr.add(18usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 1i32), msk));
            store(unp_ptr.add(19usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 28i32), msk);
            smd_pck = load(pck_ptr.add(17usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 4i32), msk)));
            store(unp_ptr.add(20usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 23i32), msk);
            smd_pck = load(pck_ptr.add(18usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 9i32), msk)));
            store(unp_ptr.add(21usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 18i32), msk);
            smd_pck = load(pck_ptr.add(19usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 14i32), msk)));
            store(unp_ptr.add(22usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 13i32), msk);
            smd_pck = load(pck_ptr.add(20usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 19i32), msk)));
            store(unp_ptr.add(23usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 8i32), msk);
            smd_pck = load(pck_ptr.add(21usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 24i32), msk)));
            store(unp_ptr.add(24usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 3i32), msk));
            store(unp_ptr.add(25usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 30i32), msk);
            smd_pck = load(pck_ptr.add(22usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 2i32), msk)));
            store(unp_ptr.add(26usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 25i32), msk);
            smd_pck = load(pck_ptr.add(23usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 7i32), msk)));
            store(unp_ptr.add(27usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 20i32), msk);
            smd_pck = load(pck_ptr.add(24usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 12i32), msk)));
            store(unp_ptr.add(28usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 15i32), msk);
            smd_pck = load(pck_ptr.add(25usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 17i32), msk)));
            store(unp_ptr.add(29usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 10i32), msk);
            smd_pck = load(pck_ptr.add(26usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 22i32), msk)));
            store(unp_ptr.add(30usize), cur);
            prv = cur;
            store(unp_ptr.add(31usize), add(prv, and(rht(smd_pck, 5i32), msk)));
        }
        28u8 => {
            let msk = set1(((1u32 << 28u32) - 1u32) as i32);
            let mut smd_pck = load(pck_ptr);
            let mut prv = set1(fst as i32);
            let mut cur = add(prv, and(smd_pck, msk));
            store(unp_ptr, cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 28i32), msk);
            smd_pck = load(pck_ptr.add(1usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 4i32), msk)));
            store(unp_ptr.add(1usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 24i32), msk);
            smd_pck = load(pck_ptr.add(2usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 8i32), msk)));
            store(unp_ptr.add(2usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 20i32), msk);
            smd_pck = load(pck_ptr.add(3usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 12i32), msk)));
            store(unp_ptr.add(3usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 16i32), msk);
            smd_pck = load(pck_ptr.add(4usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 16i32), msk)));
            store(unp_ptr.add(4usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 12i32), msk);
            smd_pck = load(pck_ptr.add(5usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 20i32), msk)));
            store(unp_ptr.add(5usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 8i32), msk);
            smd_pck = load(pck_ptr.add(6usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 24i32), msk)));
            store(unp_ptr.add(6usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 4i32), msk));
            store(unp_ptr.add(7usize), cur);
            prv = cur;
            smd_pck = load(pck_ptr.add(7usize));
            cur = add(prv, and(smd_pck, msk));
            store(unp_ptr.add(8usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 28i32), msk);
            smd_pck = load(pck_ptr.add(8usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 4i32), msk)));
            store(unp_ptr.add(9usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 24i32), msk);
            smd_pck = load(pck_ptr.add(9usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 8i32), msk)));
            store(unp_ptr.add(10usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 20i32), msk);
            smd_pck = load(pck_ptr.add(10usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 12i32), msk)));
            store(unp_ptr.add(11usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 16i32), msk);
            smd_pck = load(pck_ptr.add(11usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 16i32), msk)));
            store(unp_ptr.add(12usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 12i32), msk);
            smd_pck = load(pck_ptr.add(12usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 20i32), msk)));
            store(unp_ptr.add(13usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 8i32), msk);
            smd_pck = load(pck_ptr.add(13usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 24i32), msk)));
            store(unp_ptr.add(14usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 4i32), msk));
            store(unp_ptr.add(15usize), cur);
            prv = cur;
            smd_pck = load(pck_ptr.add(14usize));
            cur = add(prv, and(smd_pck, msk));
            store(unp_ptr.add(16usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 28i32), msk);
            smd_pck = load(pck_ptr.add(15usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 4i32), msk)));
            store(unp_ptr.add(17usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 24i32), msk);
            smd_pck = load(pck_ptr.add(16usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 8i32), msk)));
            store(unp_ptr.add(18usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 20i32), msk);
            smd_pck = load(pck_ptr.add(17usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 12i32), msk)));
            store(unp_ptr.add(19usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 16i32), msk);
            smd_pck = load(pck_ptr.add(18usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 16i32), msk)));
            store(unp_ptr.add(20usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 12i32), msk);
            smd_pck = load(pck_ptr.add(19usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 20i32), msk)));
            store(unp_ptr.add(21usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 8i32), msk);
            smd_pck = load(pck_ptr.add(20usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 24i32), msk)));
            store(unp_ptr.add(22usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 4i32), msk));
            store(unp_ptr.add(23usize), cur);
            prv = cur;
            smd_pck = load(pck_ptr.add(21usize));
            cur = add(prv, and(smd_pck, msk));
            store(unp_ptr.add(24usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 28i32), msk);
            smd_pck = load(pck_ptr.add(22usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 4i32), msk)));
            store(unp_ptr.add(25usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 24i32), msk);
            smd_pck = load(pck_ptr.add(23usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 8i32), msk)));
            store(unp_ptr.add(26usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 20i32), msk);
            smd_pck = load(pck_ptr.add(24usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 12i32), msk)));
            store(unp_ptr.add(27usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 16i32), msk);
            smd_pck = load(pck_ptr.add(25usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 16i32), msk)));
            store(unp_ptr.add(28usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 12i32), msk);
            smd_pck = load(pck_ptr.add(26usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 20i32), msk)));
            store(unp_ptr.add(29usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 8i32), msk);
            smd_pck = load(pck_ptr.add(27usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 24i32), msk)));
            store(unp_ptr.add(30usize), cur);
            prv = cur;
            store(unp_ptr.add(31usize), add(prv, and(rht(smd_pck, 4i32), msk)));
        }
        29u8 => {
            let msk = set1(((1u32 << 29u32) - 1u32) as i32);
            let mut smd_pck = load(pck_ptr);
            let mut prv = set1(fst as i32);
            let mut cur = add(prv, and(smd_pck, msk));
            store(unp_ptr, cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 29i32), msk);
            smd_pck = load(pck_ptr.add(1usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 3i32), msk)));
            store(unp_ptr.add(1usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 26i32), msk);
            smd_pck = load(pck_ptr.add(2usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 6i32), msk)));
            store(unp_ptr.add(2usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 23i32), msk);
            smd_pck = load(pck_ptr.add(3usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 9i32), msk)));
            store(unp_ptr.add(3usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 20i32), msk);
            smd_pck = load(pck_ptr.add(4usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 12i32), msk)));
            store(unp_ptr.add(4usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 17i32), msk);
            smd_pck = load(pck_ptr.add(5usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 15i32), msk)));
            store(unp_ptr.add(5usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 14i32), msk);
            smd_pck = load(pck_ptr.add(6usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 18i32), msk)));
            store(unp_ptr.add(6usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 11i32), msk);
            smd_pck = load(pck_ptr.add(7usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 21i32), msk)));
            store(unp_ptr.add(7usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 8i32), msk);
            smd_pck = load(pck_ptr.add(8usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 24i32), msk)));
            store(unp_ptr.add(8usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 5i32), msk);
            smd_pck = load(pck_ptr.add(9usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 27i32), msk)));
            store(unp_ptr.add(9usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 2i32), msk));
            store(unp_ptr.add(10usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 31i32), msk);
            smd_pck = load(pck_ptr.add(10usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 1i32), msk)));
            store(unp_ptr.add(11usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 28i32), msk);
            smd_pck = load(pck_ptr.add(11usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 4i32), msk)));
            store(unp_ptr.add(12usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 25i32), msk);
            smd_pck = load(pck_ptr.add(12usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 7i32), msk)));
            store(unp_ptr.add(13usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 22i32), msk);
            smd_pck = load(pck_ptr.add(13usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 10i32), msk)));
            store(unp_ptr.add(14usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 19i32), msk);
            smd_pck = load(pck_ptr.add(14usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 13i32), msk)));
            store(unp_ptr.add(15usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 16i32), msk);
            smd_pck = load(pck_ptr.add(15usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 16i32), msk)));
            store(unp_ptr.add(16usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 13i32), msk);
            smd_pck = load(pck_ptr.add(16usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 19i32), msk)));
            store(unp_ptr.add(17usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 10i32), msk);
            smd_pck = load(pck_ptr.add(17usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 22i32), msk)));
            store(unp_ptr.add(18usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 7i32), msk);
            smd_pck = load(pck_ptr.add(18usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 25i32), msk)));
            store(unp_ptr.add(19usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 4i32), msk);
            smd_pck = load(pck_ptr.add(19usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 28i32), msk)));
            store(unp_ptr.add(20usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 1i32), msk));
            store(unp_ptr.add(21usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 30i32), msk);
            smd_pck = load(pck_ptr.add(20usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 2i32), msk)));
            store(unp_ptr.add(22usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 27i32), msk);
            smd_pck = load(pck_ptr.add(21usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 5i32), msk)));
            store(unp_ptr.add(23usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 24i32), msk);
            smd_pck = load(pck_ptr.add(22usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 8i32), msk)));
            store(unp_ptr.add(24usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 21i32), msk);
            smd_pck = load(pck_ptr.add(23usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 11i32), msk)));
            store(unp_ptr.add(25usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 18i32), msk);
            smd_pck = load(pck_ptr.add(24usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 14i32), msk)));
            store(unp_ptr.add(26usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 15i32), msk);
            smd_pck = load(pck_ptr.add(25usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 17i32), msk)));
            store(unp_ptr.add(27usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 12i32), msk);
            smd_pck = load(pck_ptr.add(26usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 20i32), msk)));
            store(unp_ptr.add(28usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 9i32), msk);
            smd_pck = load(pck_ptr.add(27usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 23i32), msk)));
            store(unp_ptr.add(29usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 6i32), msk);
            smd_pck = load(pck_ptr.add(28usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 26i32), msk)));
            store(unp_ptr.add(30usize), cur);
            prv = cur;
            store(unp_ptr.add(31usize), add(prv, and(rht(smd_pck, 3i32), msk)));
        }
        30u8 => {
            let msk = set1(((1u32 << 30u32) - 1u32) as i32);
            let mut smd_pck = load(pck_ptr);
            let mut prv = set1(fst as i32);
            let mut cur = add(prv, and(smd_pck, msk));
            store(unp_ptr, cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 30i32), msk);
            smd_pck = load(pck_ptr.add(1usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 2i32), msk)));
            store(unp_ptr.add(1usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 28i32), msk);
            smd_pck = load(pck_ptr.add(2usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 4i32), msk)));
            store(unp_ptr.add(2usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 26i32), msk);
            smd_pck = load(pck_ptr.add(3usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 6i32), msk)));
            store(unp_ptr.add(3usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 24i32), msk);
            smd_pck = load(pck_ptr.add(4usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 8i32), msk)));
            store(unp_ptr.add(4usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 22i32), msk);
            smd_pck = load(pck_ptr.add(5usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 10i32), msk)));
            store(unp_ptr.add(5usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 20i32), msk);
            smd_pck = load(pck_ptr.add(6usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 12i32), msk)));
            store(unp_ptr.add(6usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 18i32), msk);
            smd_pck = load(pck_ptr.add(7usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 14i32), msk)));
            store(unp_ptr.add(7usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 16i32), msk);
            smd_pck = load(pck_ptr.add(8usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 16i32), msk)));
            store(unp_ptr.add(8usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 14i32), msk);
            smd_pck = load(pck_ptr.add(9usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 18i32), msk)));
            store(unp_ptr.add(9usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 12i32), msk);
            smd_pck = load(pck_ptr.add(10usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 20i32), msk)));
            store(unp_ptr.add(10usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 10i32), msk);
            smd_pck = load(pck_ptr.add(11usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 22i32), msk)));
            store(unp_ptr.add(11usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 8i32), msk);
            smd_pck = load(pck_ptr.add(12usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 24i32), msk)));
            store(unp_ptr.add(12usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 6i32), msk);
            smd_pck = load(pck_ptr.add(13usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 26i32), msk)));
            store(unp_ptr.add(13usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 4i32), msk);
            smd_pck = load(pck_ptr.add(14usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 28i32), msk)));
            store(unp_ptr.add(14usize), cur);
            prv = cur;
            cur = add(prv, and(rht(smd_pck, 2i32), msk));
            store(unp_ptr.add(15usize), cur);
            prv = cur;
            smd_pck = load(pck_ptr.add(15usize));
            cur = add(prv, and(smd_pck, msk));
            store(unp_ptr.add(16usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 30i32), msk);
            smd_pck = load(pck_ptr.add(16usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 2i32), msk)));
            store(unp_ptr.add(17usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 28i32), msk);
            smd_pck = load(pck_ptr.add(17usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 4i32), msk)));
            store(unp_ptr.add(18usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 26i32), msk);
            smd_pck = load(pck_ptr.add(18usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 6i32), msk)));
            store(unp_ptr.add(19usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 24i32), msk);
            smd_pck = load(pck_ptr.add(19usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 8i32), msk)));
            store(unp_ptr.add(20usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 22i32), msk);
            smd_pck = load(pck_ptr.add(20usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 10i32), msk)));
            store(unp_ptr.add(21usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 20i32), msk);
            smd_pck = load(pck_ptr.add(21usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 12i32), msk)));
            store(unp_ptr.add(22usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 18i32), msk);
            smd_pck = load(pck_ptr.add(22usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 14i32), msk)));
            store(unp_ptr.add(23usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 16i32), msk);
            smd_pck = load(pck_ptr.add(23usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 16i32), msk)));
            store(unp_ptr.add(24usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 14i32), msk);
            smd_pck = load(pck_ptr.add(24usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 18i32), msk)));
            store(unp_ptr.add(25usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 12i32), msk);
            smd_pck = load(pck_ptr.add(25usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 20i32), msk)));
            store(unp_ptr.add(26usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 10i32), msk);
            smd_pck = load(pck_ptr.add(26usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 22i32), msk)));
            store(unp_ptr.add(27usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 8i32), msk);
            smd_pck = load(pck_ptr.add(27usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 24i32), msk)));
            store(unp_ptr.add(28usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 6i32), msk);
            smd_pck = load(pck_ptr.add(28usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 26i32), msk)));
            store(unp_ptr.add(29usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 4i32), msk);
            smd_pck = load(pck_ptr.add(29usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 28i32), msk)));
            store(unp_ptr.add(30usize), cur);
            prv = cur;
            store(unp_ptr.add(31usize), add(prv, and(rht(smd_pck, 2i32), msk)));
        }
        31u8 => {
            let msk = set1(((1u32 << 31u32) - 1u32) as i32);
            let mut smd_pck = load(pck_ptr);
            let mut prv = set1(fst as i32);
            let mut cur = add(prv, and(smd_pck, msk));
            store(unp_ptr, cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 31i32), msk);
            smd_pck = load(pck_ptr.add(1usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 1i32), msk)));
            store(unp_ptr.add(1usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 30i32), msk);
            smd_pck = load(pck_ptr.add(2usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 2i32), msk)));
            store(unp_ptr.add(2usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 29i32), msk);
            smd_pck = load(pck_ptr.add(3usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 3i32), msk)));
            store(unp_ptr.add(3usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 28i32), msk);
            smd_pck = load(pck_ptr.add(4usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 4i32), msk)));
            store(unp_ptr.add(4usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 27i32), msk);
            smd_pck = load(pck_ptr.add(5usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 5i32), msk)));
            store(unp_ptr.add(5usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 26i32), msk);
            smd_pck = load(pck_ptr.add(6usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 6i32), msk)));
            store(unp_ptr.add(6usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 25i32), msk);
            smd_pck = load(pck_ptr.add(7usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 7i32), msk)));
            store(unp_ptr.add(7usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 24i32), msk);
            smd_pck = load(pck_ptr.add(8usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 8i32), msk)));
            store(unp_ptr.add(8usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 23i32), msk);
            smd_pck = load(pck_ptr.add(9usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 9i32), msk)));
            store(unp_ptr.add(9usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 22i32), msk);
            smd_pck = load(pck_ptr.add(10usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 10i32), msk)));
            store(unp_ptr.add(10usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 21i32), msk);
            smd_pck = load(pck_ptr.add(11usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 11i32), msk)));
            store(unp_ptr.add(11usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 20i32), msk);
            smd_pck = load(pck_ptr.add(12usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 12i32), msk)));
            store(unp_ptr.add(12usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 19i32), msk);
            smd_pck = load(pck_ptr.add(13usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 13i32), msk)));
            store(unp_ptr.add(13usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 18i32), msk);
            smd_pck = load(pck_ptr.add(14usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 14i32), msk)));
            store(unp_ptr.add(14usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 17i32), msk);
            smd_pck = load(pck_ptr.add(15usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 15i32), msk)));
            store(unp_ptr.add(15usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 16i32), msk);
            smd_pck = load(pck_ptr.add(16usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 16i32), msk)));
            store(unp_ptr.add(16usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 15i32), msk);
            smd_pck = load(pck_ptr.add(17usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 17i32), msk)));
            store(unp_ptr.add(17usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 14i32), msk);
            smd_pck = load(pck_ptr.add(18usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 18i32), msk)));
            store(unp_ptr.add(18usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 13i32), msk);
            smd_pck = load(pck_ptr.add(19usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 19i32), msk)));
            store(unp_ptr.add(19usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 12i32), msk);
            smd_pck = load(pck_ptr.add(20usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 20i32), msk)));
            store(unp_ptr.add(20usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 11i32), msk);
            smd_pck = load(pck_ptr.add(21usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 21i32), msk)));
            store(unp_ptr.add(21usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 10i32), msk);
            smd_pck = load(pck_ptr.add(22usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 22i32), msk)));
            store(unp_ptr.add(22usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 9i32), msk);
            smd_pck = load(pck_ptr.add(23usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 23i32), msk)));
            store(unp_ptr.add(23usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 8i32), msk);
            smd_pck = load(pck_ptr.add(24usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 24i32), msk)));
            store(unp_ptr.add(24usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 7i32), msk);
            smd_pck = load(pck_ptr.add(25usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 25i32), msk)));
            store(unp_ptr.add(25usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 6i32), msk);
            smd_pck = load(pck_ptr.add(26usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 26i32), msk)));
            store(unp_ptr.add(26usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 5i32), msk);
            smd_pck = load(pck_ptr.add(27usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 27i32), msk)));
            store(unp_ptr.add(27usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 4i32), msk);
            smd_pck = load(pck_ptr.add(28usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 28i32), msk)));
            store(unp_ptr.add(28usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 3i32), msk);
            smd_pck = load(pck_ptr.add(29usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 29i32), msk)));
            store(unp_ptr.add(29usize), cur);
            prv = cur;
            let dlt = and(rht(smd_pck, 2i32), msk);
            smd_pck = load(pck_ptr.add(30usize));
            cur = add(prv, or(dlt, and(lft(smd_pck, 30i32), msk)));
            store(unp_ptr.add(30usize), cur);
            prv = cur;
            store(unp_ptr.add(31usize), add(prv, and(rht(smd_pck, 1i32), msk)));
        }
        32u8 => {
            ptr::copy_nonoverlapping(pck.as_ptr(), unp.as_mut_ptr() as *mut u8, pck.len());
        }
        _ => ::std::rt::panic_fmt(::core::fmt::Arguments::new_v1(
            &["unsupported bit-length "],
            &[::core::fmt::ArgumentV1::new_display(&elm_bit_len)],
        )),
    }
}
#[inline]
pub unsafe fn u32x256_bit_len(blk: &[u32]) -> u8 {
    let mut acm = 0u32;
    let prv_slc = &blk[0usize..0usize + 8usize];
    let prv = u32x8::from_array(*(prv_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    let cur_slc = &blk[8usize..8usize + 8usize];
    let cur = u32x8::from_array(*(cur_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    acm |= (cur - prv).horizontal_or();
    let prv_slc = &blk[8usize..8usize + 8usize];
    let prv = u32x8::from_array(*(prv_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    let cur_slc = &blk[16usize..16usize + 8usize];
    let cur = u32x8::from_array(*(cur_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    acm |= (cur - prv).horizontal_or();
    let prv_slc = &blk[16usize..16usize + 8usize];
    let prv = u32x8::from_array(*(prv_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    let cur_slc = &blk[24usize..24usize + 8usize];
    let cur = u32x8::from_array(*(cur_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    acm |= (cur - prv).horizontal_or();
    let prv_slc = &blk[24usize..24usize + 8usize];
    let prv = u32x8::from_array(*(prv_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    let cur_slc = &blk[32usize..32usize + 8usize];
    let cur = u32x8::from_array(*(cur_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    acm |= (cur - prv).horizontal_or();
    let prv_slc = &blk[32usize..32usize + 8usize];
    let prv = u32x8::from_array(*(prv_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    let cur_slc = &blk[40usize..40usize + 8usize];
    let cur = u32x8::from_array(*(cur_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    acm |= (cur - prv).horizontal_or();
    let prv_slc = &blk[40usize..40usize + 8usize];
    let prv = u32x8::from_array(*(prv_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    let cur_slc = &blk[48usize..48usize + 8usize];
    let cur = u32x8::from_array(*(cur_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    acm |= (cur - prv).horizontal_or();
    let prv_slc = &blk[48usize..48usize + 8usize];
    let prv = u32x8::from_array(*(prv_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    let cur_slc = &blk[56usize..56usize + 8usize];
    let cur = u32x8::from_array(*(cur_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    acm |= (cur - prv).horizontal_or();
    let prv_slc = &blk[56usize..56usize + 8usize];
    let prv = u32x8::from_array(*(prv_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    let cur_slc = &blk[64usize..64usize + 8usize];
    let cur = u32x8::from_array(*(cur_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    acm |= (cur - prv).horizontal_or();
    let prv_slc = &blk[64usize..64usize + 8usize];
    let prv = u32x8::from_array(*(prv_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    let cur_slc = &blk[72usize..72usize + 8usize];
    let cur = u32x8::from_array(*(cur_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    acm |= (cur - prv).horizontal_or();
    let prv_slc = &blk[72usize..72usize + 8usize];
    let prv = u32x8::from_array(*(prv_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    let cur_slc = &blk[80usize..80usize + 8usize];
    let cur = u32x8::from_array(*(cur_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    acm |= (cur - prv).horizontal_or();
    let prv_slc = &blk[80usize..80usize + 8usize];
    let prv = u32x8::from_array(*(prv_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    let cur_slc = &blk[88usize..88usize + 8usize];
    let cur = u32x8::from_array(*(cur_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    acm |= (cur - prv).horizontal_or();
    let prv_slc = &blk[88usize..88usize + 8usize];
    let prv = u32x8::from_array(*(prv_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    let cur_slc = &blk[96usize..96usize + 8usize];
    let cur = u32x8::from_array(*(cur_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    acm |= (cur - prv).horizontal_or();
    let prv_slc = &blk[96usize..96usize + 8usize];
    let prv = u32x8::from_array(*(prv_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    let cur_slc = &blk[104usize..104usize + 8usize];
    let cur = u32x8::from_array(*(cur_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    acm |= (cur - prv).horizontal_or();
    let prv_slc = &blk[104usize..104usize + 8usize];
    let prv = u32x8::from_array(*(prv_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    let cur_slc = &blk[112usize..112usize + 8usize];
    let cur = u32x8::from_array(*(cur_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    acm |= (cur - prv).horizontal_or();
    let prv_slc = &blk[112usize..112usize + 8usize];
    let prv = u32x8::from_array(*(prv_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    let cur_slc = &blk[120usize..120usize + 8usize];
    let cur = u32x8::from_array(*(cur_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    acm |= (cur - prv).horizontal_or();
    let prv_slc = &blk[120usize..120usize + 8usize];
    let prv = u32x8::from_array(*(prv_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    let cur_slc = &blk[128usize..128usize + 8usize];
    let cur = u32x8::from_array(*(cur_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    acm |= (cur - prv).horizontal_or();
    let prv_slc = &blk[128usize..128usize + 8usize];
    let prv = u32x8::from_array(*(prv_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    let cur_slc = &blk[136usize..136usize + 8usize];
    let cur = u32x8::from_array(*(cur_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    acm |= (cur - prv).horizontal_or();
    let prv_slc = &blk[136usize..136usize + 8usize];
    let prv = u32x8::from_array(*(prv_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    let cur_slc = &blk[144usize..144usize + 8usize];
    let cur = u32x8::from_array(*(cur_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    acm |= (cur - prv).horizontal_or();
    let prv_slc = &blk[144usize..144usize + 8usize];
    let prv = u32x8::from_array(*(prv_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    let cur_slc = &blk[152usize..152usize + 8usize];
    let cur = u32x8::from_array(*(cur_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    acm |= (cur - prv).horizontal_or();
    let prv_slc = &blk[152usize..152usize + 8usize];
    let prv = u32x8::from_array(*(prv_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    let cur_slc = &blk[160usize..160usize + 8usize];
    let cur = u32x8::from_array(*(cur_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    acm |= (cur - prv).horizontal_or();
    let prv_slc = &blk[160usize..160usize + 8usize];
    let prv = u32x8::from_array(*(prv_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    let cur_slc = &blk[168usize..168usize + 8usize];
    let cur = u32x8::from_array(*(cur_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    acm |= (cur - prv).horizontal_or();
    let prv_slc = &blk[168usize..168usize + 8usize];
    let prv = u32x8::from_array(*(prv_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    let cur_slc = &blk[176usize..176usize + 8usize];
    let cur = u32x8::from_array(*(cur_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    acm |= (cur - prv).horizontal_or();
    let prv_slc = &blk[176usize..176usize + 8usize];
    let prv = u32x8::from_array(*(prv_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    let cur_slc = &blk[184usize..184usize + 8usize];
    let cur = u32x8::from_array(*(cur_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    acm |= (cur - prv).horizontal_or();
    let prv_slc = &blk[184usize..184usize + 8usize];
    let prv = u32x8::from_array(*(prv_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    let cur_slc = &blk[192usize..192usize + 8usize];
    let cur = u32x8::from_array(*(cur_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    acm |= (cur - prv).horizontal_or();
    let prv_slc = &blk[192usize..192usize + 8usize];
    let prv = u32x8::from_array(*(prv_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    let cur_slc = &blk[200usize..200usize + 8usize];
    let cur = u32x8::from_array(*(cur_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    acm |= (cur - prv).horizontal_or();
    let prv_slc = &blk[200usize..200usize + 8usize];
    let prv = u32x8::from_array(*(prv_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    let cur_slc = &blk[208usize..208usize + 8usize];
    let cur = u32x8::from_array(*(cur_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    acm |= (cur - prv).horizontal_or();
    let prv_slc = &blk[208usize..208usize + 8usize];
    let prv = u32x8::from_array(*(prv_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    let cur_slc = &blk[216usize..216usize + 8usize];
    let cur = u32x8::from_array(*(cur_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    acm |= (cur - prv).horizontal_or();
    let prv_slc = &blk[216usize..216usize + 8usize];
    let prv = u32x8::from_array(*(prv_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    let cur_slc = &blk[224usize..224usize + 8usize];
    let cur = u32x8::from_array(*(cur_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    acm |= (cur - prv).horizontal_or();
    let prv_slc = &blk[224usize..224usize + 8usize];
    let prv = u32x8::from_array(*(prv_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    let cur_slc = &blk[232usize..232usize + 8usize];
    let cur = u32x8::from_array(*(cur_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    acm |= (cur - prv).horizontal_or();
    let prv_slc = &blk[232usize..232usize + 8usize];
    let prv = u32x8::from_array(*(prv_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    let cur_slc = &blk[240usize..240usize + 8usize];
    let cur = u32x8::from_array(*(cur_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    acm |= (cur - prv).horizontal_or();
    let prv_slc = &blk[240usize..240usize + 8usize];
    let prv = u32x8::from_array(*(prv_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    let cur_slc = &blk[248usize..248usize + 8usize];
    let cur = u32x8::from_array(*(cur_slc.as_ptr() as *const [u32; ELM_PER_SMD]));
    acm |= (cur - prv).horizontal_or();
    return (32u32 - u32::leading_zeros(acm)) as u8;
}
#[inline]
pub fn u32x256_byt_len(elm_bit_len: u8) -> usize {
    match elm_bit_len {
        0u8 => 0usize,
        1u8 => 32usize,
        2u8 => 64usize,
        3u8 => 96usize,
        4u8 => 128usize,
        5u8 => 160usize,
        6u8 => 192usize,
        7u8 => 224usize,
        8u8 => 256usize,
        9u8 => 288usize,
        10u8 => 320usize,
        11u8 => 352usize,
        12u8 => 384usize,
        13u8 => 416usize,
        14u8 => 448usize,
        15u8 => 480usize,
        16u8 => 512usize,
        17u8 => 544usize,
        18u8 => 576usize,
        19u8 => 608usize,
        20u8 => 640usize,
        21u8 => 672usize,
        22u8 => 704usize,
        23u8 => 736usize,
        24u8 => 768usize,
        25u8 => 800usize,
        26u8 => 832usize,
        27u8 => 864usize,
        28u8 => 896usize,
        29u8 => 928usize,
        30u8 => 960usize,
        31u8 => 992usize,
        32u8 => 1024usize,
        _ => ::std::rt::panic_fmt(::core::fmt::Arguments::new_v1(
            &["unsupported bit-length "],
            &[::core::fmt::ArgumentV1::new_display(&elm_bit_len)],
        )),
    }
}
/// `TmeMli` is a series of NaiveDateTimes for stock market instruments.
///
/// Values are compressed and accessible by day.
///
/// A day is based on the NYSE Core Trading Session from 9:30am to 4:00pm ET.
/// Values before 9:30am ET and after 4:00pm ET are invalid, and dropped when added.
///
/// A day is limited to 4,294,967,295 values per day.
///
/// `TmeMli` is designed for fast decompression and good space compression.
///  
/// See NYSE hours https://www.nyse.com/markets/hours-calendars.
///
pub struct TmeMli {
    pub buf: Vec<u8>,
}
/// `IDX_DAY_FST` is the buffer index to the `First Day` i32 in TmeMli.
const IDX_DAY_FST: usize = 0;
/// `IDX_DAY_CNT` is the buffer index to the `Day Count` u32 in TmeMli.
const IDX_DAY_CNT: usize = 4;
/// `IDX_DAY_REF` is the buffer index to the first u32 `Day Ref Idx` in TmeMli.
const IDX_DAY_REF: usize = 8;
/// `LEN_DAY_FST` is the number bytes used to store an i32 `First Day` in TmeMli.
const LEN_DAY_FST: usize = 4;
/// `LEN_DAY_CNT` is the number bytes used to store a u32 `Day Count` in TmeMli.
const LEN_DAY_CNT: usize = 4;
/// `LEN_DAY_REF` is the number bytes used to store a u32 `Day Ref Idx` in TmeMli.
const LEN_DAY_REF: usize = 4;
impl TmeMli {
    /// `new` returns a new instance of `TmeMli`.
    pub fn new() -> TmeMli {
        return TmeMli {
            buf: ::alloc::vec::from_elem(0, 8),
        };
    }
    /// `u32s` converts NaiveDateTimes to u32s.
    pub fn u32s(day: &[NaiveDateTime]) -> Vec<u32> {
        let tme_min = NaiveTime::from_hms(9, 30, 0);
        let mut unp = ::alloc::vec::from_elem(0u32, day.len());
        for n in 0..day.len() {
            unp[n] = (day[n].time() - tme_min).num_milliseconds() as u32;
        }
        return unp;
    }
    /// `ndts` converts unpacked u32s to NaiveDateTimes with the specified date.
    pub fn ndts(day_unp: &mut [u32], day: NaiveDate) -> Vec<NaiveDateTime> {
        let tme_min = NaiveTime::from_hms(9, 30, 0);
        let mut tmes: Vec<NaiveDateTime> = Vec::with_capacity(day_unp.len());
        unsafe {
            tmes.set_len(day_unp.len());
        }
        for n in 0..day_unp.len() {
            tmes[n] = NaiveDateTime::new(day, tme_min + Duration::milliseconds(day_unp[n] as i64));
        }
        return tmes;
    }
    /// `trim` trims values before 9:30am and after 4:00pm ET.
    pub fn trim(mut day: &[NaiveDateTime]) -> Option<&[NaiveDateTime]> {
        let tme_min = NaiveTime::from_hms(9, 30, 0);
        let day_min = NaiveDateTime::new(day[0].date(), tme_min);
        let mut idx: usize = 0;
        while idx < day.len() && day[idx] < day_min {
            idx += 1;
        }
        day = &day[idx..];
        if day.len() == 0 {
            return None;
        }
        let day_max = NaiveDateTime::new(day[0].date(), NaiveTime::from_hms(16, 0, 0));
        idx = day.len() - 1;
        while idx > 0 && day[idx] >= day_max {
            idx -= 1;
        }
        day = &day[..idx + 1];
        if day[0] >= day_max {
            return None;
        }
        return Some(day);
    }
    /// `append_day` appends a day of NaiveDateTimes.
    ///
    /// Values before 9:30am and after 4:00pm ET are dropped.
    ///
    /// Specifying more than one day results in dropping days greater than the first day.
    pub fn append_day(&mut self, mut day: &[NaiveDateTime]) {
        {
            ::std::io::_print(::core::fmt::Arguments::new_v1(&["-- append_day\n"], &[]));
        };
        if day.len() == 0 {
            return;
        }
        let opt = TmeMli::trim(day);
        if opt == None {
            return;
        }
        day = opt.unwrap();
        unsafe {
            let day_cnt_prv =
                u32::from_ne_bytes(*(self.buf[IDX_DAY_CNT..].as_ptr() as *const [u8; LEN_DAY_CNT]));
            let day_cnt_new = day_cnt_prv + 1;
            ptr::copy_nonoverlapping(
                day_cnt_new.to_ne_bytes().as_ptr() as *const u8,
                self.buf[IDX_DAY_CNT..].as_mut_ptr(),
                LEN_DAY_CNT,
            );
            if day_cnt_prv == 0 {
                ptr::copy_nonoverlapping(
                    day[0].num_days_from_ce().to_ne_bytes().as_ptr() as *const u8,
                    self.buf.as_mut_ptr(),
                    LEN_DAY_FST,
                );
            }
            let unp = TmeMli::u32s(day);
            let day_len = DayLen::u32x256(&unp);
            let buf_len_prv = self.buf.len();
            {
                ::std::io::_print(::core::fmt::Arguments::new_v1(
                    &["buf_len_prv ", "\n"],
                    &[::core::fmt::ArgumentV1::new_display(&buf_len_prv)],
                ));
            };
            let hdr_len_prv = LEN_DAY_FST + LEN_DAY_CNT + (day_cnt_prv as usize * LEN_DAY_REF);
            {
                ::std::io::_print(::core::fmt::Arguments::new_v1(
                    &["hdr_len_prv ", "\n"],
                    &[::core::fmt::ArgumentV1::new_display(&hdr_len_prv)],
                ));
            };
            self.buf
                .resize(self.buf.len() + LEN_DAY_REF + day_len.byt_len, 0);
            {
                ::std::io::_print(::core::fmt::Arguments::new_v1(
                    &["new self.buf.len() ", "\n"],
                    &[::core::fmt::ArgumentV1::new_display(&self.buf.len())],
                ));
            };
            {
                ::std::io::_print(::core::fmt::Arguments::new_v1(
                    &["grow len ", "\n"],
                    &[::core::fmt::ArgumentV1::new_display(
                        &(LEN_DAY_REF + day_len.byt_len),
                    )],
                ));
            };
            let expanded = &self.buf[self.buf.len() - 32..];
            {
                ::std::io::_print(::core::fmt::Arguments::new_v1(
                    &["expanded ", "\n"],
                    &[::core::fmt::ArgumentV1::new_debug(&&expanded)],
                ));
            };
            if day_cnt_prv != 0 {
                let idx_vals_prv = u32::from_ne_bytes(
                    *(self.buf[IDX_DAY_REF..].as_ptr() as *const [u8; LEN_DAY_REF]),
                ) as usize;
                let len_vals_prv = buf_len_prv - idx_vals_prv;
                {
                    ::std::io::_print(::core::fmt::Arguments::new_v1(
                        &["idx_vals_prv ", "\n"],
                        &[::core::fmt::ArgumentV1::new_display(&idx_vals_prv)],
                    ));
                };
                {
                    ::std::io::_print(::core::fmt::Arguments::new_v1(
                        &["len_vals_prv ", "\n"],
                        &[::core::fmt::ArgumentV1::new_display(&len_vals_prv)],
                    ));
                };
                let shf_prv = &self.buf.clone()[idx_vals_prv..];
                let buf_a = &self.buf.clone()[..32];
                {
                    ::std::io::_print(::core::fmt::Arguments::new_v1(
                        &["buf_a ", "\n"],
                        &[::core::fmt::ArgumentV1::new_debug(&&buf_a)],
                    ));
                };
                ptr::copy(
                    self.buf[idx_vals_prv..].as_ptr(),
                    self.buf[(idx_vals_prv + LEN_DAY_REF)..].as_mut_ptr(),
                    len_vals_prv,
                );
                let buf_b = &self.buf.clone()[..32];
                {
                    ::std::io::_print(::core::fmt::Arguments::new_v1(
                        &["buf_b ", "\n"],
                        &[::core::fmt::ArgumentV1::new_debug(&&buf_b)],
                    ));
                };
                let shf_nxt = &self.buf[(idx_vals_prv + LEN_DAY_REF)..];
                {
                    ::std::io::_print(::core::fmt::Arguments::new_v1(
                        &["shf_prv.len() ", "\n"],
                        &[::core::fmt::ArgumentV1::new_display(&shf_prv.len())],
                    ));
                };
                {
                    ::std::io::_print(::core::fmt::Arguments::new_v1(
                        &["shf_nxt.len() ", "\n"],
                        &[::core::fmt::ArgumentV1::new_display(&shf_nxt.len())],
                    ));
                };
                let idx: usize = len_vals_prv - 16;
                let lim: usize = idx + 16;
                let shf_prv2 = &shf_prv[idx..lim];
                let shf_nxt2 = &shf_nxt[idx..lim];
                {
                    ::std::io::_print(::core::fmt::Arguments::new_v1(
                        &["shf_prv ", "\n"],
                        &[::core::fmt::ArgumentV1::new_debug(&shf_prv2)],
                    ));
                };
                {
                    ::std::io::_print(::core::fmt::Arguments::new_v1(
                        &["shf_nxt ", "\n"],
                        &[::core::fmt::ArgumentV1::new_debug(&shf_nxt2)],
                    ));
                };
                for n in 0..day_cnt_prv {
                    let idx_ref_prv = IDX_DAY_REF + (n as usize * LEN_DAY_REF);
                    {
                        ::std::io::_print(::core::fmt::Arguments::new_v1(
                            &["idx_ref_prv ", "\n"],
                            &[::core::fmt::ArgumentV1::new_display(&idx_ref_prv)],
                        ));
                    };
                    let mut idx_val_prv = u32::from_ne_bytes(
                        *(self.buf[idx_ref_prv..].as_ptr() as *const [u8; LEN_DAY_REF]),
                    );
                    {
                        ::std::io::_print(::core::fmt::Arguments::new_v1(
                            &["idx_val_prv ", "\n"],
                            &[::core::fmt::ArgumentV1::new_display(&idx_val_prv)],
                        ));
                    };
                    idx_val_prv += LEN_DAY_REF as u32;
                    {
                        ::std::io::_print(::core::fmt::Arguments::new_v1(
                            &["idx_val_upd ", "\n"],
                            &[::core::fmt::ArgumentV1::new_display(&idx_val_prv)],
                        ));
                    };
                    ptr::copy_nonoverlapping(
                        idx_val_prv.to_ne_bytes().as_ptr() as *const u8,
                        self.buf[idx_ref_prv..].as_mut_ptr(),
                        LEN_DAY_REF,
                    );
                }
            }
            let idx_ref_new = IDX_DAY_REF + (day_cnt_prv as usize * LEN_DAY_REF);
            {
                ::std::io::_print(::core::fmt::Arguments::new_v1(
                    &["idx_ref_new ", "\n"],
                    &[::core::fmt::ArgumentV1::new_display(&idx_ref_new)],
                ));
            };
            let idx_val_new = buf_len_prv + LEN_DAY_REF;
            {
                ::std::io::_print(::core::fmt::Arguments::new_v1(
                    &["idx_val_new ", "\n"],
                    &[::core::fmt::ArgumentV1::new_display(&idx_val_new)],
                ));
            };
            ptr::copy_nonoverlapping(
                idx_val_new.to_ne_bytes().as_ptr() as *const u8,
                self.buf[idx_ref_new..].as_mut_ptr(),
                LEN_DAY_REF,
            );
            {
                ::std::io::_print(::core::fmt::Arguments::new_v1(
                    &["day_cnt_prv ", "\n"],
                    &[::core::fmt::ArgumentV1::new_display(&day_cnt_prv)],
                ));
            };
            {
                ::std::io::_print(::core::fmt::Arguments::new_v1(
                    &["day_cnt_new ", "\n"],
                    &[::core::fmt::ArgumentV1::new_display(&day_cnt_new)],
                ));
            };
            {
                ::std::io::_print(::core::fmt::Arguments::new_v1(
                    &["day_len ", "\n"],
                    &[::core::fmt::ArgumentV1::new_debug(&&day_len)],
                ));
            };
            day_u32x256_pck(&day_len, &unp, &mut self.buf[idx_val_new..]);
        }
    }
    /// `get_day` returns a decompressed day NaiveDateTimes.
    pub fn get_day(&self, day: NaiveDate) -> Option<Vec<NaiveDateTime>> {
        {
            ::std::io::_print(::core::fmt::Arguments::new_v1(&["-- get_day\n"], &[]));
        };
        unsafe {
            let day_cnt =
                u32::from_ne_bytes(*(self.buf[IDX_DAY_CNT..].as_ptr() as *const [u8; LEN_DAY_CNT]))
                    as i32;
            {
                ::std::io::_print(::core::fmt::Arguments::new_v1(
                    &["day_cnt ", "\n"],
                    &[::core::fmt::ArgumentV1::new_display(&day_cnt)],
                ));
            };
            let day_fst_from_ce =
                i32::from_ne_bytes(*(self.buf.as_ptr() as *const [u8; LEN_DAY_FST]));
            let day_cur_from_ce = day.num_days_from_ce();
            let day_idx = day_cur_from_ce - day_fst_from_ce;
            {
                ::std::io::_print(::core::fmt::Arguments::new_v1(
                    &["day_idx ", "\n"],
                    &[::core::fmt::ArgumentV1::new_display(&day_idx)],
                ));
            };
            if day_idx < 0 || day_idx >= day_cnt {
                return None;
            }
            let idx_ref = IDX_DAY_REF + (LEN_DAY_REF * (day_idx as usize));
            {
                ::std::io::_print(::core::fmt::Arguments::new_v1(
                    &["idx_ref ", "\n"],
                    &[::core::fmt::ArgumentV1::new_display(&idx_ref)],
                ));
            };
            let idx_val =
                u32::from_ne_bytes(*(self.buf[idx_ref..].as_ptr() as *const [u8; LEN_DAY_REF]))
                    as usize;
            {
                ::std::io::_print(::core::fmt::Arguments::new_v1(
                    &["idx_val ", "\n"],
                    &[::core::fmt::ArgumentV1::new_display(&idx_val)],
                ));
            };
            let day_pck = &self.buf[idx_val..];
            let mut day_unp = ::alloc::vec::from_elem(0u32, day_u32x256_cnt(day_pck));
            {
                ::std::io::_print(::core::fmt::Arguments::new_v1(
                    &["day_unp.len() ", "\n"],
                    &[::core::fmt::ArgumentV1::new_display(&day_unp.len())],
                ));
            };
            day_u32x256_unp(&day_pck, &mut day_unp);
            let tmes = TmeMli::ndts(&mut day_unp, day);
            return Some(tmes);
        }
    }
}
/// `DayLen` represents the number of bytes used to store a compressed day.
pub struct DayLen {
    pub blk_bit_lens: Vec<u8>,
    pub blk_byt_lens: Vec<usize>,
    pub byt_len: usize,
}
#[automatically_derived]
#[allow(unused_qualifications)]
impl ::core::fmt::Debug for DayLen {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        match *self {
            DayLen {
                blk_bit_lens: ref __self_0_0,
                blk_byt_lens: ref __self_0_1,
                byt_len: ref __self_0_2,
            } => {
                let debug_trait_builder = &mut ::core::fmt::Formatter::debug_struct(f, "DayLen");
                let _ = ::core::fmt::DebugStruct::field(
                    debug_trait_builder,
                    "blk_bit_lens",
                    &&(*__self_0_0),
                );
                let _ = ::core::fmt::DebugStruct::field(
                    debug_trait_builder,
                    "blk_byt_lens",
                    &&(*__self_0_1),
                );
                let _ = ::core::fmt::DebugStruct::field(
                    debug_trait_builder,
                    "byt_len",
                    &&(*__self_0_2),
                );
                ::core::fmt::DebugStruct::finish(debug_trait_builder)
            }
        }
    }
}
#[automatically_derived]
#[allow(unused_qualifications)]
impl ::core::clone::Clone for DayLen {
    #[inline]
    fn clone(&self) -> DayLen {
        match *self {
            DayLen {
                blk_bit_lens: ref __self_0_0,
                blk_byt_lens: ref __self_0_1,
                byt_len: ref __self_0_2,
            } => DayLen {
                blk_bit_lens: ::core::clone::Clone::clone(&(*__self_0_0)),
                blk_byt_lens: ::core::clone::Clone::clone(&(*__self_0_1)),
                byt_len: ::core::clone::Clone::clone(&(*__self_0_2)),
            },
        }
    }
}
impl DayLen {
    /// `u32x256` returns the number of bytes used to store a compressed day.
    ///
    pub fn u32x256(unp: &[u32]) -> DayLen {
        let mut r = DayLen {
            blk_bit_lens: Vec::new(),
            blk_byt_lens: Vec::new(),
            byt_len: 0,
        };
        r.byt_len += vrn::usize_byt_len(unp.len());
        if unp.len() != 0 {
            let blk_cnt = unp.len() / BLK_256;
            r.byt_len += vrn::usize_byt_len(blk_cnt);
            if blk_cnt != 0 {
                r.byt_len += blk_cnt;
                r.byt_len += vrn::u32_byt_len(unp[0]);
                unsafe {
                    for n in 0..blk_cnt {
                        let blk_cur = &unp[n * BLK_256..(n + 1) * BLK_256];
                        r.blk_bit_lens.push(u32x256_bit_len(&blk_cur));
                        r.blk_byt_lens.push(u32x256_byt_len(r.blk_bit_lens[n]));
                        r.byt_len += r.blk_byt_lens[n];
                    }
                }
            }
            if unp.len() % BLK_256 != 0 {
                r.byt_len += vrn::u32s_byt_len(&unp[blk_cnt * BLK_256..]);
            }
        }
        return r;
    }
}
/// `day_u32x256_pck` compresses a day of u32s into packed bytes.
///
pub fn day_u32x256_pck(day: &DayLen, mut unp: &[u32], mut pck: &mut [u8]) {
    let mut len = vrn::usize_pck(unp.len(), pck);
    pck = &mut pck[len..];
    if unp.len() != 0 {
        len = vrn::usize_pck(day.blk_bit_lens.len(), pck);
        pck = &mut pck[len..];
        if day.blk_bit_lens.len() != 0 {
            let mut fst = unp[0];
            len = vrn::u32_pck(fst, pck);
            pck = &mut pck[len..];
            for n in 0..day.blk_bit_lens.len() {
                pck[0] = day.blk_bit_lens[n];
                pck = &mut pck[1..];
                unsafe {
                    u32x256_pck(day.blk_bit_lens[n], fst, unp, pck);
                }
                fst = unp[BLK_256 - 1];
                unp = &unp[BLK_256..];
                pck = &mut pck[day.blk_byt_lens[n]..];
            }
        }
        if unp.len() % BLK_256 != 0 {
            vrn::u32s_pck(unp, pck);
        }
    }
}
/// `day_u32x256_cnt` returns the total number of u32 elements in the packed day.
pub fn day_u32x256_cnt(pck: &[u8]) -> usize {
    return vrn::usize_unp(pck).val;
}
/// `day_u32x256_unp` decompresses packed bytes into a day of u32s.
///
pub fn day_u32x256_unp(mut pck: &[u8], mut unp: &mut [u32]) {
    let tot_u32 = vrn::usize_unp(pck);
    pck = &pck[tot_u32.len..];
    if tot_u32.val == 0 {
        return;
    }
    let tot_blk = vrn::usize_unp(pck);
    pck = &pck[tot_blk.len..];
    if tot_blk.val != 0 {
        let fst_unp = vrn::u32_unp(pck);
        pck = &pck[fst_unp.len..];
        let mut fst = fst_unp.val;
        for n in 0..tot_blk.val {
            let blk_bit_len = pck[0];
            pck = &pck[1..];
            unsafe {
                u32x256_unp(blk_bit_len, fst, pck, unp);
            }
            fst = unp[BLK_256 - 1];
            unp = &mut unp[BLK_256..];
            pck = &pck[u32x256_byt_len(blk_bit_len)..];
        }
    }
    if tot_u32.val % BLK_256 != 0 {
        vrn::u32s_unp(pck, unp);
    }
}
pub fn day_u32x256_vld(day: &DayLen, mut unp_exp: &[u32]) {
    let mut pck_v = ::alloc::vec::from_elem(0u8, day.byt_len);
    let mut pck = pck_v.as_mut_slice();
    let mut unp_act_v = ::alloc::vec::from_elem(0u32, unp_exp.len());
    let mut unp_act = unp_act_v.as_mut_slice();
    let mut len = vrn::usize_pck(unp_exp.len(), pck);
    let tot_u32 = vrn::usize_unp(pck);
    {
        ::std::io::_print(::core::fmt::Arguments::new_v1(
            &["Total U32 Count        pck,len ", ",", " unp ", "\n"],
            &[
                ::core::fmt::ArgumentV1::new_display(&unp_exp.len()),
                ::core::fmt::ArgumentV1::new_display(&len),
                ::core::fmt::ArgumentV1::new_debug(&tot_u32),
            ],
        ));
    };
    pck = &mut pck[len..];
    len = vrn::usize_pck(day.blk_bit_lens.len(), pck);
    let tot_blk = vrn::usize_unp(pck);
    {
        ::std::io::_print(::core::fmt::Arguments::new_v1(
            &["Block Count            pck,len ", ",", " unp ", "\n"],
            &[
                ::core::fmt::ArgumentV1::new_display(&day.blk_bit_lens.len()),
                ::core::fmt::ArgumentV1::new_display(&len),
                ::core::fmt::ArgumentV1::new_debug(&tot_blk),
            ],
        ));
    };
    pck = &mut pck[len..];
    let mut fst_pck = unp_exp[0];
    len = vrn::u32_pck(fst_pck, pck);
    let fst_unp0 = vrn::u32_unp(pck);
    {
        ::std::io::_print(::core::fmt::Arguments::new_v1(
            &["First U32 Block Value  pck,len ", ",", " unp ", "\n"],
            &[
                ::core::fmt::ArgumentV1::new_display(&unp_exp[0]),
                ::core::fmt::ArgumentV1::new_display(&len),
                ::core::fmt::ArgumentV1::new_debug(&fst_unp0),
            ],
        ));
    };
    pck = &mut pck[len..];
    let mut fst_unp = fst_unp0.val;
    for n in 0..day.blk_bit_lens.len() {
        {
            ::std::io::_print(::core::fmt::Arguments::new_v1(
                &["----------------       n ", "\n"],
                &[::core::fmt::ArgumentV1::new_display(&n)],
            ));
        };
        pck[0] = day.blk_bit_lens[n];
        let blk_bit_len = pck[0];
        {
            ::std::io::_print(::core::fmt::Arguments::new_v1(
                &["Block Bit-Length       n ", "  pck ", " unp ", "\n"],
                &[
                    ::core::fmt::ArgumentV1::new_display(&n),
                    ::core::fmt::ArgumentV1::new_display(&pck[0]),
                    ::core::fmt::ArgumentV1::new_display(&blk_bit_len),
                ],
            ));
        };
        pck = &mut pck[1..];
        unsafe {
            u32x256_pck(day.blk_bit_lens[n], fst_pck, unp_exp, pck);
            u32x256_unp(blk_bit_len, fst_unp, pck, unp_act);
        }
        {
            ::std::io::_print(::core::fmt::Arguments::new_v1(
                &["First Value            n ", "  pck ", "  unp ", "\n"],
                &[
                    ::core::fmt::ArgumentV1::new_display(&n),
                    ::core::fmt::ArgumentV1::new_display(&fst_pck),
                    ::core::fmt::ArgumentV1::new_display(&fst_unp),
                ],
            ));
        };
        {
            ::std::io::_print(::core::fmt::Arguments::new_v1(
                &["Block Value            n ", "  pck == unp ", "\n"],
                &[
                    ::core::fmt::ArgumentV1::new_display(&n),
                    ::core::fmt::ArgumentV1::new_display(
                        &(unp_exp[..BLK_256] == unp_act[..BLK_256]),
                    ),
                ],
            ));
        };
        for n in 0..BLK_256 {
            if unp_exp[n] != unp_act[n] {
                {
                    ::std::io::_print(::core::fmt::Arguments::new_v1(
                        &["", "  neq  exp ", "  act ", "\n"],
                        &[
                            ::core::fmt::ArgumentV1::new_display(&n),
                            ::core::fmt::ArgumentV1::new_display(&unp_exp[n]),
                            ::core::fmt::ArgumentV1::new_display(&unp_act[n]),
                        ],
                    ));
                };
                break;
            }
        }
        fst_pck = unp_exp[BLK_256 - 1];
        unp_exp = &unp_exp[BLK_256..];
        fst_unp = unp_act[BLK_256 - 1];
        unp_act = &mut unp_act[BLK_256..];
        let bit_len_pck = day.blk_byt_lens[n];
        let bit_len_unp = u32x256_byt_len(blk_bit_len);
        {
            ::std::io::_print(::core::fmt::Arguments::new_v1(
                &["Computed Bit-Length    n ", "  pck ", "  unp ", "\n"],
                &[
                    ::core::fmt::ArgumentV1::new_display(&n),
                    ::core::fmt::ArgumentV1::new_display(&bit_len_pck),
                    ::core::fmt::ArgumentV1::new_display(&bit_len_unp),
                ],
            ));
        };
        pck = &mut pck[day.blk_byt_lens[n]..];
        break;
    }
}
